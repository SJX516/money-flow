{"version":3,"sources":["utils/db.js","utils/utils.js","domain/repo/base_repo.js","domain/entity/base_entity.js","domain/repo/income_expenditure_repo.js","domain/entity/income_expenditure.js","domain/service/income_expenditure_service.js","pages/test_page.js","pages/detail/widget/input_widget.js","domain/repo/investment_repo.js","domain/entity/investment.js","domain/service/investment_service.js","pages/detail/month_page.js","pages/detail/todo_page.js","pages/detail/widget/cus_dialog.js","pages/detail/invest_page.js","pages/detail/init_page.js","domain/repo/summary_repo.js","domain/entity/summary.js","domain/service/summary_service.js","pages/main/main_page.js","index.js"],"names":["DBHelper","this","db","file","a","initSqlJs","locateFile","sqlWasm","SQL","Promise","resolve","reject","fr","FileReader","readAsArrayBuffer","onload","result","fileResult","Uints","Uint8Array","Database","data","export","buffer","Buffer","from","blob","Blob","url","window","URL","createObjectURL","downloadFile","console","log","document","createElement","body","appendChild","href","download","onclick","setTimeout","revokeObjectURL","click","tablename","select","cols","values","ops","selectAndOrder","orders","sql","genWhereSql","valueDict","length","join","JSON","stringify","exec","i","id","genSubSql","run","delete","content","isWhere","op","undefined","MoneyUtil","money","DataUtil","isEmpty","notNumber","temp","toFixed","money1","money2","b","str","o","isNull","isNaN","TimeUtil","time1","month","getMonth","year","getFullYear","Date","nextMonthStart","monthStart","monthTime","currentMonthStart","monthEnd","timeStr","substring","getDay","BaseRepo","prototype","format","fmt","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","k","test","replace","RegExp","$1","substr","DB_INIT","convert","App","Error","selectAll","deleteAll","date","allowNull","BaseEntity","gmtCreate","gmtModified","IncomeExpenditureRepo","detail","getDateStr","happenTime","insert","type","code","desc","update","startTime","endTime","IncomeExpenditureDetail","IncomeExpenditureType","getByCode","push","repo","upsert","get","name","Object","keys","key","concat","toList","Incomme","Expenditure","salary","self","num13","bonus","luckmoney","work","home","other","rent","utility","daily","taxi","phone","shopping","elc","life","happy","online","offline","food","canteen","out","family","traval","gift","study","health","car","etc","oil","girlfriend","eat","IncomeExpenditureService","save","monthDate","startDate","queryTimeBetwen","Typography","Title","Paragraph","Text","Link","React","Component","Option","Select","Layout","Header","Content","Sider","ItemNames","InputWidget","props","state","getInitialState","forEach","element","code2Name","opts","value","item","stateCode","nameAppend","required","hint","defaultValue","typeName","parentCode","parentName","getOpts","align","span","flex","style","width","onChange","setState","margin","placeholder","event","target","pon","moneyPon","ponKey","addonBefore","inMonth","picker","moment","m","dateString","toDate","isNum","e","warn","alert","rows","cfgs","itemToWidget","title","bodyStyle","padding","justify","onClick","checkData","onSubmit","s","NaN","InvestmentProductRepo","entity","fixVote","InvestmentProduct","InvestmentType","InvestmentDetailRepo","productId","productName","productType","buySellId","recordType","count","InvestmentDetail","InvestmentRecordType","BuySell","deleteBySellId","CurrentPrice","Profit","AssetDebtCurrentPrice","AssetDebtProfit","Product","saving","debt","stock_fund","etf","bond","stock","InvestmentService","typeCode","queryAll","product","details","investMap","invest","asset","dealDetail","currentProductMap","isAsset","isDebt","info","currentPrice","profits","totalMoney","datas","buySells","totalCount","productTypeCode","_upsertInvest","sellGetMoney","currentProfit","totalInvestMoney","getProductTotalBuySellBefore","getTime","buySell","principal","sellProfit","addSellInvestOfProfit","MonthPage","incomeExpendColumns","dataIndex","render","color","getStr","subIncomeExpendColumns","dayStr","sorter","compare","_","record","size","deleteIncomeExpendDetail","investColumns","currentMonthMoney","ungetProfit","aungetProfit","bungetProfit","safeDivision","subInvestColumns","profitMoney","abs","deleteInvestDetail","assetDebtColumns","subAssetDebtColumns","queryMonth","inputValues","getMoney","refreshPage","map","getAllInvestDetailBefore","_processInvestData","currentMonthDate","queryAllInvestDataBefore","lastMonthEnd","totalAssetMoneys","dealInvestDetailList","totalDebtMoneys","totalInvestMoneys","currentMonthDatas","ele","productCode","typeParentCode","addBuyInvest","message","error","addSellInvest","addAssetDebtProfit","updateTime","valueRange","textType","pMoney","createShowTextRow","text","strong","child","entitys","totalCurrentPrice","totalBuySellMoney","totalProfit","newEntity","expendCode2Name","incomeCode2Name","getExpenditureTypes","getIncomeTypes","investProductCode2Name","assetProductCode2Name","debtProductCode2Name","queryProducts","incomeExpendData","totalIncome","totalExpend","incomeEntitys","expendEntitys","queryData","sort","newEntityFromDetail","passiveIncomeEntitys","passiveExpendEntitys","lastMonthTotalMoney","getLastMonthTotalMoney","currentMonthTotalMoney","currentMonthAddMoney","totalMoneyEntitys","inveseData","assetDebtDatas","className","backgroundColor","orientation","insertData","columns","dataSource","expandable","expandedRowRender","index","pagination","sortDirections","rowExpandable","pageSize","getPercent","createShowMoneyRowIfBiggerThan","scroll","x","profit","TodoPage","fontSize","CusDialog","visible","footer","onCancel","onOk","InvestPage","productColumns","showEditProductDialog","deleteProduct","showDialog","currentProduct","editProduct","hideDialog","upsertProduct","getProductTypes","productData","queryAllInvestData","investDatas","addProduct","InitPage","files","initDb","onDbReady","fileName","accept","refreshDB","click1","click2","SummaryDataRepo","time","SummaryType","BY_MONTH_KEY","SummaryData","selectAllMonthKey","SummaryService","monthDatas","queryAllMonthKey","d","monthStr","MainPage","navItems","label","navKey","months","queryMonths","includes","addMonth","sideKey","siderItems","topRightBtns","subPage","openKeys","dbReady","sideDatas","getByMonthSideDatas","lastMonth","children","j","showAddNewMonthDialog","theme","mode","items","selectedKeys","onSelect","Item","addNewMoth","locale","ReactDOM","zhCN","getElementById","init"],"mappings":"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","file":"static/js/main.973e10e3.chunk.js","sourcesContent":["import initSqlJs from \"sql.js\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\n\nclass DBHelper {\n    constructor() {\n        this.db = null;\n    }\n\n    async init(file) {\n        let SQL = await initSqlJs({ locateFile: () => sqlWasm });\n        let fileResult = await new Promise((resolve, reject) => {\n            let fr = new FileReader();\n            fr.readAsArrayBuffer(file);\n            fr.onload = () => resolve(fr.result)\n        })\n        const Uints = new Uint8Array(fileResult);\n        this.db = new SQL.Database(Uints);\n    }\n\n    export() {\n        const data = this.db.export();\n        const buffer = Buffer.from(data);\n        var blob = new Blob([buffer]);\n        var url = window.URL.createObjectURL(blob);\n        this.downloadFile(url)\n    }\n\n    downloadFile(url) {\n        console.log(\"下载文件：\" + url);\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.href = url;\n        a.download = \"data.db\";\n        a.onclick = () => {\n            setTimeout(() => { window.URL.revokeObjectURL(a.href) }, 1500);\n        };\n        a.click();\n    }\n\n    selectAll(tablename) {\n        return this.select(tablename, [], [], [])\n    }\n\n    select(tablename, cols, values, ops) {\n        return this.selectAndOrder(tablename, cols, values, ops, [])\n    }\n\n    selectAndOrder(tablename, cols, values, ops, orders) {\n        let sql = `SELECT * FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        if (orders.length > 0) {\n            sql += ` order by ${orders.join(',')}`\n        }\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        return content\n    }\n\n    insert(tablename, cols, values) {\n        let sql = `INSERT INTO ${tablename} (${cols.join(',')}) VALUES (`\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            sql += \"$\" + cols[i] + i\n            if (i < cols.length - 1) {\n                sql += \", \"\n            }\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        sql += \") returning id\"\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        var content = this.db.exec(sql, valueDict);\n        return content[0].values[0][0]\n    }\n\n    update(tablename, id, cols, values) {\n        let sql = `UPDATE ${tablename} SET`\n        let data = this.genSubSql(cols, values, [], false)\n        let valueDict = data[1]\n        sql += data[0]\n        sql += \" where id=$id\"\n        valueDict['$id'] = id\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        this.db.run(sql, valueDict);\n    }\n\n    deleteAll(tablename) {\n        this.delete(tablename, [], [], [])\n    }\n\n    delete(tablename, cols, values, ops) {\n        let sql = `DELETE FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        console.log(JSON.stringify(content))\n    }\n\n    genWhereSql(cols, values, ops) {\n        return this.genSubSql(cols, values, ops, true)\n    }\n\n    genSubSql(cols, values, ops, isWhere) {\n        let sql = \"\"\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            if (i !== 0) {\n                sql += (isWhere ? \" and \" : \" , \")\n            } else {\n                sql += (isWhere ? \" where \" : \" \")\n            }\n            let op = ops[i]\n            if (op === undefined) {\n                op = \"=\"\n            }\n            sql += \" \" + cols[i] + \" \" + op + \" $\" + cols[i] + i\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        return [sql, valueDict]\n    }\n}\n\nexport default DBHelper","class MoneyUtil {\n    static getStr(money) {\n        if(DataUtil.isEmpty(money) || DataUtil.notNumber(money) || money == 0) {\n            return \"-\"\n        }\n        let temp = money / 100\n        if(temp % 1 === 0) {\n            return `￥${temp}`\n        } else {\n            return `￥${temp.toFixed(2)}`\n        }\n    }\n\n    static compare(money1, money2) {\n        if(DataUtil.notNumber(money1)) {\n            return -1\n        } else if (DataUtil.notNumber(money2)) {\n            return 1\n        }\n        return money1 - money2\n    }\n\n    // a / b\n    static safeDivision(a, b) {\n        if(DataUtil.notNumber(a) || DataUtil.notNumber(b) || b == 0) {\n            return null\n        } else {\n            return a / b\n        }\n    }\n}\n\nclass DataUtil {\n    static isEmpty(str) {\n        return str === undefined || str === null || str === \"\"\n    }\n\n    static isNull(o) {\n        return o === undefined || o === null\n    }\n\n    static notNumber(o) {\n        return this.isNull(o) || isNaN(o)\n    }\n\n    static getPercent(a) {\n        let temp = a * 100\n        if(temp % 1 === 0) {\n            return `${temp}%`\n        } else {\n            return `${temp.toFixed(2)}%`\n        }\n    }\n}\n\nclass TimeUtil {\n    static nextMonthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        if (month === 12) {\n            year += 1;\n            month = '01';\n        } else {\n            month += 1;\n            month = (month < 10) ? '0' + month : month;\n        }\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static monthEnd(time1) {\n        return new Date(this.nextMonthStart(time1) - 1)\n    }\n\n    static monthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static lastMonthEnd(time1) {\n        return new Date(this.monthStart(time1) - 1)\n    }\n\n    static inMonth(time1, monthTime) {\n        let currentMonthStart = TimeUtil.monthStart(monthTime)\n        let currentMonthEnd = TimeUtil.monthEnd(monthTime)\n        if (time1 > currentMonthEnd || time1 < currentMonthStart) {\n            return false\n        } else {\n            return true\n        }\n    }\n\n    static dayStr(time1) {\n        if(DataUtil.isNull(time1)) {\n            return \"\"\n        }\n        return time1.timeStr().substring(0, 10)\n    }\n\n    static monthStr(time1) {\n        return time1.timeStr().substring(0, 7)\n    }\n\n    static weekDayStr(time1) {\n        let i = time1.getDay()\n        switch (i) {\n            case 0:\n                return \"周日\"\n            case 1:\n                return \"周一\"\n            case 2:\n                return \"周二\"\n            case 3:\n                return \"周三\"\n            case 4:\n                return \"周四\"\n            case 5:\n                return \"周五\"\n            case 6:\n                return \"周六\"\n        }\n    }\n}\n\nexport { DataUtil, TimeUtil, MoneyUtil }","import { App, DB_INIT } from '../..';\n\nclass BaseRepo {\n\n    constructor() {\n        this.tablename = null\n        Date.prototype.format = function(fmt) { \n            var o = { \n               \"M+\" : this.getMonth()+1,                 //月份 \n               \"d+\" : this.getDate(),                    //日 \n               \"h+\" : this.getHours(),                   //小时 \n               \"m+\" : this.getMinutes(),                 //分 \n               \"s+\" : this.getSeconds(),                 //秒 \n               \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n               \"S\"  : this.getMilliseconds()             //毫秒 \n           }; \n           if(/(y+)/.test(fmt)) {\n                   fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n           }\n            for(var k in o) {\n               if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length===1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n                }\n            }\n           return fmt; \n        }\n        Date.prototype.timeStr = function() {\n            return this.format(\"yyyy-MM-dd hh:mm:ss\")\n        }\n    }\n\n    static getDateStr(date, allowNull=false) {\n        if(date == null) {\n            if(allowNull) {\n                return new Date().timeStr()\n            } else {\n                throw new Error(\"日期不能为 null\")\n            }\n        } else if(date instanceof Date) {\n            return date.timeStr()\n        } else {\n            throw new Error(\"日期格式不为 Date\")\n        }\n    }\n\n    get(id) {\n        if(!DB_INIT) {\n            return null\n        }\n        if (id != null) {\n            return this.convert(App.db.select(this.tablename, [\"id\"], [id], []))\n        } else {\n            throw new Error(\"id 不能为空\")\n        }\n    }\n\n    selectAll() {\n        if(!DB_INIT) {\n            return []\n        }\n        return this.convert(App.db.selectAll(this.tablename))\n    }\n\n    delete(id) {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.delete(this.tablename, [\"id\"], [id], [])\n    }\n\n    deleteAll() {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.deleteAll(this.tablename)\n    }\n\n    convert(content) {}\n}\n\nexport {BaseRepo}","class BaseEntity {\n    id = null;\n    gmtCreate = null;\n    gmtModified = null;\n}\n\nexport {BaseEntity}","import { BaseRepo } from './base_repo';\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../entity/income_expenditure';\nimport { App } from '../..';\n\nclass IncomeExpenditureRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"income_expenditure_detail\"\n    }\n\n    /**\n      * @param {IncomeExpenditureDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                 detail.type.code, detail.desc, detail.money, happenTime])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                detail.type.code, detail.desc, detail.money, happenTime])\n        }\n    }\n\n    select(startTime, endTime) {\n        if(endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        return this.convert(App.db?.select(this.tablename, [\"happen_time\", \"happen_time\"],\n         [startTime.timeStr(), endTime.timeStr()], ['>', '<']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new IncomeExpenditureDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = IncomeExpenditureType.getByCode(data[3])\n            detail.desc = data[4]\n            detail.money = data[5]\n            detail.happenTime = new Date(data[6])\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport {IncomeExpenditureRepo}","import { BaseRepo } from '../repo/base_repo';\nimport { BaseEntity } from './base_entity';\nimport {IncomeExpenditureRepo} from '../repo/income_expenditure_repo';\n\n//'收入/支出' 表\nclass IncomeExpenditureDetail extends BaseEntity {\n    /**\n     * @type {IncomeExpenditureType}\n     */\n    type = null;\n    //额外描述，备注\n    desc = null;\n    //分为单位，流入为正，流出为负\n    money = null;\n    //实际发生时间，不确定可以填月初\n    happenTime = null;\n\n    static repo = new IncomeExpenditureRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(startTime, endTime) {\n        return this.repo.select(startTime, endTime)\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(this.money*this.type.code < 0) {\n            this.money = -1 * this.money\n        }\n        IncomeExpenditureDetail.repo.upsert(this)\n    }\n}\n\n\nclass IncomeExpenditureType {\n    static Incomme = {\n        salary: {\n            self: new IncomeExpenditureType(10000, \"薪水\"),\n            num13: new IncomeExpenditureType(10001, \"薪水-十三薪\"),\n            bonus: new IncomeExpenditureType(10002, \"薪水-年终奖\"),\n        },\n        luckmoney: {\n            self: new IncomeExpenditureType(20000, \"红包\"),\n            work: new IncomeExpenditureType(20001, \"红包-工作\"),\n            home: new IncomeExpenditureType(20002, \"红包-家人\"),\n        },\n        other: {\n            self: new IncomeExpenditureType(30000, \"其他\"),\n        }\n    };\n\n    static Expenditure = {\n        home: {\n            self: new IncomeExpenditureType(-10000, \"住房\"),\n            rent: new IncomeExpenditureType(-10001, \"住房-房租\"),\n            utility: new IncomeExpenditureType(-10002, \"住房-水电\"),\n        },\n        daily: {\n            self: new IncomeExpenditureType(-20000, \"日常\"),\n            taxi: new IncomeExpenditureType(-20001, \"日常-交通\"),\n            phone: new IncomeExpenditureType(-20002, \"日常-话费\"),\n        },\n        shopping: {\n            self: new IncomeExpenditureType(-30000, \"购物\"),\n            elc: new IncomeExpenditureType(-30001, \"购物-电子\"),\n            life: new IncomeExpenditureType(-30002, \"购物-生活\"),\n        },\n        happy: {\n            self: new IncomeExpenditureType(-40000, \"娱乐\"),\n            online: new IncomeExpenditureType(-40001, \"娱乐-线上\"),\n            offline: new IncomeExpenditureType(-40002, \"娱乐-线下\"),\n        },\n        food: {\n            self: new IncomeExpenditureType(-50000, \"餐饮\"),\n            canteen: new IncomeExpenditureType(-50001, \"餐饮-食堂\"),\n            out: new IncomeExpenditureType(-50002, \"餐饮-外出\"),\n        },\n        family: {\n            self: new IncomeExpenditureType(-60000, \"家人\"),\n            traval: new IncomeExpenditureType(-60001, \"家人-交通\"),\n            gift: new IncomeExpenditureType(-60002, \"家人-礼物\"),\n        },\n        study: {\n            self: new IncomeExpenditureType(-70000, \"学习\"),\n            online: new IncomeExpenditureType(-70001, \"学习-线上\"),\n            offline: new IncomeExpenditureType(-70002, \"学习-线下\"),\n        },\n        health: {\n            self: new IncomeExpenditureType(-80000, \"健康\"),\n        },\n        car: {\n            self: new IncomeExpenditureType(-90000, \"车\"),\n            etc: new IncomeExpenditureType(-90001, \"车-停车/ETC\"),\n            oil: new IncomeExpenditureType(-90002, \"车-加油\"),\n        },\n        girlfriend: {\n            self: new IncomeExpenditureType(-100000, \"女朋友\"),\n            traval: new IncomeExpenditureType(-100001, \"女朋友-旅游\"),\n            eat: new IncomeExpenditureType(-100002, \"女朋友-吃喝\"),\n            gift: new IncomeExpenditureType(-100003, \"女朋友-礼物\"),\n        },\n        other: {\n            self: new IncomeExpenditureType(-110000, \"其他\"),\n        },\n    }\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof IncomeExpenditureType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    static values() {\n        return this.toList(this.Incomme).concat(this.toList(this.Expenditure))\n    }\n}\n\nexport {IncomeExpenditureDetail, IncomeExpenditureType}\n","import { TimeUtil } from \"../../utils/utils\"\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from \"../entity/income_expenditure\"\n\nclass IncomeExpenditureService {\n\n    static getIncomeTypes() {\n        return IncomeExpenditureType.Incomme\n    }\n\n    static getExpenditureTypes() {\n        return IncomeExpenditureType.Expenditure\n    }\n\n    /**\n     * \n     * @param {IncomeExpenditureType} type\n     * @param {Date} happenTime \n     */\n    static upsert(money, type, happenTime, desc=null, id=null) {\n        var detail = new IncomeExpenditureDetail()\n        detail.id = id\n        detail.type = type\n        detail.desc = desc\n        detail.money = money\n        detail.happenTime = happenTime\n        detail.save()\n    }\n\n    /**\n     * \n     * @returns {Array[IncomeExpenditureDetail]}\n     */\n    static queryMonth(monthDate) {\n        let startDate = TimeUtil.monthStart(monthDate)\n        return IncomeExpenditureDetail.queryTimeBetwen(startDate, TimeUtil.monthEnd(startDate))\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.delete(id)\n    }\n\n\n}\n\nexport {IncomeExpenditureService}","import React from 'react'\nimport { Upload, Button, DatePicker, version } from \"antd\"\nimport { Typography, Divider } from 'antd'\nimport { IncomeExpenditureService } from '../domain/service/income_expenditure_service'\nimport { App } from '..'\nimport { IncomeExpenditureType } from '../domain/entity/income_expenditure'\n\nconst { Title, Paragraph, Text, Link } = Typography\n\nclass TestPage extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.count = 1\n  }\n\n  initdb(files) {\n    console.log(files)\n    App.initDb(files[0])\n  }\n\n  quickclick() {\n    IncomeExpenditureService.upsert(1234, IncomeExpenditureType.Incomme.salary, new Date(), \"测试薪水\")\n  }\n\n  quickclick2() {\n    console.log(IncomeExpenditureService.queryAll())\n  }\n\n  quickclick3() {\n  }\n\n  quickclick4() {\n    App.db.export()\n  }\n\n  render() {\n    const props = {\n      name: 'file',\n      action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n      headers: {\n        authorization: 'authorization-text',\n      },\n      onChange(info) {\n        if (info.file.status !== 'uploading') {\n          console.log(info.file, info.fileList)\n        }\n        if (info.file.status === 'done') {\n          console.log(`${info.file.name} file uploaded successfully`)\n        } else if (info.file.status === 'error') {\n          console.log(`${info.file.name} file upload failed.`)\n        }\n      },\n    }\n\n    return (\n      <div className=\"test-page1\">\n        <h1>antd version: {version}</h1>\n        <div className='btns' >\n          <input type='file' id='dbfile' onChange={(e) => this.initdb(e.target.files)} />\n          <Button type=\"primary\" onClick={() => this.quickclick()}>\n            Click 1\n          </Button>\n          <Button onClick={() => this.quickclick2()}>Click 2</Button>\n          <Button type=\"dashed\" onClick={() => this.quickclick3()}>Click 3</Button>\n          <Button type=\"text\" onClick={() => this.quickclick4()}>保存</Button>\n          <Button type=\"link\">Link Button</Button>\n          <Upload {...props}>\n            <Button>Click to Upload</Button>\n          </Upload>\n        </div>\n        <div className=\"pickers\">\n          <DatePicker />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TestPage","import React from 'react'\nimport { Button, message, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, TimeUtil } from '../../../utils/utils';\nimport moment from 'moment';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nconst ItemNames = [\"type\", \"name\", \"desc\", \"money\", \"currentPrice\", \"currentProfit\", \"sellProfit\", \"count\", \"date\"]\n\nclass InputWidget extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = this.getInitialState()\n    }\n\n    static getMoney(s, key) {\n        let ponKey = key + \"Pon\"\n        let pon = s[ponKey] ? 1 : -1\n        if(DataUtil.notNumber(s[key])) {\n            return NaN\n        } else {\n            return s[key] * pon * 100\n        }\n    }\n\n    getInitialState() {\n        let result = {}\n        ItemNames.forEach(element => {\n            result[element] = null\n        })\n        return result\n    }\n\n    getOpts(code2Name) {\n        let opts = []\n        for (let code of Object.keys(code2Name)) {\n            opts.push(<Option key={code} value={code}>{code2Name[code][0]}</Option>)\n        }\n        return opts\n    }\n\n    itemToWidget(item) {\n        let stateCode = item.name\n        let nameAppend = (item.required ?? false) ? \"(必填)\" : \"\"\n        let hint = \"\"\n        let defaultValue = item.defaultValue\n        if(DataUtil.isNull(this.state[stateCode]) && !DataUtil.isNull(defaultValue)) {\n            this.state[stateCode] = defaultValue\n        }\n        switch (item.name) {\n            case \"type\":\n                let typeName = stateCode + \"Name\"\n                let parentCode = stateCode + \"ParentCode\"\n                let parentName = stateCode + \"ParentName\"\n                let opts = this.getOpts(item.code2Name)\n                return <Row align='middle'>\n                    <Col span={8}>\n                        <Text >类型{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Select style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value,\n                                    [typeName]: item.code2Name[value][0],\n                                    [parentCode]: item.code2Name[value][1],\n                                    [parentName]: item.code2Name[value][2]\n                                })\n                            }}>\n                            {opts}\n                        </Select>\n                    </Col>\n                </Row>\n            case \"name\":\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8} >\n                        <Text >名称{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Input placeholder='名称' style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(event) => {\n                                this.setState({\n                                    [stateCode]: event.target.value\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"money\":\n            case \"currentPrice\":\n            case \"currentProfit\":\n            case \"sellProfit\":\n            case \"count\":\n                let pon = item.moneyPon\n                hint = item.hint ?? \"金额\"\n                let ponKey = stateCode + \"Pon\"\n                this.state[ponKey] = pon\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <InputNumber style={{ width: \"150px\" }} addonBefore={pon ? \"+\" : \"-\"}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"date\":\n                if(!DataUtil.isNull(item.inMonth)) {\n                    if(DataUtil.isNull(this.state[stateCode]) || !TimeUtil.inMonth(this.state[stateCode], new Date(item.inMonth))) {\n                        this.state[stateCode] = new Date(item.inMonth)\n                    }\n                }\n                hint = item.hint ?? \"发生日期\"\n                let picker = item.picker ?? \"\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <DatePicker style={{ width: \"150px\" }}\n                            picker={picker}\n                            value={moment(this.state[stateCode])}\n                            onChange={(m, dateString) => {\n                                this.setState({ \n                                    [stateCode]: m.toDate(),\n                                 })\n                            }} />\n                    </Col>\n                </Row>\n            case \"desc\":\n                hint = item.hint ?? \"描述\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Input placeholder='描述' style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(event) => {\n                                this.setState({ [stateCode]: event.target.value })\n                            }} />\n                    </Col>\n                </Row>\n            default:\n                return <Row>\n                    <Text>未支持输入配置 {item.name}</Text>\n                </Row>\n        }\n    }\n\n    checkData(state, item) {\n        try {\n            let value = state[item.name]\n            if(item.required === true && DataUtil.isNull(value)) {\n                throw new Error(item.name + \" 必须输入\")\n            }\n            if(item.isNum === true && isNaN(value)) {\n                throw new Error(item.name + \" 必须为数字\")\n            }\n            if(!DataUtil.isNull(item.inMonth)) {\n                if(!TimeUtil.inMonth(value, new Date(item.inMonth))) {\n                    throw new Error(\"发生日期仅可选在当前月份：\" + item.inMonth)\n                }\n            }\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    render() {\n        const handleSubmit = () => {\n            for (let item of this.props.cfgs) {\n                if (!this.checkData(this.state, item)) {\n                    return\n                }\n            }\n            if (this.props.onSubmit(this.state)) {\n                this.setState(this.getInitialState())\n            }\n        };\n        let rows = []\n        for (let item of this.props.cfgs) {\n            rows.push(this.itemToWidget(item))\n        }\n\n        return (<Card title={this.props.title ?? \"新增\"} style={{ margin: \"0px 5px\"}} bodyStyle={{padding: \"25px\"}}>\n            {rows}\n            <Row justify='center' style={{ margin: \"15px 0 0 0\" }}>\n                <Col>\n                    <Button type=\"primary\" onClick={handleSubmit}> 提交 </Button>\n                </Col>\n            </Row>\n        </Card>)\n    }\n}\n\nexport default InputWidget","import { BaseRepo } from './base_repo';\nimport { App, DB_INIT } from '../..';\nimport { InvestmentDetail, InvestmentProduct, InvestmentProductReal, InvestmentRecordType, InvestmentType} from '../entity/investment';\n\nclass InvestmentProductRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_product\"\n    }\n\n    /**\n      * @param {InvestmentProduct} entity\n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        }\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new InvestmentProduct()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.name = data[3]\n            detail.type = InvestmentType.getByCode(data[4])\n            detail.desc = data[5]\n            detail.fixVote = data[6]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nclass InvestmentDetailRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_detail\"\n    }\n\n    /**\n      * @param {InvestmentDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            return App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                 detail.productId, detail.productName, detail.productType.code, detail.money, \n                 happenTime, detail.buySellId, detail.recordType.code, detail.count])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                detail.productId, detail.productName, detail.productType.code, detail.money,\n                happenTime, detail.buySellId, detail.recordType.code, detail.count])\n            return detail.id\n        }\n    }\n\n    select(productId, recordType, startTime, endTime) {\n        if(!DB_INIT) {\n            return []\n        }\n        if(startTime != null && endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        let cols = [], values = [], ops = []\n        if(productId != null) {\n            cols.push('product_id')\n            values.push(productId)\n            ops.push('=')\n        }\n        if(recordType != null) {\n            cols.push('record_type')\n            values.push(recordType.code)\n            ops.push('=')\n        }\n        if(startTime != null) {\n            cols.push('happen_time')\n            values.push(startTime.timeStr())\n            ops.push('>')\n        }\n        if(endTime != null) {\n            cols.push('happen_time')\n            values.push(endTime.timeStr())\n            ops.push('<')\n        }\n        return this.convert(App.db?.selectAndOrder(this.tablename, cols, values, ops, ['happen_time desc', 'gmt_modified desc']))\n    }\n\n    selectBySellId(buySellId) {\n        return this.convert(App.db?.select(this.tablename, [\"buy_sell_id\"],\n         [buySellId], ['=']))\n    }\n\n    deleteBySellId(buySellId) {\n        App.db?.delete(this.tablename, [\"buy_sell_id\"], [buySellId], ['='])\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new InvestmentDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.productId = data[3]\n            detail.productName = data[4]\n            detail.productType = InvestmentType.getByCode(data[5])\n            detail.money = data[6]\n            detail.happenTime = new Date(data[7])\n            detail.buySellId = data[8]\n            detail.recordType = InvestmentRecordType.getByCode(data[9])\n            detail.count = data[10]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport { InvestmentProductRepo, InvestmentDetailRepo}","import { DataUtil } from '../../utils/utils';\nimport { InvestmentDetailRepo, InvestmentProductRepo } from '../repo/investment_repo';\nimport { BaseEntity } from './base_entity';\n\n//投资产品\nclass InvestmentProduct extends BaseEntity {\n    //产品名称\n    name = null\n    /**\n     * @type {InvestmentType}\n     */\n    type = null\n    desc = null\n    fixVote = null\n\n    static repo = new InvestmentProductRepo()\n\n    static queryAll() {\n        return this.repo.selectAll()\n    }\n\n    static delete(id) {\n        InvestmentProduct.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(DataUtil.isNull(this.fixVote)) {\n            this.fixVote = 0\n        }\n        InvestmentProduct.repo.upsert(this)\n    }\n}\n\n//投资明细\n class InvestmentDetail extends BaseEntity {\n    productId = null\n    productName = null\n    /**\n     * @type {InvestmentType}\n     */\n    productType = null\n    //分为单位，买入为正，卖出为负\n    money = null\n    //份数，只在表示股票时候可能存在，用于计算成本价\n    count = null\n    //实际发生时间，不确定可以填月初\n    happenTime = null\n    /**\n     * 相关联的 买入/卖出 事件ID\n     */\n    buySellId = null\n    /**\n     * @type {InvestmentRecordType}\n     */\n    recordType = null\n\n    static repo = new InvestmentDetailRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(productId, recordType, startTime, endTime) {\n        return this.repo.select(productId, recordType, startTime, endTime)\n    }\n    \n    save() {\n        this.gmtModified = new Date()\n        return InvestmentDetail.repo.upsert(this)\n    }\n\n    delete() {\n        if(this.recordType.code === InvestmentRecordType.BuySell.code) {\n            InvestmentDetail.repo.deleteBySellId(this.id)\n        }\n        InvestmentDetail.repo.delete(this.id)\n    }\n}\n\nclass InvestmentRecordType {\n    static BuySell = new InvestmentRecordType(1, \"买入或卖出\")\n    static CurrentPrice = new InvestmentRecordType(2, \"投资类现价\")\n    static Profit = new InvestmentRecordType(3, \"投资类收益\")\n    static AssetDebtCurrentPrice = new InvestmentRecordType(4, \"资产/负债类现价\")\n    static AssetDebtProfit = new InvestmentRecordType(5, \"资产/负债类收益\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BuySell, this.CurrentPrice, this.Profit, this.AssetDebtCurrentPrice, this.AssetDebtProfit]\n    }\n}\n\nclass InvestmentType {\n    static Product = {\n        saving: new InvestmentType(1000000, \"现金类资产\"),\n        stock_fund: new InvestmentType(2000000, \"股票类基金\"),\n        etf: new InvestmentType(3000000, \"指数类基金\"),\n        bond: new InvestmentType(4000000, \"债券类基金\"),\n        stock: new InvestmentType(5000000, \"股票\"),\n        debt: new InvestmentType(6000000, \"负债\"),\n    };\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof InvestmentType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    static values() {\n        return this.toList(this.Product)\n    }\n\n    isAsset() {\n        return this === InvestmentType.Product.saving\n    }\n\n    isDebt() {\n        return this === InvestmentType.Product.debt\n    }\n}\n\nexport {InvestmentProduct, InvestmentType, InvestmentRecordType, InvestmentDetail}\n","import { DataUtil } from \"../../utils/utils\";\nimport { InvestmentDetail, InvestmentProduct, InvestmentRecordType, InvestmentType } from \"../entity/investment\";\n\nclass InvestmentService {\n\n    static getProductTypes() {\n        return InvestmentType.toList(InvestmentType.Product)\n    }\n\n    static upsertProduct(typeCode, name, desc = null, id = null) {\n        var entity = new InvestmentProduct()\n        entity.id = id\n        entity.type = InvestmentType.getByCode(typeCode)\n        entity.desc = desc\n        entity.name = name\n        entity.save()\n    }\n\n    static queryProducts() {\n        return InvestmentProduct.queryAll()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} detail \n     * @param {String} desc \n     * @param {Number} fixVote \n     */\n    static editProduct(detail, desc, fixVote) {\n        detail.fixVote = fixVote\n        detail.desc = desc\n        detail.save()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} product \n     */\n    static deleteProduct(product) {\n        InvestmentProduct.delete(product.id)\n    }\n\n    static getAllInvestDetailBefore(endTime) {\n        var details = InvestmentDetail.queryTimeBetwen(null, null, null, endTime)\n        let investMap = {\n            invest: {},\n            asset: {},\n            debt: {}\n        }\n        details.forEach(detail => {\n            this.dealDetail(detail, investMap)\n        })\n        return investMap\n    }\n\n    /**\n     * \n     * @param {InvestmentDetail} detail \n     * @param {{}} investMap \n     * \n     *  investMap = {\n            invest: {\n                \"1\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"buySells\": {\n                        \"totalMoney\": 100000\n                        \"datas\": [InvestmentDetail]\n                    },\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            },\n            asset: {                \n                \"2\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n\n            },\n            debt: {                \n                \"3\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            }\n        }\n     */\n    static dealDetail(detail, investMap) {\n        var currentProductMap = null\n        if (detail.productType.isAsset()) {\n            currentProductMap = investMap.asset\n        } else if (detail.productType.isDebt()) {\n            currentProductMap = investMap.debt\n        } else {\n            currentProductMap = investMap.invest\n        }\n        if (DataUtil.isNull(currentProductMap[detail.productId])) {\n            currentProductMap[detail.productId] = {}\n        }\n        currentProductMap = currentProductMap[detail.productId]\n        currentProductMap.info = detail\n\n        // 保存现价\n        if (detail.recordType == InvestmentRecordType.CurrentPrice || detail.recordType == InvestmentRecordType.AssetDebtCurrentPrice) {\n            if(currentProductMap.currentPrice === undefined) {\n                currentProductMap.currentPrice = detail\n            }\n        } else if (detail.recordType == InvestmentRecordType.Profit || detail.recordType == InvestmentRecordType.AssetDebtProfit) {\n            if (DataUtil.isNull(currentProductMap.profits)) {\n                currentProductMap.profits = {\n                    totalMoney: 0,\n                    datas: [],\n                }\n            }\n            currentProductMap.profits.totalMoney += detail.money\n            currentProductMap.profits.datas.push(detail)\n        } else if (detail.recordType == InvestmentRecordType.BuySell) {\n            if (DataUtil.isNull(currentProductMap.buySells)) {\n                currentProductMap.buySells = {\n                    totalMoney: 0,\n                    totalCount: 0,\n                    datas: [],\n                }\n            }\n            if(!DataUtil.notNumber(detail.count)) {\n                currentProductMap.buySells.totalCount += detail.count\n            }\n            currentProductMap.buySells.totalMoney += detail.money\n            currentProductMap.buySells.datas.push(detail)\n        }\n        return investMap\n    }\n\n    static getProductTotalBuySellBefore(productId, endTime) {\n        return InvestmentDetail.queryTimeBetwen(productId, InvestmentRecordType.BuySell, null, endTime)\n    }\n\n    static addAssetDebtProfit(productId, productName, productTypeCode, money, currentPrice, happenTime) {\n        if (!DataUtil.notNumber(money) && money != 0) {\n            this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n                InvestmentRecordType.AssetDebtProfit)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.AssetDebtCurrentPrice)\n    }\n\n    static addBuyInvest(productId, productName, productTypeCode, count, money, currentPrice, happenTime) {\n        var id = this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n            InvestmentRecordType.BuySell, count)\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.CurrentPrice, null, id)\n    }\n\n    static addSellInvest(productId, productName, productTypeCode, count, sellGetMoney, currentPrice, currentProfit, happenTime) {\n        let totalInvestMoney = 0\n        // 添加1秒，避免同一天添加的买入查不出来\n        this.getProductTotalBuySellBefore(productId, new Date(happenTime.getTime() + 1000)).forEach(buySell => {\n            totalInvestMoney += buySell.money\n        })\n        // 所得为正数，卖出的本金 = 总投资金额 - 当前投资金额\n        let principal = totalInvestMoney - (currentPrice - currentProfit)\n        let sellProfit = sellGetMoney - principal\n        console.log(`totalInvestMoney: ${totalInvestMoney} currentProfit: ${currentProfit} currentPrice: ${currentPrice} principal: ${principal} sellGetMoney: ${sellGetMoney} sellProfit: ${sellProfit}`)\n        this.addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime)\n    }\n\n    static addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime) {\n        // 所得为正数，表示花费的本金\n        let principal = sellGetMoney - sellProfit\n        if(!DataUtil.notNumber(count)) {\n            count = -1 * count\n        }\n        // 卖出本金，需要转为负数\n        var id = this._upsertInvest(productId, productName, productTypeCode, -1 * principal, happenTime,\n            InvestmentRecordType.BuySell, count)\n        if(currentPrice >= 0) {\n            this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n                InvestmentRecordType.CurrentPrice, null, id)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, sellProfit, happenTime, InvestmentRecordType.Profit, null, id)\n    }\n\n    /**\n     * @param {InvestmentDetail} detail \n     */\n    static deleteInvestDetail(detail) {\n        detail.delete()\n    }\n\n    static _upsertInvest(productId, productName, productTypeCode, money, happenTime, recordType,\n        count = null, buySellId = null, id = null) {\n        var detail = new InvestmentDetail()\n        detail.id = id\n        detail.productId = productId\n        detail.productName = productName\n        detail.productType = InvestmentType.getByCode(productTypeCode)\n        detail.money = money\n        detail.count = count\n        detail.happenTime = happenTime\n        detail.buySellId = buySellId\n        detail.recordType = recordType\n        return detail.save()\n    }\n}\n\nexport default InvestmentService","import React from 'react'\nimport { Table, Tag, Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography, message } from \"antd\"\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport InputWidget from './widget/input_widget';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { InvestmentRecordType, InvestmentType } from '../../domain/entity/investment';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass MonthPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.incomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.title === '主动收入' || entity.title === '被动收入') {\n                    color = 'volcano'\n                } else if (entity.title === '主动支出' || entity.title === '被动支出') {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.title}>\n                    {entity.title}\n                </Tag>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            }\n        }]\n        this.subIncomeExpendColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.title}</Text>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.money, b.entity.money)\n        }, {\n            title: '描述',\n            key: 'desc',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.desc}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => {\n                if(!DataUtil.isNull(record.entity.id)) {\n                    return <Space size=\"middle\">\n                        <a onClick={() => {\n                            this.deleteIncomeExpendDetail(record.entity.id)\n                        }}>删除</a>\n                    </Space>\n                }\n            }   \n        },]\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Tag color={\"volcano\"} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '当月投资',\n            key: 'currentMonthInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.currentMonthMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.currentMonthMoney, b.entity.buySells?.currentMonthMoney)\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '当月入账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.currentMonthMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.profits?.currentMonthMoney, b.entity.profits?.currentMonthMoney)\n        }, {\n            title: '账面利润',\n            key: 'totalProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let ungetProfit = entity.currentPrice?.money - entity.buySells?.totalMoney\n                return <Text>{MoneyUtil.getStr(ungetProfit)}</Text>\n            },\n            sorter: (a, b) => {\n                let aungetProfit = a.entity.currentPrice?.money - a.entity.buySells?.totalMoney\n                let bungetProfit = b.entity.currentPrice?.money - b.entity.buySells?.totalMoney\n                return MoneyUtil.compare(aungetProfit, bungetProfit)\n            }\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        },]\n\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(-1 * entity.money + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.assetDebtColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.info.productType.isDebt()) {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '总额',\n            key: 'currentPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '当月入账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.currentMonthMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.profits?.currentMonthMoney, b.entity.profits?.currentMonthMoney)\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }]\n\n        this.subAssetDebtColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '入账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n    }\n\n    queryData(monthDate) {\n        return IncomeExpenditureService.queryMonth(monthDate)\n    }\n\n    insertData(inputValues) {\n        try {\n            let money = InputWidget.getMoney(inputValues, \"money\")\n            let date = inputValues.date\n            IncomeExpenditureService.upsert(money,\n                IncomeExpenditureType.getByCode(inputValues.type), date, inputValues.desc ?? \"\")\n            this.refreshPage()\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    queryAllInvestDataBefore(monthDate) {\n        let map = InvestmentService.getAllInvestDetailBefore(TimeUtil.monthEnd(monthDate))\n        this._processInvestData(map.asset, monthDate)\n        this._processInvestData(map.debt, monthDate)\n        this._processInvestData(map.invest, monthDate)\n        return map\n    }\n\n    getLastMonthTotalMoney(currentMonthDate) {\n        let investMap = this.queryAllInvestDataBefore(TimeUtil.lastMonthEnd(currentMonthDate))\n        let totalAssetMoneys = this.dealInvestDetailList(investMap.asset, [])\n        let totalDebtMoneys = this.dealInvestDetailList(investMap.debt, [])\n        let totalInvestMoneys = this.dealInvestDetailList(investMap.invest, [])\n        return totalAssetMoneys[0] + totalDebtMoneys[0] + totalInvestMoneys[2]\n    }\n\n    _processInvestData(details, currentMonthDate) {\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            if (!DataUtil.isNull(detail.profits)) {\n                let currentMonthMoney = 0\n                let currentMonthDatas = []\n                detail.profits.datas.forEach(ele => {\n                    if (TimeUtil.inMonth(ele.happenTime, currentMonthDate)) {\n                        currentMonthMoney += ele.money\n                        currentMonthDatas.push(ele)\n                    }\n                })\n                detail.profits.currentMonthMoney = currentMonthMoney\n                detail.profits.currentMonthDatas = currentMonthDatas\n            }\n            if (!DataUtil.isNull(detail.buySells)) {\n                let currentMonthMoney = 0\n                let currentMonthDatas = []\n                detail.buySells.datas.forEach(ele => {\n                    if (TimeUtil.inMonth(ele.happenTime, currentMonthDate)) {\n                        currentMonthMoney += ele.money\n                        currentMonthDatas.push(ele)\n                    }\n                })\n                detail.buySells.currentMonthMoney = currentMonthMoney\n                detail.buySells.currentMonthDatas = currentMonthDatas\n            }\n        }\n    }\n\n    addBuyInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let count = s.count\n        let happenTime = s.date\n        InvestmentService.addBuyInvest(productCode, productName, productTypeCode, count, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    addSellInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let count = s.count\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let currentProfit = InputWidget.getMoney(s, \"currentProfit\")\n        let sellProfit = InputWidget.getMoney(s, \"sellProfit\")\n        let happenTime = s.date\n        if (!DataUtil.notNumber(sellProfit)) {\n            InvestmentService.addSellInvestOfProfit(productCode, productName, productTypeCode, count, money, sellProfit, currentPrice, happenTime)\n        } else if (!DataUtil.notNumber(currentProfit)) {\n            InvestmentService.addSellInvest(productCode, productName, productTypeCode, count, money, currentPrice, currentProfit, happenTime)\n        } else {\n            message.error(\"卖出利润 或 账面利润 必须填写一个！\")\n            return false\n        }\n        this.refreshPage()\n        return true\n    }\n\n    addAssetDebtProfit(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let happenTime = s.date\n        InvestmentService.addAssetDebtProfit(productCode, productName, productTypeCode, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    deleteIncomeExpendDetail(id) {\n        IncomeExpenditureService.delete(id)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    createShowMoneyRowIfBiggerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney > valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney > valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return this.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRowIfSmallerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney < valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney < valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return this.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRow(title, money) {\n        return this.createShowTextRow(title, MoneyUtil.getStr(money), \"\")\n    }\n\n    createShowTextRow(title, text, textType = \"\") {\n        return (<Row align='middle' style={{ margin: '0 10px', padding: '4px 0', }} >\n            <Col span={12}>\n                <Text type={textType} strong>{title}</Text>\n            </Col>\n            <Col span={12} align='right'>\n                <Text type={textType} strong>{text}</Text>\n            </Col>\n        </Row>\n        )\n    }\n\n    /**\n     * @param {IncomeExpenditureDetail} detail \n     */\n    newEntityFromDetail(detail) {\n        return {\n            id: detail.id,\n            happenTime: detail.happenTime,\n            title: detail.type.name,\n            money: detail.money,\n            desc: detail.desc,\n        }\n    }\n\n    newEntity(happenTime, title, money, desc, child=[]) {\n        return {\n            happenTime: happenTime,\n            title: title,\n            money: money,\n            desc: desc,\n            child: child\n        }\n    }\n\n    dealInvestDetailList(details, entitys) {\n        let totalCurrentPrice = 0, totalBuySellMoney = 0, totalProfit = 0\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            if (!DataUtil.isNull(detail.currentPrice)) {\n                totalCurrentPrice += detail.currentPrice.money\n            }\n            if (!DataUtil.isNull(detail.profits)) {\n                if(detail.profits.currentMonthMoney !== 0) {\n                    entitys.push(this.newEntity(detail.info.happenTime, detail.info.productName, detail.profits.currentMonthMoney, null))\n                    totalProfit += detail.profits.currentMonthMoney\n                }\n            }\n            if (!DataUtil.isNull(detail.buySells)) {\n                totalBuySellMoney += detail.buySells.totalMoney\n            }\n        }\n        return [totalCurrentPrice, totalProfit, totalBuySellMoney]\n    }\n\n    render() {\n        let currentMonthDate = new Date(this.props.month)\n        if (DataUtil.notNumber(currentMonthDate)) {\n            return <Content />\n        }\n        console.log(\"month page render \" + this.props.month)\n        //处理一些类型数据\n        let expendCode2Name = {}, incomeCode2Name = {}\n        IncomeExpenditureType.toList(IncomeExpenditureService.getExpenditureTypes()).forEach(type => {\n            expendCode2Name[type.code] = [type.name]\n        })\n        IncomeExpenditureType.toList(IncomeExpenditureService.getIncomeTypes()).forEach(type => {\n            incomeCode2Name[type.code] = [type.name]\n        })\n        let investProductCode2Name = {}, assetProductCode2Name = {}, debtProductCode2Name = {}\n        InvestmentService.queryProducts().forEach(entity => {\n            if (entity.type.isAsset()) {\n                assetProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else if (entity.type.isDebt()) {\n                debtProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else {\n                investProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            }\n        })\n        //处理收支数据\n        let incomeExpendData = []\n        let totalIncome = 0, totalExpend = 0\n        let incomeEntitys = [], expendEntitys = []\n        this.queryData(currentMonthDate).sort((a, b) => Math.abs(a.type.code) > Math.abs(b.type.code) ? 1 : -1).forEach(detail => {\n            if (detail.type.code > 0) {\n                incomeEntitys.push(this.newEntityFromDetail(detail))\n                totalIncome += detail.money\n            } else {\n                expendEntitys.push(this.newEntityFromDetail(detail))\n                totalExpend += detail.money\n            }\n        })\n\n        //处理资产、负债、投资的一些总数据\n        let investMap = this.queryAllInvestDataBefore(currentMonthDate)\n        let passiveIncomeEntitys = [], passiveExpendEntitys = []\n        let totalAssetMoneys = this.dealInvestDetailList(investMap.asset, passiveIncomeEntitys)\n        let totalDebtMoneys = this.dealInvestDetailList(investMap.debt, passiveExpendEntitys)\n        let totalInvestMoneys = this.dealInvestDetailList(investMap.invest, passiveIncomeEntitys)\n\n        let lastMonthTotalMoney = this.getLastMonthTotalMoney(currentMonthDate)\n        let currentMonthTotalMoney = totalAssetMoneys[0] + totalDebtMoneys[0] + totalInvestMoneys[2]\n        let currentMonthAddMoney = totalIncome + totalExpend + totalAssetMoneys[1]\n            + totalInvestMoneys[1] + totalDebtMoneys[1]\n\n        incomeExpendData.push({key: \"主动收入\", entity: this.newEntity(null, \"主动收入\", totalIncome, null, incomeEntitys)})    \n        incomeExpendData.push({key: \"被动收入\", entity: this.newEntity(null, \"被动收入\", totalAssetMoneys[1] + totalInvestMoneys[1], \n            null, passiveIncomeEntitys)})\n        incomeExpendData.push({key: \"主动支出\", entity: this.newEntity(null, \"主动支出\", totalExpend, null, expendEntitys)})\n        incomeExpendData.push({key: \"被动支出\", entity: this.newEntity(null, \"被动支出\", totalDebtMoneys[1], \n            null, passiveExpendEntitys)})\n        incomeExpendData.push({key: \"新增现金\", entity: this.newEntity(null, \"新增现金\", currentMonthAddMoney, \n            null)})\n        incomeExpendData.push({key: \"上期总资产\", entity: this.newEntity(null, \"上期总资产\", lastMonthTotalMoney, \n            null)})\n\n        let totalMoneyEntitys = []\n        totalMoneyEntitys.push(this.newEntity(null, \"资产总额\", totalAssetMoneys[0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"负债总额\", totalDebtMoneys[0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"投资总额\", totalInvestMoneys[2], `账面价值：${MoneyUtil.getStr(totalInvestMoneys[0])}`))\n        incomeExpendData.push({key: \"当前总资产\", entity: this.newEntity(null, \"当前总资产\", currentMonthTotalMoney, \n            null, totalMoneyEntitys)})\n\n        let subIncomeExpendRowRender = (record, index) => {\n            const data = [];\n            record.entity.child.forEach(ele => {\n                data.push({\n                    key: DataUtil.isNull(ele.id) ? ele.title : ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subIncomeExpendColumns} dataSource={data} pagination={false} sortDirections={['descend']}/>;\n        }\n        let subIncomeExpendRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.child) &&\n                record.entity.child.length > 0\n        }\n\n        //处理资产、负债、投资的表格数据\n        let inveseData = []\n        for (let productId of Object.keys(investMap.invest)) {\n            let detail = investMap.invest[productId]\n            inveseData.push({ key: productId, entity: detail })\n        }\n\n        let assetDebtDatas = []\n        for (let productId of Object.keys(investMap.asset)) {\n            let detail = investMap.asset[productId]\n            assetDebtDatas.push({ key: productId, entity: detail })\n        }\n        for (let productId of Object.keys(investMap.debt)) {\n            let detail = investMap.debt[productId]\n            assetDebtDatas.push({ key: productId, entity: detail })\n        }\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.currentMonthDatas.forEach(ele => {\n                for (let profit of record.entity.profits?.currentMonthDatas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.currentMonthDatas) &&\n                record.entity.buySells?.currentMonthDatas.length > 0\n        }\n        let subAssetDebtRowRender = (record, index) => {\n            const data = [];\n            record.entity.profits.currentMonthDatas.forEach(ele => {\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subAssetDebtColumns} dataSource={data} pagination={false} />;\n        }\n        let subAssetDebtRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.profits?.currentMonthDatas) &&\n                record.entity.profits?.currentMonthDatas.length > 0\n        }\n\n        return (\n            <Content className='Content'>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">新增收入/支出</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"收入\" cfgs={[{\n                            name: \"type\",\n                            code2Name: incomeCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                        <InputWidget title=\"支出\" cfgs={[{\n                            name: \"type\",\n                            code2Name: expendCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.incomeExpendColumns} dataSource={incomeExpendData}\n                            expandable={{\n                                expandedRowRender: subIncomeExpendRowRender,\n                                rowExpandable: subIncomeExpendRowExpandable\n                            }} pagination={{ pageSize: 20 }} sortDirections={['descend']} />\n                        <Divider orientation=\"center\">指标</Divider>\n                        {this.createShowTextRow(\"被动收入/主动收入\", DataUtil.getPercent(totalAssetMoneys[1] / totalIncome))}\n                        {this.createShowTextRow(\"被动收入/主动支出\", DataUtil.getPercent(totalAssetMoneys[1] / Math.abs(totalExpend)))}\n                        {/* 大于 0 表示：新增现金少了 或 当前总资产多了 */}\n                        {this.createShowMoneyRowIfBiggerThan(\"总资产环比误差\", currentMonthTotalMoney - lastMonthTotalMoney - currentMonthAddMoney, [500, 1000])}\n                    </Col>\n                </Row>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">资产/负债</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"资产\" cfgs={[{\n                            name: \"type\",\n                            code2Name: assetProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"收益\",\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n\n                        <InputWidget title=\"负债\" cfgs={[{\n                            name: \"type\",\n                            code2Name: debtProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"money\",\n                            hint: \"亏损\",\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.assetDebtColumns} dataSource={assetDebtDatas}\n                            expandable={{\n                                expandedRowRender: subAssetDebtRowRender,\n                                rowExpandable: subAssetDebtRowExpandable\n                            }} pagination={{ pageSize: 20 }} scroll={{ x: 1000 }} sortDirections={['descend']} />\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">投资</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"买入投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            hint: \"花费金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"count\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addBuyInvest(s)\n                        }} />\n                        <InputWidget title=\"卖出投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"count\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"卖出所得金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"sellProfit\",\n                            hint: \"卖出利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentProfit\",\n                            hint: \"账面利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addSellInvest(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.investColumns} dataSource={inveseData} expandable={{\n                            expandedRowRender: subInvestRowRender,\n                            rowExpandable: subInvestRowExpandable\n                        }} pagination={{ pageSize: 20 }} scroll={{ x: 1000 }} sortDirections={['descend']} />\n                    </Col>\n                </Row>\n            </Content>\n        )\n    }\n}\n\nexport default MonthPage","import React from 'react'\nimport { Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { DataUtil, TimeUtil } from '../../utils/utils';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass TodoPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    //TODO 导入导出自动化 or 在线化 \n    //年度总结，月度、年度投资利润分析\n    //利率计算器\n    render() {\n        return (\n            <Content className='Content'>\n                <Text style={{fontSize: '50px'}}> TODO </Text>\n            </Content>\n        )\n    }\n}\n\nexport default TodoPage","import React from 'react'\nimport { Modal, Form, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport InputWidget from './input_widget'\n\nclass CusDialog extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n\n    render() {\n        let title = this.props.title\n        let visible = this.props.visible\n        let cfgs = this.props.cfgs\n        return <Modal title={title} visible={visible}\n            footer={null}\n            onCancel={() => this.props.onCancel()}>\n            <InputWidget key={this.props.key} title=\"\" cfgs={cfgs} onSubmit={(s) => {\n                return this.props.onOk(s)\n            }} />\n        </Modal>\n    }\n}\n\nexport { CusDialog }","import React from 'react'\nimport { Table, Tag, Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport InputWidget from './widget/input_widget';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { CusDialog } from './widget/cus_dialog';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\n//TODO 产品的总收益等等计算\nclass InvestPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Tag color={\"volcano\"} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '账面利润',\n            key: 'totalProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let ungetProfit = entity.currentPrice?.money - entity.buySells?.totalMoney\n                return <Text>{MoneyUtil.getStr(ungetProfit)}</Text>\n            },\n            sorter: (a, b) => {\n                let aungetProfit = a.entity.currentPrice?.money - a.entity.buySells?.totalMoney\n                let bungetProfit = b.entity.currentPrice?.money - b.entity.buySells?.totalMoney\n                return MoneyUtil.compare(aungetProfit, bungetProfit)\n            }\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.buySells?.totalCount}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        },];\n\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(-1 * entity.money + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{Math.abs(entity.count)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.productColumns = [\n            {\n                title: '类型',\n                key: 'type',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let color = 'volcano'\n                    if (entity.type?.isAsset()) {\n                        color = 'geekblue'\n                    } else if (entity.type?.isDebt()) {\n                        color = 'green'\n                    }\n                    return <Tag color={color} key={entity.type?.code}>\n                        {entity.type?.name}\n                    </Tag>\n                },\n            }, {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.name}</Text>\n                },\n            }, {\n                title: '定投额',\n                key: 'fixVote',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{MoneyUtil.getStr(entity.fixVote)}</Text>\n                },\n            }, {\n                title: '描述',\n                key: 'desc',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.desc}</Text>\n                },\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={() => { this.showEditProductDialog(record.entity) }}>编辑</a>\n                        <a onClick={() => { this.deleteProduct(record.entity) }}>删除</a>\n                    </Space>\n                ),\n            },\n        ];\n    }\n\n    showEditProductDialog(detail) {\n        this.setState({\n            showDialog: \"editProduct\",\n            currentProduct: detail\n        })\n    }\n\n    editProduct(detail, state) {\n        InvestmentService.editProduct(detail, state.desc, InputWidget.getMoney(state, \"money\"))\n        this.hideDialog()\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n            currentProduct: null\n        })\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    addProduct(s) {\n        InvestmentService.upsertProduct(s.type, s.name, s.desc)\n        this.refreshPage()\n    }\n\n    queryProducts() {\n        return InvestmentService.queryProducts()\n    }\n\n    deleteProduct(entity) {\n        InvestmentService.deleteProduct(entity)\n        this.refreshPage()\n    }\n\n    queryAllInvestData() {\n        let map = InvestmentService.getAllInvestDetailBefore(null)\n        this._processInvestData(map.invest)\n        return map\n    }\n\n    _processInvestData(details) {\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n        }\n    }\n\n    render() {\n        console.log('invest page render')\n        let code2Name = {}\n        InvestmentService.getProductTypes().forEach(type => {\n            code2Name[type.code] = [type.name]\n        })\n        let productData = []\n        InvestmentService.queryProducts().sort((a, b) => Math.abs(a.type.code) < Math.abs(b.type.code) ? 1 : -1).forEach(entity => {\n            productData.push({ key: entity.id, entity: entity })\n        })\n\n        let investMap = this.queryAllInvestData()\n\n        let investDatas = []\n        for (let productId of Object.keys(investMap.invest)) {\n            let detail = investMap.invest[productId]\n            investDatas.push({ key: productId, entity: detail })\n        }\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            console.log(record.entity)\n            record.entity.buySells.datas.forEach(ele => {\n                for (let profit of record.entity.profits?.datas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.datas)\n        }\n        return (\n            <Content className='Content'>\n                <Table columns={this.investColumns} dataSource={investDatas} expandable={{\n                    expandedRowRender: subInvestRowRender,\n                    rowExpandable: subInvestRowExpandable\n                }} pagination={{pageSize: 20}} scroll={{ x: 1400 }} sortDirections={['descend']}/>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Col span={8}>\n                        <InputWidget title={\"新增投资产品\"} cfgs={[{\n                            name: \"type\",\n                            code2Name: code2Name,\n                            required: true\n                        }, {\n                            name: \"name\",\n                            required: true\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            this.addProduct(s)\n                            return true\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.productColumns} dataSource={productData} pagination={{pageSize: 20}}/>\n                    </Col>\n                </Row>\n                <CusDialog title=\"修改产品\" visible={this.state.showDialog === \"editProduct\"}\n                        key={this.state.currentProduct?.id}\n                        cfgs={[{\n                            name: \"money\",\n                            hint: \"定投额\",\n                            defaultValue: this.state.currentProduct?.fixVote / 100,\n                            moneyPon: true\n                        }, {\n                            name: \"desc\",\n                            defaultValue: this.state.currentProduct?.desc,\n                        }]}\n                        onOk={(state) => this.editProduct(this.state.currentProduct, state)}\n                        onCancel={() => this.hideDialog()} />\n            </Content>\n        )\n    }\n}\n\nexport default InvestPage","import React from 'react'\nimport { Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, TimeUtil } from '../../utils/utils';\nimport { App } from '../..';\nimport InputWidget from './widget/input_widget';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass InitPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    async refreshDB(files) {\n        await App.initDb(files[0])\n        console.log(files[0])\n        this.props.onDbReady()\n    }\n\n    export() {\n        App.db?.export()\n    }\n\n    click1() {\n    }\n\n    click2() {\n    }\n\n    render() {\n        return (\n            <Content className='Content'>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\" }}>\n                    <Col span={12} align='center'>\n                        <Divider orientation=\"center\">加载DB文件1111</Divider>\n                        <Text>{this.state.fileName}</Text>\n                        <input type='file' id='dbfile' accept=\".db\" onChange={(e) => this.refreshDB(e.target.files)} />\n                    </Col>\n                    <Col span={12} align='center'>\n                        <Divider orientation=\"center\">导出DB文件</Divider>\n                        <Button onClick={() => this.export()}>保存DB</Button>\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\", margin: \"10px 0\" }}>\n                    <Divider orientation=\"center\">测试按钮</Divider>\n                    <Button onClick={() => this.click1()}>click1</Button>\n                    <Button onClick={() => this.click2()}>click2</Button>\n                    <InputWidget title=\"测试\" cfgs={[{\n                        name: \"date\",\n                        hint: \"月份\",\n                        picker: \"month\",\n                        defaultValue: new Date()\n                    }]} onSubmit={(s) => {\n                        console.log(s)\n                        return true\n                    }} />\n                </Row>\n            </Content>\n        )\n    }\n}\n\nexport default InitPage","import { BaseRepo } from './base_repo';\nimport { App, DB_INIT } from '../..';\nimport { SummaryData, SummaryType } from '../entity/summary';\n\nclass SummaryDataRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"data_summary\"\n    }\n\n    /**\n      * @param {SummaryData} entity \n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        }\n    }\n\n    selectAllMonthKey() {\n        return this.convert(App.db?.select(this.tablename, ['type'], [SummaryType.BY_MONTH_KEY.code], ['=']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new SummaryData()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = SummaryType.getByCode(data[3])\n            detail.time = new Date(data[4])\n            detail.money = data[5]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport {SummaryDataRepo}","import { SummaryDataRepo } from '../repo/summary_repo';\nimport { BaseEntity } from './base_entity';\n\n//数据总结\nclass SummaryData extends BaseEntity {\n    /**\n     * @type {SummaryType}\n     */\n    type = null\n    time = null\n    money = null\n\n    static repo = new SummaryDataRepo()\n\n    static queryAllMonthKey() {\n        return this.repo.selectAllMonthKey()\n    }\n\n    static delete(id) {\n        this.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        SummaryData.repo.upsert(this)\n    }\n}\n\nclass SummaryType {\n    static BY_MONTH_KEY = new SummaryType(1, \"按月展示的可用月份\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BY_MONTH_KEY]\n    }\n}\n\nexport {SummaryData, SummaryType}","import { TimeUtil } from \"../../utils/utils\"\nimport { SummaryData, SummaryType } from \"../entity/summary\"\n\nclass SummaryService {\n\n    static addMonth(monthDate) {\n        var data = new SummaryData()\n        data.type = SummaryType.BY_MONTH_KEY\n        data.time = TimeUtil.monthStart(monthDate)\n        data.save()\n    }\n\n    static queryMonths() {\n        var monthDatas = SummaryData.queryAllMonthKey()\n        console.log(monthDatas)\n        return monthDatas.map(d => {\n            return TimeUtil.monthStr(d.time)\n        })\n    }\n}\n\nexport {SummaryService}","import React, { useState } from 'react'\nimport { Modal, message, Button, Layout, Breadcrumb, Menu, Row, Col, Input } from \"antd\"\nimport MonthPage from '../detail/month_page';\nimport TodoPage from '../detail/todo_page'\nimport InvestPage from '../detail/invest_page'\nimport { DataUtil, TimeUtil } from '../../utils/utils'\nimport InitPage from '../detail/init_page'\nimport { SummaryService } from '../../domain/service/summary_service';\nimport InputWidget from '../detail/widget/input_widget';\nimport { CusDialog } from '../detail/widget/cus_dialog';\n\nconst { Header, Content, Sider } = Layout;\n\nclass MainPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.navItems = ['init', 'by_month', 'invest_detail', 'todo'].map((key) => {\n            switch (key) {\n                case 'init':\n                    return { key, label: \"数据初始化\" }\n                case 'by_month':\n                    return { key, label: \"按月展示\" }\n                case 'invest_detail':\n                    return { key, label: \"投资详情\" }\n                default:\n                    return { key, label: \"TODO\" }\n            }\n        });\n        this.state = {\n            navKey: \"init\",\n        }\n\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    getByMonthSideDatas() {\n        var months = SummaryService.queryMonths()\n        this.months = months\n        var map = {}\n        months.forEach(element => {\n            let year = element.substring(0, 4)\n            if (DataUtil.isNull(map[year])) {\n                map[year] = []\n            }\n            map[year].push(element)\n        })\n        console.log(map)\n        return map\n    }\n\n    showAddNewMonthDialog() {\n        this.setState({\n            showDialog: \"addNewMonth\",\n        })\n    }\n\n    addNewMoth(d) {\n        if (isNaN(d)) {\n            message.error(\"请输入有效月份，如 2022-5\")\n        } else {\n            if (this.months.includes(TimeUtil.monthStr(d))) {\n                message.error(\"已有当前月份\")\n                this.hideDialog()\n            } else {\n                SummaryService.addMonth(d)\n                this.state.sideKey = TimeUtil.monthStr(d)\n                this.hideDialog()\n            }\n        }\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n        })\n    }\n\n    render() {\n        let navKey = this.state.navKey\n        let siderItems = []\n        let topRightBtns = []\n        let subPage = null\n        let openKeys = []\n        if (navKey === 'init' || this.state.dbReady !== true) {\n            if(navKey !== 'init') {\n                this.state.navKey = \"init\"\n                message.error('请先加载DB')\n            }\n            subPage = <InitPage onDbReady={() => {\n                this.state.dbReady = true\n                this.state.navKey = \"by_month\"\n                this.refreshPage()\n            }} />\n        } else {\n            if (navKey === 'by_month') {\n                let sideDatas = this.getByMonthSideDatas()\n                let lastMonth = null\n                siderItems = Object.keys(sideDatas).sort((a, b) => b > a ? 1 : -1).map((year, i) => {\n                    openKeys.push(year)\n                    return {\n                        key: year,\n                        label: year,\n                        children: sideDatas[year].sort((a, b) => b > a ? 1 : -1).map((month, j) => {\n                            if (lastMonth == null) { lastMonth = month }\n                            return {\n                                key: month,\n                                label: month,\n                            };\n                        }),\n                    };\n                })\n                if (DataUtil.isNull(this.state.sideKey)) {\n                    this.state.sideKey = lastMonth\n                }\n                topRightBtns.push(<Button onClick={() => this.showAddNewMonthDialog()}>新加月份</Button>)\n                subPage = <MonthPage month={this.state.sideKey} />\n            } else if (navKey === 'invest_detail') {\n                subPage = <InvestPage />\n            } else {\n                subPage = <TodoPage />\n            }\n        }\n        return (\n            <Layout>\n                <Header className=\"header\">\n                    <Menu theme=\"dark\" mode=\"horizontal\" items={this.navItems} selectedKeys={[navKey]}\n                        onSelect={(item) => {\n                            this.setState(() => this.state.navKey = item.key)\n                        }} />\n                </Header>\n                <Layout>\n                    <Sider width={200} className=\"site-layout-background\">\n                        <Menu\n                            className='Menu'\n                            mode=\"inline\"\n                            openKeys={openKeys}\n                            selectedKeys={[this.state.sideKey]}\n                            items={siderItems}\n                            onSelect={(item) => {\n                                this.setState(() => this.state.sideKey = item.key)\n                            }}\n                        />\n                    </Sider>\n                    <Layout className='Layout-inner'>\n                        <Row align='middle'>\n                            <Col flex=\"auto\">\n                                <Breadcrumb>\n                                    <Breadcrumb.Item>{this.state.navKey}</Breadcrumb.Item>\n                                    <Breadcrumb.Item>{this.state.sideKey}</Breadcrumb.Item>\n                                </Breadcrumb>\n                            </Col>\n                            <Col span={12} align='right'>\n                                {topRightBtns}\n                            </Col>\n                        </Row>\n                        {subPage}\n                    </Layout>\n                    <CusDialog title=\"新加月份\" visible={this.state.showDialog === \"addNewMonth\"}\n                        cfgs={[{\n                            name: \"date\",\n                            hint: \"月份\",\n                            picker: \"month\",\n                            defaultValue: new Date()\n                        }]}\n                        onOk={(state) => this.addNewMoth(state.date)}\n                        onCancel={() => this.hideDialog()} />\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nexport default MainPage","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TestPage from './pages/test_page';\nimport MainPage from './pages/main/main_page';\nimport DBHelper from './utils/db';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport { ConfigProvider } from 'antd';\n\nmoment.locale('zh-cn');\n\nReactDOM.render(<ConfigProvider locale={zhCN}>\n    <MainPage key={\"mainpage\"}/>\n</ConfigProvider>, document.getElementById('root'));\n\n// window.onerror = function(message, source, lineNumber, colno, error) {\n//     alert(\"Console 查看错误信息：\" + message);\n// };\n\nvar DB_INIT = false\n\nclass App {\n    /**\n     * @type {DBHelper}\n     */\n    static db = null\n\n    static async initDb(file) {\n        this.db = new DBHelper()\n        await this.db.init(file)\n        DB_INIT = true\n    }\n}\n\nexport { App, DB_INIT }"],"sourceRoot":""}
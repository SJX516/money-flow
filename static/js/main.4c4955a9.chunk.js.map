{"version":3,"sources":["domain/repo/income_expenditure_repo.js","domain/entity/income_expenditure.js","utils/utils.js","domain/entity/base_entity.js","domain/repo/user_repo.js","domain/service/user_service.js","app.js","utils/db.js","domain/entity/user_entity.js","domain/repo/base_repo.js","domain/service/income_expenditure_service.js","pages/detail/init_page.js","domain/repo/investment_repo.js","domain/entity/investment.js","domain/service/investment_service.js","domain/service/view_model_service.js","pages/detail/widget/input_widget.js","pages/detail/widget/cus_dialog.js","pages/detail/invest_page.js","domain/repo/summary_repo.js","domain/entity/summary.js","domain/service/summary_service.js","pages/ui_utils.js","pages/detail/month_page.js","pages/detail/todo_page.js","pages/detail/user_page.js","pages/detail/year_page.js","pages/main/test_page.js","pages/main/main_page.js","index.js"],"names":["IncomeExpenditureRepo","tablename","detail","gmtCreate","BaseRepo","getDateStr","gmtModified","happenTime","id","App","db","insert","this","type","code","desc","money","update","startTime","endTime","Error","convert","select","timeStr","content","result","undefined","values","data","IncomeExpenditureDetail","Date","IncomeExpenditureType","getByCode","push","repo","upsert","get","delete","BaseEntity","config","name","IncomeExpenditureService","getIncomeExpendGroupByCode","UserConfigType","IncomeType","status","UserConfigStatus","Normal","getIncomeExpendTypeByCode","LogUtil","msg","optionalParams","log","level","logLevel","console","levelNames","MoneyUtil","DataUtil","isEmpty","notNumber","noValue","temp","toFixed","isYuan","getFixedMoney","negMoney","str","substr","l","length","strArr","i","count","join","money1","money2","Math","abs","a","b","percent","getPercent","o","isNull","isNaN","TimeUtil","time1","month","getMonth","year","getFullYear","nextMonthStart","nextYearStart","monthStart","monthTime","currentMonthStart","currentMonthEnd","monthEnd","inTime","substring","getDay","UserRepo","entity","parent_code","UserConfig","UserService","V0IncomeExpenditureType","isIncome","ExpenditureType","getParentCode","refreshTypes","selectType","parentCode","Object","keys","key","concat","toList","Incomme","Expenditure","salary","self","num13","bonus","luckmoney","work","home","other","rent","utility","daily","taxi","phone","shopping","elc","life","happy","online","offline","food","canteen","out","family","traval","gift","study","health","car","etc","oil","girlfriend","eat","DB_INIT","_env","isProduction","_version","isTest","file","DBHelper","init","createDb","process","DbConfigTableName","KeyDbVersion","updateFuncs","helper","info","create","initDefaultTypes","actionCount","initing","initSqlJs","locateFile","sqlWasm","SQL","Promise","resolve","reject","fr","FileReader","readAsArrayBuffer","onload","fileResult","Uints","Uint8Array","Database","applyUpdate","createV0Db","selectAll","getDbConfig","currentVersion","parseInt","export","buffer","Buffer","from","blob","Blob","url","window","URL","createObjectURL","downloadFile","message","document","createElement","body","appendChild","href","download","onclick","setTimeout","revokeObjectURL","click","cols","ops","selectAndOrder","orders","sql","genWhereSql","valueDict","exec","debug","run","JSON","stringify","checkAutoSave","genSubSql","isWhere","op","Disabled","Account","prototype","format","fmt","getDate","getHours","getMinutes","getSeconds","floor","getMilliseconds","k","test","replace","RegExp","$1","deleteAll","date","allowNull","incomeTypes","expendTypes","codeToType","codeToParentCode","force","nameToType","getAll","forEach","_addFromUserConfig","maxCode","minCode","save","configType","monthDate","startDate","queryTimeBetwen","endDate","Content","Layout","Text","Typography","InitPage","props","state","testViewVisibility","files","initDb","onDbReady","error","className","orientation","getVersion","style","padding","backgroundColor","span","align","onClick","fileName","accept","onChange","e","refreshDB","target","margin","visibility","click1","click2","React","Component","InvestmentProductRepo","fixVote","InvestmentProduct","InvestmentType","InvestmentDetailRepo","productId","productName","productType","buySellId","recordType","InvestmentDetail","InvestmentRecordType","BuySell","deleteBySellId","CurrentPrice","Profit","AssetDebtCurrentPrice","AssetDebtProfit","Product","saving","debt","stock","stock_fund","etf","bond","InvestmentService","typeCode","queryAll","product","details","investMap","fund","asset","dealDetail","currentProductMap","isAsset","isDebt","isStock","currentPrice","profits","totalMoney","datas","buySells","totalSellMoney","totalCount","productTypeCode","_upsertInvest","sellGetMoney","currentProfit","totalInvestMoney","getProductTotalBuySellBefore","getTime","buySell","principal","sellProfit","addSellInvestOfProfit","IncomeExpenditureVMService","includeDisable","topCodes","addTopTypes","addChildrenTypes","index","indexOf","getIncomeTypes","getExpenditureTypes","_calIncomeExpendData","queryMonth","startMonthDate","yearEnd","incomeDetailByMonth","_calSumByMonth","expendDetailByMonth","sumByMonth","monthStr","map","sort","obj","_newEntityFromDetail","total","title","InvestmentVMService","getAllInvestDetailBefore","_getInvestSummary","safeDivision","getPaperProfit","filterTotalMoney","filterSellMoney","startTimeDate","endTimeDate","profitSummary","_getProfitSummary","_getTotalMoney","totalProfitMoney","totalFilterProfitMoney","products","filterDatas","ele","filterMoney","filterTotalCount","totalCurrentPrice","totalBuySellMoney","InputWidget","extra","code2Name","options","codes","groupNames","groupName","includes","item","stateCode","nameAppend","required","hint","placeholder","defaultValue","widgetWidth","flex","width","dropdownStyle","maxHeight","overflow","showSearch","treeData","treeDefaultExpandAll","value","setState","typeName","parentName","opts","getOptions","pon","moneyPon","ponKey","addonBefore","inMonth","picker","moment","m","dateString","toDate","event","defaultChecked","checked","isNum","warn","alert","rows","cfgs","itemToWidget","bodyStyle","justify","checkData","onSubmit","s","NaN","CusDialog","visible","footer","onCancel","onOk","InvestPage","investColumns","dataIndex","render","color","dayStr","getStr","sorter","compare","paperProfitPercent","getPaperProfitPercent","getPercentColorType","getPercentStr","apaperProfitPercent","bpaperProfitPercent","compareAbs","sellProfitPercent","getSellProfitPercent","asellProfitPercent","bsellProfitPercent","getDetailStr","subInvestColumns","profitMoney","profitPercent","_","record","size","deleteInvestDetail","productColumns","showEditProductDialog","deleteProduct","productFixVoteColumns","productTypeName","productFixVote","showDialog","currentProduct","editProduct","getMoney","hideDialog","refreshPage","updateTime","upsertProduct","queryProducts","getProductTypes","productAssetDatas","productStockDatas","productInvestDatas","productIdToProduct","queryAllInvestData","fundDatas","stockDatas","investFixVoteDatas","totalFixVote","paperProfit","fixVoteEntity","subInvestRowRender","profit","columns","dataSource","pagination","subInvestRowExpandable","expandable","expandedRowRender","rowExpandable","pageSize","scroll","x","sortDirections","addProduct","SummaryDataRepo","time","SummaryType","BY_MONTH_KEY","SummaryData","selectAllMonthKey","SummaryService","queryAllMonthKey","d","UIUtils","_getProductColor","text","textType","strong","Sider","MonthPage","incomeExpendColumns","subIncomeExpendColumns","deleteIncomeExpendDetail","assetDebtColumns","getProductTag","subAssetDebtColumns","getQoqPaperProfit","getQoqPaperProfitPercent","lastMonthPaperProfit","_getLastMonthProductDetail","safeGetNumber","lastMonthAllInvestData","inputValues","_praseTypeCode","treeType","productCode","typeParentCode","addBuyInvest","addSellInvest","addAssetDebtProfit","months","queryMonths","element","dialogKey","dialogExtra","addMonth","sideKey","siderItems","openKeys","sideDatas","getByMonthSideDatas","lastMonth","label","children","j","currentMonthDate","getTypeTrees","incomeTreeDatas","_getTypeTreeSelectDatas","expendTreeDatas","investProductCode2Name","assetProductCode2Name","debtProductCode2Name","incomeExpendData","monthData","queryMonthData","totalIncome","totalExpend","allInvestData","passiveIncomeSummary","_getPassiveIncomeSummary","passiveExpendSummary","_getPassiveExpendSummary","lastMonthEnd","currentMonthTotalMoney","lastMonthTotalMoney","currentMonthAddMoney","newEntity","totalMoneyEntitys","fundData","_mapToList","stockData","assetDebtDatas","contentView","direction","insertData","child","createShowTextRow","createShowMoneyRowIfBiggerThan","mode","selectedKeys","items","onSelect","Item","addNewMoth","_getTypeTreeCode","modifyIncomeOrExpend","treeCode","split","typesTree","group","childs","valueRange","pMoney","totalAssetMoneys","totalFundMoneys","totalStockMoneys","totalDebtMoneys","productMap","filter","arr","profitEntitys","yearInvestData","assetData","_getProductsProfitEntitys","debtData","TodoPage","fontSize","UserPage","disabled","isEnable","showModifyTypeDialog","enable","switch","newName","newParentCode","updateType","addType","subIncomeExpendRowRender","subIncomeExpendRowExpandable","topIncomeCodeToName","topExpendCodeToName","dialogTitle","dialogVisible","modifyType","YearPage","startMonth","dataMap","getGroup","groupCode","groupType","dataArr","getByYearSideDatas","yearStartMonth","yearStartMonthDate","yearData","queryYearData","it","incomeGroupDataArr","getAggregateGroupDataArr","income","expendGroupDataArr","expend","barData","selectedGroupCode","getAggregateTimeDataArr","_getPieConfig","_getBarConfig","modifyMonth","xField","yField","isGroup","isStack","seriesField","groupField","position","fill","textAlign","formatter","valuePercent","tooltip","datum","renderStatistic","containerWidth","measureTextWidth","textWidth","textHeight","height","R","scale","min","sqrt","pow","textStyleStr","appendPadding","angleField","colorField","radius","innerRadius","offset","autoRotate","statistic","offsetY","customHtml","container","view","getBoundingClientRect","reduce","r","interactions","onReady","plot","on","TestPage","testResults","resultColumns","success","actual","expect","data11","_expect","data10","yearData01","monthData1","monthData2","_testIncomeExpend","_testInvestData","testAll","Header","MainPage","navItems","navKey","subPage","theme","locale","ReactDOM","zhCN","getElementById"],"mappings":"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","file":"static/js/main.4c4955a9.chunk.js","sourcesContent":["import { App } from '../../app';\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../entity/income_expenditure';\nimport { BaseRepo } from './base_repo';\n\nclass IncomeExpenditureRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"income_expenditure_detail\"\n    }\n\n    /**\n      * @param {IncomeExpenditureDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                 detail.type.code, detail.desc, detail.money, happenTime])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                detail.type.code, detail.desc, detail.money, happenTime])\n        }\n    }\n\n    select(startTime, endTime) {\n        if(endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        return this.convert(App.db?.select(this.tablename, [\"happen_time\", \"happen_time\"],\n         [startTime.timeStr(), endTime.timeStr()], ['>', '<']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new IncomeExpenditureDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = IncomeExpenditureType.getByCode(data[3])\n            detail.desc = data[4]\n            detail.money = data[5]\n            detail.happenTime = new Date(data[6])\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport { IncomeExpenditureRepo };\n","import { IncomeExpenditureRepo } from '../repo/income_expenditure_repo';\nimport { IncomeExpenditureService } from '../service/income_expenditure_service';\nimport { BaseEntity } from './base_entity';\nimport { UserConfig, UserConfigStatus, UserConfigType } from './user_entity';\n\n//'收入/支出' 表\nclass IncomeExpenditureDetail extends BaseEntity {\n    /**\n     * @type {IncomeExpenditureType}\n     */\n    type = null;\n    //额外描述，备注\n    desc = null;\n    //分为单位，流入为正，流出为负\n    money = null;\n    //实际发生时间，不确定可以填月初\n    happenTime = null;\n\n    static repo = new IncomeExpenditureRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(startTime, endTime) {\n        return this.repo.select(startTime, endTime)\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(this.money*this.type.code < 0) {\n            this.money = -1 * this.money\n        }\n        IncomeExpenditureDetail.repo.upsert(this)\n    }\n}\n\nclass IncomeExpenditureType {\n\n    /**\n     * @param {UserConfig} config \n     */\n    constructor(config) {\n        this.config = config;\n        this.code = config.code;\n        this.name = config.name;\n    }\n\n    /**\n     * @param {number} code \n     * @returns {IncomeExpenditureType}\n     */\n    static getByCode(code) {\n        return IncomeExpenditureService.getIncomeExpendTypeByCode(code);\n    }\n\n    getGroup() {\n        return IncomeExpenditureService.getIncomeExpendGroupByCode(this.code);\n    }\n\n    isIncome() {\n        return this.config.type == UserConfigType.IncomeType;\n    }\n\n    isEnable() {\n        return this.config.status == UserConfigStatus.Normal;\n    }\n}\n\nexport { IncomeExpenditureDetail, IncomeExpenditureType };\n\n","class LogUtil {\n    static logLevel = 1;\n    static levelNames = [\"debug\", \"info\", \"warn\", \"error\"];\n\n    static debug(msg, ...optionalParams) {\n        this.log(0, msg, optionalParams)\n    }\n\n    static info(msg, ...optionalParams) {\n        this.log(1, msg, optionalParams)\n    }\n\n    static warn(msg, ...optionalParams) {\n        this.log(2, msg, optionalParams)\n    }\n\n    static error(msg, ...optionalParams) {\n        this.log(3, msg, optionalParams)\n    }\n\n    static log(level, msg, ...optionalParams) {\n        if(level >= this.logLevel) {\n            console.log(`[${this.levelNames[level]}] ${msg}`, optionalParams)\n        }\n    }\n}\n\nclass MoneyUtil {\n    static noValue(money) {\n        return DataUtil.isEmpty(money) || DataUtil.notNumber(money) || money == 0\n    }\n\n    static getDetailStr(money) {\n        if(this.noValue(money)) {\n            return \"-\"\n        }\n        let temp = money / 100\n        if(temp % 1 === 0) {\n            return `￥${temp}`\n        } else {\n            return `￥${temp.toFixed(2)}`\n        }\n    }\n\n    static getStr(money, isYuan=false) {\n        if(this.noValue(money)) {\n            return \"-\"\n        }\n        let temp = money / 100\n        if(isYuan) {\n            temp = money\n        }\n        return `￥${this.getFixedMoney(temp)}`\n    }\n\n    static getMoneyColorType(money) {\n        if(this.noValue(money)) {\n            return \"\"\n        }\n        if(money > 0) {\n            return \"danger\"\n        } else if(money < 0) {\n            return \"success\"\n        } else {\n            return \"\"\n        }\n    }\n\n    // 1234567 -> 1,234,567\n    static getFixedMoney(money) {\n        var negMoney = money < 0\n        var str = money.toFixed()\n        if(negMoney) {\n            str = str.substr(1)\n        }\n        var l = str.length\n        var strArr = []\n        for(var i = 0; i < l; ) {\n            var count = i == 0 ? l % 3 : 3\n            if(count == 0) {\n                count = 3\n            }\n            strArr.push(str.substr(i, count))\n            i += count\n        }\n        if(negMoney) {\n            return \"-\" + strArr.join(\",\")\n        } else {\n            return strArr.join(\",\")\n        }\n    }\n\n    static compare(money1, money2) {\n        if(DataUtil.notNumber(money1)) {\n            return -1\n        } else if (DataUtil.notNumber(money2)) {\n            return 1\n        }\n        return money1 - money2\n    }\n\n    static compareAbs(money1, money2) {\n        if(DataUtil.notNumber(money1)) {\n            return -1\n        } else if (DataUtil.notNumber(money2)) {\n            return 1\n        }\n        return Math.abs(money1) - Math.abs(money2)\n    }\n\n    // a / b\n    static safeDivision(a, b) {\n        if(DataUtil.notNumber(a) || DataUtil.notNumber(b) || b == 0) {\n            return null\n        } else {\n            return a / b\n        }\n    }\n\n    static getPercentStr(percent) {\n        if(DataUtil.notNumber(percent) || Math.abs(percent) <= 0.0001) {\n            return \"-\"\n        } else {\n            return DataUtil.getPercent(percent)\n        }\n    }\n\n    static getPercentColorType(percent) {\n        if(DataUtil.notNumber(percent) || Math.abs(percent) <= 0.0001) {\n            return \"\"\n        }\n        if(percent > 0) {\n            return \"danger\"\n        } else if(percent < 0) {\n            return \"success\"\n        } else {\n            return \"\"\n        }\n    }\n}\n\nclass DataUtil {\n    static isEmpty(str) {\n        return str === undefined || str === null || str === \"\"\n    }\n\n    static isNull(o) {\n        return o === undefined || o === null\n    }\n\n    static notNumber(o) {\n        return this.isNull(o) || isNaN(o)\n    }\n\n    static safeGetNumber(o) {\n        if(this.notNumber(o)) {\n            return 0\n        } else {\n            return o\n        }\n    }\n\n    static getPercent(a) {\n        let temp = a * 100\n        if(temp % 1 === 0) {\n            return `${temp}%`\n        } else {\n            return `${temp.toFixed(2)}%`\n        }\n    }\n\n    static compare(a, b) {\n        if(DataUtil.notNumber(a)) {\n            return -1\n        } else if (DataUtil.notNumber(b)) {\n            return 1\n        }\n        return a - b\n    }\n\n    static compareAbs(a, b) {\n        if(DataUtil.notNumber(a)) {\n            return -1\n        } else if (DataUtil.notNumber(b)) {\n            return 1\n        }\n        return Math.abs(a) - Math.abs(b)\n    }\n}\n\nclass TimeUtil {\n    static nextMonthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        if (month === 12) {\n            year += 1;\n            month = '01';\n        } else {\n            month += 1;\n            month = (month < 10) ? '0' + month : month;\n        }\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static monthEnd(time1) {\n        return new Date(this.nextMonthStart(time1) - 1)\n    }\n\n    static monthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static nextYearStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear() + 1;\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static yearEnd(time1) {\n        return new Date(this.nextYearStart(time1) - 1)\n    }\n\n    static lastMonthEnd(time1) {\n        return new Date(this.monthStart(time1) - 1)\n    }\n\n    static inMonth(time1, monthTime) {\n        let currentMonthStart = TimeUtil.monthStart(monthTime)\n        let currentMonthEnd = TimeUtil.monthEnd(monthTime)\n        return this.inTime(time1, currentMonthStart, currentMonthEnd)\n    }\n\n    static inTime(time1, startTime, endTime) {\n        if (time1 > endTime || time1 < startTime) {\n            return false\n        } else {\n            return true\n        }\n    }\n\n    static dayStr(time1) {\n        if(DataUtil.isNull(time1)) {\n            return \"\"\n        }\n        return time1.timeStr().substring(0, 10)\n    }\n\n    static monthStr(time1) {\n        if(DataUtil.isNull(time1)) {\n            return \"\"\n        }\n        return time1.timeStr().substring(0, 7)\n    }\n\n    static weekDayStr(time1) {\n        let i = time1.getDay()\n        switch (i) {\n            case 0:\n                return \"周日\"\n            case 1:\n                return \"周一\"\n            case 2:\n                return \"周二\"\n            case 3:\n                return \"周三\"\n            case 4:\n                return \"周四\"\n            case 5:\n                return \"周五\"\n            case 6:\n                return \"周六\"\n        }\n    }\n}\n\nexport { LogUtil, DataUtil, TimeUtil, MoneyUtil }","class BaseEntity {\n    id = null;\n    gmtCreate = null;\n    gmtModified = null;\n}\n\nexport { BaseEntity };","import { App } from '../../app';\nimport { UserConfig, UserConfigStatus, UserConfigType } from '../entity/user_entity';\nimport { BaseRepo } from './base_repo';\n\nclass UserRepo extends BaseRepo {\n    constructor() {\n        super()\n        this.tablename = \"user_config\"\n    }\n\n    /**\n      * @param {UserConfig} entity \n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true);\n        let gmtModified = BaseRepo.getDateStr(new Date());\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'type', 'status', 'code', 'name', 'parent_code'], [gmtCreate, gmtModified,\n                entity.type.code, entity.status.code, entity.code, entity.name, entity.parent_code]);\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'type', 'status', 'code', 'name', 'parent_code'], [gmtCreate, gmtModified,\n                entity.type.code, entity.status.code, entity.code, entity.name, entity.parent_code]);\n        }\n    }\n\n    /**\n     * @param {UserConfigType} type \n     */\n    selectType(type) {\n        return this.convert(App.db?.select(this.tablename, ['type'], [type.code], ['=']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new UserConfig()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = UserConfigType.getByCode(data[3])\n            detail.status = UserConfigStatus.getByCode(data[4])\n            detail.code = data[5]\n            detail.name = data[6]\n            detail.parent_code = data[7]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport { UserRepo };\n","import { UserConfig, UserConfigStatus, UserConfigType } from \"../entity/user_entity\";\nimport { UserRepo } from \"../repo/user_repo\";\nimport { IncomeExpenditureService } from \"./income_expenditure_service\";\n\nclass UserService {\n\n    static repo = new UserRepo()\n\n    static initDefaultTypes() {\n        for(const type of V0IncomeExpenditureType.values()) {\n            let config = new UserConfig();\n            config.type = type.isIncome() ? UserConfigType.IncomeType : UserConfigType.ExpenditureType;\n            config.status = UserConfigStatus.Normal;\n            config.code = type.code;\n            config.name = type.name;\n            config.parent_code = type.getParentCode();\n            this.repo.upsert(config);\n        }\n    }\n\n    /**\n     * @param {UserConfig} config \n     */\n    static save(config) {\n        this.repo.upsert(config);\n        if(config.type == UserConfigType.IncomeType || config.type == UserConfigType.ExpenditureType) {\n            IncomeExpenditureService.refreshTypes(true);\n        }\n    }\n\n    /**\n     * @param {UserConfigType} type\n     * @returns {Array[UserConfig]} \n     */\n    static getAll(type) {\n        return this.repo.selectType(type);\n    }\n}\n\nclass V0IncomeExpenditureType {\n    static Incomme = {\n        salary: {\n            self: new V0IncomeExpenditureType(10000, \"薪水\"),\n            num13: new V0IncomeExpenditureType(10001, \"薪水-十三薪\"),\n            bonus: new V0IncomeExpenditureType(10002, \"薪水-年终奖\"),\n        },\n        luckmoney: {\n            self: new V0IncomeExpenditureType(20000, \"红包\"),\n            work: new V0IncomeExpenditureType(20001, \"红包-工作\"),\n            home: new V0IncomeExpenditureType(20002, \"红包-家人\"),\n        },\n        other: {\n            self: new V0IncomeExpenditureType(30000, \"其他\"),\n        }\n    };\n\n    static Expenditure = {\n        home: {\n            self: new V0IncomeExpenditureType(-10000, \"住房\"),\n            rent: new V0IncomeExpenditureType(-10001, \"住房-房租\"),\n            utility: new V0IncomeExpenditureType(-10002, \"住房-水电\"),\n        },\n        daily: {\n            self: new V0IncomeExpenditureType(-20000, \"日常\"),\n            taxi: new V0IncomeExpenditureType(-20001, \"日常-交通\"),\n            phone: new V0IncomeExpenditureType(-20002, \"日常-话费\"),\n        },\n        shopping: {\n            self: new V0IncomeExpenditureType(-30000, \"购物\"),\n            elc: new V0IncomeExpenditureType(-30001, \"购物-电子\"),\n            life: new V0IncomeExpenditureType(-30002, \"购物-生活\"),\n        },\n        happy: {\n            self: new V0IncomeExpenditureType(-40000, \"娱乐\"),\n            online: new V0IncomeExpenditureType(-40001, \"娱乐-线上\"),\n            offline: new V0IncomeExpenditureType(-40002, \"娱乐-线下\"),\n        },\n        food: {\n            self: new V0IncomeExpenditureType(-50000, \"餐饮\"),\n            canteen: new V0IncomeExpenditureType(-50001, \"餐饮-食堂\"),\n            out: new V0IncomeExpenditureType(-50002, \"餐饮-外出\"),\n        },\n        family: {\n            self: new V0IncomeExpenditureType(-60000, \"家人\"),\n            traval: new V0IncomeExpenditureType(-60001, \"家人-交通\"),\n            gift: new V0IncomeExpenditureType(-60002, \"家人-礼物\"),\n        },\n        study: {\n            self: new V0IncomeExpenditureType(-70000, \"学习\"),\n            online: new V0IncomeExpenditureType(-70001, \"学习-线上\"),\n            offline: new V0IncomeExpenditureType(-70002, \"学习-线下\"),\n        },\n        health: {\n            self: new V0IncomeExpenditureType(-80000, \"健康\"),\n        },\n        car: {\n            self: new V0IncomeExpenditureType(-90000, \"车\"),\n            etc: new V0IncomeExpenditureType(-90001, \"车-停车/ETC\"),\n            oil: new V0IncomeExpenditureType(-90002, \"车-加油\"),\n        },\n        girlfriend: {\n            self: new V0IncomeExpenditureType(-100000, \"女朋友\"),\n            traval: new V0IncomeExpenditureType(-100001, \"女朋友-旅游\"),\n            eat: new V0IncomeExpenditureType(-100002, \"女朋友-吃喝\"),\n            gift: new V0IncomeExpenditureType(-100003, \"女朋友-礼物\"),\n        },\n        other: {\n            self: new V0IncomeExpenditureType(-110000, \"其他\"),\n        },\n    }\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof V0IncomeExpenditureType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    /**\n     * @returns {Array[V0IncomeExpenditureType]}\n     */\n    static values() {\n        return this.toList(this.Incomme).concat(this.toList(this.Expenditure))\n    }\n\n    getParentCode() {\n        let parentCode = this.code - this.code % 100;\n        if(parentCode === this.code) {\n            return null;\n        } else {\n            return parentCode;\n        }\n    }\n\n    isIncome() {\n        return this.code > 0\n    }\n}\n\nexport { UserService };\n","\nimport DBHelper from './utils/db';\n\nvar DB_INIT = false\n\nclass App {\n    /**\n     * @type {DBHelper}\n     */\n    static db = null;\n\n    static _env = process.env.NODE_ENV;\n\n    static _version = \"1.2.20240206\";\n\n    static isProduction() {\n        return this._env === 'production';\n    }\n\n    static isTest() {\n        return this._env === 'test';\n    }\n\n    static getVersion() {\n        if(this.isProduction()) {\n            return this._version;\n        } else if (this.isTest()) {\n            return this._version + \"-test\";\n        } else {\n            return this._version + \"-dev\";\n        }\n    }\n\n    static async initDb(file) {\n        this.db = new DBHelper()\n        await this.db.init(file)\n        DB_INIT = true\n    }\n\n    static async createDb() {\n        this.db = new DBHelper()\n        await this.db.createDb()\n        DB_INIT = true\n    }\n}\n\nexport { App, DB_INIT };\n","import initSqlJs from \"sql.js\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\nimport { message } from \"antd\";\nimport { UserService } from \"../domain/service/user_service\";\nimport { DataUtil, LogUtil } from \"./utils\";\n\nconst LatestDbVersion = 1;\nconst DbConfigTableName = \"db_config\";\nconst KeyDbVersion = \"db_version\";\n\nconst updateFuncs = {\n    0: v0Update\n}\n\n/**\n * @param {DBHelper} helper \n */\nfunction v0Update(helper) {\n    LogUtil.info(\"数据库升级: v0 => v1\");\n    helper.create(\"CREATE TABLE `db_config` (\\\n        `id` INTEGER NOT NULL UNIQUE,\\\n        `type` varchar(64) NOT NULL ,\\\n        `value` varchar(64) NOT NULL ,\\\n        PRIMARY KEY (`id` AUTOINCREMENT)\\\n       )\");\n    helper.create(\"CREATE TABLE `user_config` (\\\n        `id` INTEGER NOT NULL UNIQUE,\\\n        `gmt_create` datetime NOT NULL  ,\\\n        `gmt_modified` datetime NOT NULL  ,\\\n        `type` INTEGER NOT NULL ,\\\n        `status` INTEGER NOT NULL ,\\\n        `code` INTEGER NOT NULL ,\\\n        `name` varchar(64) NOT NULL ,\\\n        `parent_code` INTEGER,\\\n        PRIMARY KEY (`id` AUTOINCREMENT)\\\n       )\");\n    helper.insert(DbConfigTableName, ['type', 'value'], [KeyDbVersion, \"1\"]);\n    UserService.initDefaultTypes();\n}\n\nclass DBHelper {\n    constructor() {\n        this.db = null;\n        this.actionCount = 0\n        this.initing = false;\n    }\n\n    async init(file) {\n        let SQL = await initSqlJs({ locateFile: () => sqlWasm });\n        let fileResult = await new Promise((resolve, reject) => {\n            let fr = new FileReader();\n            fr.readAsArrayBuffer(file);\n            fr.onload = () => resolve(fr.result)\n        })\n        const Uints = new Uint8Array(fileResult);\n        this.db = new SQL.Database(Uints);\n        this.applyUpdate();\n    }\n\n    async createDb() {\n        await this.createV0Db();\n        this.applyUpdate();\n    }\n\n    async createV0Db() {\n        let SQL = await initSqlJs({ locateFile: () => sqlWasm });\n        this.db = new SQL.Database();\n        this.create(\"CREATE TABLE `data_summary` (\\\n            `id` INTEGER NOT NULL  ,\\\n            `gmt_create` datetime NOT NULL  ,\\\n            `gmt_modified` datetime NOT NULL  ,\\\n            `type` varchar(64) NOT NULL ,\\\n            `time` datetime NOT NULL  ,\\\n            `money` INTEGER,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n           )\");\n        this.create(\"CREATE TABLE `income_expenditure_detail` (\\\n            `id` INTEGER NOT NULL ,\\\n            `gmt_create` datetime NOT NULL,\\\n            `gmt_modified` datetime NOT NULL ,\\\n            `type` int NOT NULL,\\\n            `desc` varchar(64) NULL,\\\n            `money` bigint unsigned NOT NULL,\\\n            `happen_time` datetime NOT NULL,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n        )\");\n        this.create(\"CREATE TABLE `investment_detail` (\\\n            `id` INTEGER NOT NULL  ,\\\n            `gmt_create` datetime NOT NULL  ,\\\n            `gmt_modified` datetime NOT NULL  ,\\\n            `product_id` INTEGER NOT NULL  ,\\\n            `product_name` varchar(64) NOT NULL  ,\\\n            `product_type` INTEGER NOT NULL  ,\\\n            `money` INTEGER NOT NULL  ,\\\n            `happen_time` datetime NOT NULL  ,\\\n            `buy_sell_id` INTEGER,\\\n            `record_type` int NOT NULL , `count` INT,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n           )\");\n        this.create(\"CREATE TABLE `investment_product` (\\\n            `id` INTEGER NOT NULL  ,\\\n            `gmt_create` datetime NOT NULL  ,\\\n            `gmt_modified` datetime NOT NULL  ,\\\n            `name` varchar(64) NOT NULL  ,\\\n            `type` int NOT NULL  ,\\\n            `desc` varchar(64) NULL  , fix_vote INT,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n           )\");\n    }\n\n    getDbConfig() {\n        try {\n            return this.convert(this.selectAll(DbConfigTableName));\n        } catch {\n            return {};\n        }\n    }\n\n    applyUpdate() {\n        this.initing = true;\n        let config  = this.getDbConfig();\n        let currentVersion = 0\n        if(!DataUtil.isNull(config[KeyDbVersion])) {\n            currentVersion = parseInt(config[KeyDbVersion])\n        }\n        while(currentVersion < LatestDbVersion) {\n            updateFuncs[currentVersion](this);\n            currentVersion += 1;            \n        }\n        this.initing = false;\n    }\n\n    convert(content) {\n        let result = {};\n        if(content === undefined || content[0] === undefined) {\n            return result;\n        }\n        for (const data of content[0].values) {\n            result[data[1]] = data[2];\n        }\n        return result;\n    }\n\n    export() {\n        const data = this.db.export();\n        const buffer = Buffer.from(data);\n        var blob = new Blob([buffer]);\n        var url = window.URL.createObjectURL(blob);\n        this.downloadFile(url)\n    }\n\n    checkAutoSave() {\n        if(!this.initing && ++this.actionCount > 20) {\n            LogUtil.info(\"自动触发保存\");\n            message.info(\"自动触发保存\");\n            this.actionCount = 0;\n            this.export();\n        }\n    }\n\n    downloadFile(url) {\n        console.log(\"下载文件：\" + url);\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.href = url;\n        a.download = \"data.db\";\n        a.onclick = () => {\n            setTimeout(() => { window.URL.revokeObjectURL(a.href) }, 1500);\n        };\n        a.click();\n    }\n\n    selectAll(tablename) {\n        return this.select(tablename, [], [], [])\n    }\n\n    select(tablename, cols, values, ops) {\n        return this.selectAndOrder(tablename, cols, values, ops, [])\n    }\n\n    selectAndOrder(tablename, cols, values, ops, orders) {\n        let sql = `SELECT * FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        if (orders.length > 0) {\n            sql += ` order by ${orders.join(',')}`\n        }\n        // console.log(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        return content\n    }\n\n    create(sql) {\n        LogUtil.debug(sql)\n        this.db.run(sql)\n    }\n\n    insert(tablename, cols, values) {\n        let sql = `INSERT INTO ${tablename} (${cols.join(',')}) VALUES (`\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            sql += \"$\" + cols[i] + i\n            if (i < cols.length - 1) {\n                sql += \", \"\n            }\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        sql += \") returning id\"\n        LogUtil.debug(sql + \" \" + JSON.stringify(valueDict))\n        var content = this.db.exec(sql, valueDict);\n        this.checkAutoSave()\n        return content[0].values[0][0]\n    }\n\n    update(tablename, id, cols, values) {\n        let sql = `UPDATE ${tablename} SET`\n        let data = this.genSubSql(cols, values, [], false)\n        let valueDict = data[1]\n        sql += data[0]\n        sql += \" where id=$id\"\n        valueDict['$id'] = id\n        LogUtil.debug(sql + \" \" + JSON.stringify(valueDict))\n        this.checkAutoSave()\n        this.db.run(sql, valueDict);\n    }\n\n    deleteAll(tablename) {\n        this.delete(tablename, [], [], [])\n    }\n\n    delete(tablename, cols, values, ops) {\n        let sql = `DELETE FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        LogUtil.debug(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        this.checkAutoSave()\n    }\n\n    genWhereSql(cols, values, ops) {\n        return this.genSubSql(cols, values, ops, true)\n    }\n\n    genSubSql(cols, values, ops, isWhere) {\n        let sql = \"\"\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            if (i !== 0) {\n                sql += (isWhere ? \" and \" : \" , \")\n            } else {\n                sql += (isWhere ? \" where \" : \" \")\n            }\n            let op = ops[i]\n            if (op === undefined) {\n                op = \"=\"\n            }\n            sql += \" \" + cols[i] + \" \" + op + \" $\" + cols[i] + i\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        return [sql, valueDict]\n    }\n}\n\nexport default DBHelper","import { BaseEntity } from \"./base_entity\";\n\nclass UserConfig extends BaseEntity {\n    /**\n     * @type {UserConfigType}\n     */\n    type = null;\n    /**\n     * @type {UserConfigStatus}\n     */\n    status = null;\n    code = null;\n    name = null;\n    // 用于表示层级关系\n    parent_code = null;\n}\n\nclass UserConfigStatus {\n    static Normal = new UserConfigStatus(1, \"normal\")\n    static Disabled = new UserConfigStatus(99, \"disabled\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code === code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.Normal, this.Disabled]\n    }\n}\n\nclass UserConfigType {\n    static Account = new UserConfigType(1, \"Account\")\n    static IncomeType = new UserConfigType(2, \"IncomeType\")\n    static ExpenditureType = new UserConfigType(3, \"ExpenditureType\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code === code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.Account, this.IncomeType, this.ExpenditureType]\n    }\n}\n\nexport { UserConfig, UserConfigStatus, UserConfigType };\n","import { App, DB_INIT } from '../../app';\n\nclass BaseRepo {\n\n    constructor() {\n        this.tablename = null\n        Date.prototype.format = function(fmt) { \n            var o = { \n               \"M+\" : this.getMonth()+1,                 //月份 \n               \"d+\" : this.getDate(),                    //日 \n               \"h+\" : this.getHours(),                   //小时 \n               \"m+\" : this.getMinutes(),                 //分 \n               \"s+\" : this.getSeconds(),                 //秒 \n               \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n               \"S\"  : this.getMilliseconds()             //毫秒 \n           }; \n           if(/(y+)/.test(fmt)) {\n                   fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n           }\n            for(var k in o) {\n               if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length===1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n                }\n            }\n           return fmt; \n        }\n        Date.prototype.timeStr = function() {\n            return this.format(\"yyyy-MM-dd hh:mm:ss\")\n        }\n    }\n\n    static getDateStr(date, allowNull=false) {\n        if(date == null) {\n            if(allowNull) {\n                return new Date().timeStr()\n            } else {\n                throw new Error(\"日期不能为 null\")\n            }\n        } else if(date instanceof Date) {\n            return date.timeStr()\n        } else {\n            throw new Error(\"日期格式不为 Date\")\n        }\n    }\n\n    get(id) {\n        if(!DB_INIT) {\n            return null\n        }\n        if (id != null) {\n            return this.convert(App.db.select(this.tablename, [\"id\"], [id], []))\n        } else {\n            throw new Error(\"id 不能为空\")\n        }\n    }\n\n    selectAll() {\n        if(!DB_INIT) {\n            return []\n        }\n        return this.convert(App.db.selectAll(this.tablename))\n    }\n\n    delete(id) {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.delete(this.tablename, [\"id\"], [id], [])\n    }\n\n    deleteAll() {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.deleteAll(this.tablename)\n    }\n\n    convert(content) {}\n}\n\nexport { BaseRepo };\n","import { TimeUtil } from \"../../utils/utils\";\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from \"../entity/income_expenditure\";\nimport { UserConfig, UserConfigStatus, UserConfigType } from \"../entity/user_entity\";\nimport { UserService } from \"./user_service\";\n\nclass IncomeExpenditureService {\n\n    /**\n     * @type {Array[IncomeExpenditureType]}\n     */\n    static incomeTypes = [];\n\n    /**\n     * @type {Array[IncomeExpenditureType]}\n     */\n    static expendTypes = [];\n\n    static codeToType = {};\n    static nameToType = {};\n    static codeToParentCode = {};\n\n    static maxCode = 0;\n    static minCode = 0;\n\n    static getIncomeTypes() {\n        this.refreshTypes(false);\n        return this.incomeTypes\n    }\n\n    static getExpenditureTypes() {\n        this.refreshTypes(false);\n        return this.expendTypes;\n    }\n\n    /**\n     * @returns {IncomeExpenditureType}\n     */\n    static getIncomeExpendTypeByCode(code) {\n        this.refreshTypes(false);\n        return this.codeToType[code];\n    }\n\n    /**\n     * @returns {IncomeExpenditureType}\n     */\n    static getIncomeExpendGroupByCode(code) {\n        this.refreshTypes(false);\n        let parentCode = this.codeToParentCode[code];\n        while(parentCode != null) {\n            code = parentCode;\n            parentCode = this.codeToParentCode[code];\n        }\n        return this.getIncomeExpendTypeByCode(code);\n    }\n\n    static refreshTypes(force) {\n        if(this.incomeTypes.length == 0 || this.expendTypes.length == 0 || force) {\n            this.incomeTypes = []\n            this.expendTypes = []\n            this.codeToType = {}\n            this.nameToType = {}\n            this.codeToParentCode = {}\n            UserService.getAll(UserConfigType.IncomeType).forEach(config => this._addFromUserConfig(config))\n            UserService.getAll(UserConfigType.ExpenditureType).forEach(config => this._addFromUserConfig(config))\n        }\n    }\n\n    /**\n     * @param {UserConfig} config \n     */\n    static _addFromUserConfig(config) {\n        let type = new IncomeExpenditureType(config);\n        this.codeToType[config.code] = type\n        this.codeToParentCode[config.code] = config.parent_code;\n        if(config.type === UserConfigType.IncomeType) {\n            this.incomeTypes.push(type);\n        } else {\n            this.expendTypes.push(type);\n        }\n        if(config.code > this.maxCode) {\n            this.maxCode = config.code\n        }\n        if(config.code < this.minCode) {\n            this.minCode = config.code\n        }\n    }\n\n    /**\n     * @param {IncomeExpenditureType} type \n     * @param {string} name\n     * @param {UserConfigStatus} status\n     */\n    static updateType(type, name, parent_code, status) {\n        let config = type.config;\n        config.name = name;\n        config.parent_code = parent_code;\n        config.status = status;\n        UserService.save(config);\n    }\n\n    /**\n     * @param {UserConfigType} configType \n     */\n    static addType(configType, name, parent_code, status) {\n        let code = null;\n        if(configType === UserConfigType.IncomeType) {\n            code = this.maxCode + 10\n        } else {\n            code = this.minCode - 10\n        }\n        let config = new UserConfig();\n        config.type = configType;\n        config.code = code;\n        config.name = name;\n        config.parent_code = parent_code;\n        config.status = status;\n        UserService.save(config);\n    }\n\n    /**\n     * @param {IncomeExpenditureType} type\n     * @param {Date} happenTime \n     */\n    static upsert(money, type, happenTime, desc=null, id=null) {\n        var detail = new IncomeExpenditureDetail()\n        detail.id = id\n        detail.type = type\n        detail.desc = desc\n        detail.money = money\n        detail.happenTime = happenTime\n        detail.save()\n    }\n\n    /**\n     * @returns {Array[IncomeExpenditureDetail]}\n     */\n    static queryMonth(monthDate) {\n        let startDate = TimeUtil.monthStart(monthDate)\n        return IncomeExpenditureDetail.queryTimeBetwen(startDate, TimeUtil.monthEnd(startDate))\n    }\n\n    static queryTimeBetwen(startDate, endDate) {\n        return IncomeExpenditureDetail.queryTimeBetwen(startDate, endDate)\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.delete(id)\n    }\n}\n\nexport { IncomeExpenditureService };\n","import { Button, Col, Divider, Layout, Row, Typography, message } from \"antd\";\nimport React from 'react';\nimport { App, DB_INIT } from '../../app.js';\n\nconst { Content } = Layout;\nconst { Text } = Typography;\n\nclass InitPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n        this.testViewVisibility = 'hidden'\n        if(!App.isProduction()) {\n            this.testViewVisibility = 'visible'\n        }\n    }\n\n    async refreshDB(files) {\n        await App.initDb(files[0])\n        this.props.onDbReady()\n    }\n\n    async create() {\n        await App.createDb()\n        this.props.onDbReady()\n    }\n\n    export() {\n        if (!DB_INIT) {\n            message.error(\"请先加载DB文件\")\n            return\n        }\n        App.db?.export()\n    }\n\n    click1() {\n    }\n\n    click2() {\n    }\n\n    render() {\n        return (\n            <Content className='Content'>\n                <Divider orientation=\"center\">版本：{App.getVersion()}</Divider>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\" }}>\n                    <Col span={8} align='center'>\n                        <Divider orientation=\"center\">新建DB文件</Divider>\n                        <Button onClick={() => this.create()}>新建</Button>\n                    </Col>\n                    <Col span={8} align='center'>\n                        <Divider orientation=\"center\">加载DB文件</Divider>\n                        <Text>{this.state.fileName}</Text>\n                        <input type='file' id='dbfile' accept=\".db\" onChange={(e) => this.refreshDB(e.target.files)} />\n                    </Col>\n                    <Col span={8} align='center'>\n                        <Divider orientation=\"center\">导出DB文件</Divider>\n                        <Button onClick={() => this.export()}>保存</Button>\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\", margin: \"10px 0\", visibility: this.testViewVisibility }}>\n                    <Divider orientation=\"center\">测试按钮</Divider>\n                    <Button onClick={() => this.click1()}>click1</Button>\n                    <Button onClick={() => this.click2()}>click2</Button>\n                </Row>\n            </Content>\n        )\n    }\n}\n\nexport default InitPage","import { App, DB_INIT } from '../../app';\nimport { InvestmentDetail, InvestmentProduct, InvestmentRecordType, InvestmentType } from '../entity/investment';\nimport { BaseRepo } from './base_repo';\n\nclass InvestmentProductRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_product\"\n    }\n\n    /**\n      * @param {InvestmentProduct} entity\n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        }\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new InvestmentProduct()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.name = data[3]\n            detail.type = InvestmentType.getByCode(data[4])\n            detail.desc = data[5]\n            detail.fixVote = data[6]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nclass InvestmentDetailRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_detail\"\n    }\n\n    /**\n      * @param {InvestmentDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            return App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                 detail.productId, detail.productName, detail.productType.code, detail.money, \n                 happenTime, detail.buySellId, detail.recordType.code, detail.count])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                detail.productId, detail.productName, detail.productType.code, detail.money,\n                happenTime, detail.buySellId, detail.recordType.code, detail.count])\n            return detail.id\n        }\n    }\n\n    select(productId, recordType, startTime, endTime) {\n        if(!DB_INIT) {\n            return []\n        }\n        if(startTime != null && endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        let cols = [], values = [], ops = []\n        if(productId != null) {\n            cols.push('product_id')\n            values.push(productId)\n            ops.push('=')\n        }\n        if(recordType != null) {\n            cols.push('record_type')\n            values.push(recordType.code)\n            ops.push('=')\n        }\n        if(startTime != null) {\n            cols.push('happen_time')\n            values.push(startTime.timeStr())\n            ops.push('>')\n        }\n        if(endTime != null) {\n            cols.push('happen_time')\n            values.push(endTime.timeStr())\n            ops.push('<')\n        }\n        return this.convert(App.db?.selectAndOrder(this.tablename, cols, values, ops, ['happen_time desc', 'gmt_modified desc']))\n    }\n\n    selectBySellId(buySellId) {\n        return this.convert(App.db?.select(this.tablename, [\"buy_sell_id\"],\n         [buySellId], ['=']))\n    }\n\n    deleteBySellId(buySellId) {\n        App.db?.delete(this.tablename, [\"buy_sell_id\"], [buySellId], ['='])\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new InvestmentDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.productId = data[3]\n            detail.productName = data[4]\n            detail.productType = InvestmentType.getByCode(data[5])\n            detail.money = data[6]\n            detail.happenTime = new Date(data[7])\n            detail.buySellId = data[8]\n            detail.recordType = InvestmentRecordType.getByCode(data[9])\n            detail.count = data[10]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport { InvestmentDetailRepo, InvestmentProductRepo };\n","import { DataUtil } from '../../utils/utils';\nimport { InvestmentDetailRepo, InvestmentProductRepo } from '../repo/investment_repo';\nimport { BaseEntity } from './base_entity';\n\n//投资产品\nclass InvestmentProduct extends BaseEntity {\n    //产品名称\n    name = null\n    /**\n     * @type {InvestmentType}\n     */\n    type = null\n    desc = null\n    fixVote = null\n\n    static repo = new InvestmentProductRepo()\n\n    static queryAll() {\n        return this.repo.selectAll()\n    }\n\n    static delete(id) {\n        InvestmentProduct.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(DataUtil.isNull(this.fixVote)) {\n            this.fixVote = 0\n        }\n        InvestmentProduct.repo.upsert(this)\n    }\n}\n\n//投资明细\n class InvestmentDetail extends BaseEntity {\n    productId = null\n    productName = null\n    /**\n     * @type {InvestmentType}\n     */\n    productType = null\n    //分为单位，买入为正，卖出为负\n    money = null\n    //份数，只在表示股票时候可能存在，用于计算成本价\n    count = null\n    //实际发生时间，不确定可以填月初\n    happenTime = null\n    /**\n     * 相关联的 买入/卖出 事件ID\n     */\n    buySellId = null\n    /**\n     * @type {InvestmentRecordType}\n     */\n    recordType = null\n\n    static repo = new InvestmentDetailRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(productId, recordType, startTime, endTime) {\n        return this.repo.select(productId, recordType, startTime, endTime)\n    }\n    \n    save() {\n        this.gmtModified = new Date()\n        return InvestmentDetail.repo.upsert(this)\n    }\n\n    delete() {\n        if(this.recordType.code === InvestmentRecordType.BuySell.code) {\n            InvestmentDetail.repo.deleteBySellId(this.id)\n        }\n        InvestmentDetail.repo.delete(this.id)\n    }\n}\n\nclass InvestmentRecordType {\n    static BuySell = new InvestmentRecordType(1, \"买入或卖出\")\n    static CurrentPrice = new InvestmentRecordType(2, \"投资类现价\")\n    static Profit = new InvestmentRecordType(3, \"投资类收益\")\n    static AssetDebtCurrentPrice = new InvestmentRecordType(4, \"资产/负债类现价\")\n    static AssetDebtProfit = new InvestmentRecordType(5, \"资产/负债类收益\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BuySell, this.CurrentPrice, this.Profit, this.AssetDebtCurrentPrice, this.AssetDebtProfit]\n    }\n}\n\nclass InvestmentType {\n    static Product = {\n        saving: new InvestmentType(1000000, \"现金类资产\"),\n        stock_fund: new InvestmentType(2000000, \"股票类基金\"),\n        etf: new InvestmentType(3000000, \"指数类基金\"),\n        bond: new InvestmentType(4000000, \"债券类基金\"),\n        stock: new InvestmentType(5000000, \"股票\"),\n        debt: new InvestmentType(6000000, \"负债\"),\n    };\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof InvestmentType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    static values() {\n        return this.toList(this.Product)\n    }\n\n    isAsset() {\n        return this === InvestmentType.Product.saving\n    }\n\n    isDebt() {\n        return this === InvestmentType.Product.debt\n    }\n\n    isStock() {\n        return this === InvestmentType.Product.stock\n    }\n\n    isFund() {\n        return this === InvestmentType.Product.stock_fund || \n            this === InvestmentType.Product.etf || this === InvestmentType.Product.bond\n    }\n}\n\nexport { InvestmentDetail, InvestmentProduct, InvestmentRecordType, InvestmentType };\n","import { DataUtil } from \"../../utils/utils\";\nimport { InvestmentDetail, InvestmentProduct, InvestmentRecordType, InvestmentType } from \"../entity/investment\";\n\nclass InvestmentService {\n\n    static getProductTypes() {\n        return InvestmentType.toList(InvestmentType.Product)\n    }\n\n    static upsertProduct(typeCode, name, desc = null, id = null) {\n        var entity = new InvestmentProduct()\n        entity.id = id\n        entity.type = InvestmentType.getByCode(typeCode)\n        entity.desc = desc\n        entity.name = name\n        entity.save()\n    }\n\n    static queryProducts() {\n        return InvestmentProduct.queryAll()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} detail \n     * @param {String} desc \n     * @param {Number} fixVote \n     */\n    static editProduct(detail, desc, fixVote) {\n        detail.fixVote = fixVote\n        detail.desc = desc\n        detail.save()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} product \n     */\n    static deleteProduct(product) {\n        InvestmentProduct.delete(product.id)\n    }\n\n    static getAllInvestDetailBefore(endTime) {\n        var details = InvestmentDetail.queryTimeBetwen(null, null, null, endTime)\n        let investMap = {\n            fund: {},\n            stock: {},\n            asset: {},\n            debt: {}\n        }\n        details.forEach(detail => {\n            this.dealDetail(detail, investMap)\n        })\n        return investMap\n    }\n\n    /**\n     * \n     * @param {InvestmentDetail} detail \n     * @param {{}} investMap \n     * \n     *  investMap = {\n            invest: {\n                \"1\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"buySells\": {\n                        \"totalMoney\": 100000\n                        \"datas\": [InvestmentDetail]\n                    },\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            },\n            stock: {\n                \"11\": {\n\n                }\n            }\n            asset: {                \n                \"2\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n\n            },\n            debt: {                \n                \"3\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            }\n        }\n     */\n    static dealDetail(detail, investMap) {\n        var currentProductMap = null\n        if (detail.productType.isAsset()) {\n            currentProductMap = investMap.asset\n        } else if (detail.productType.isDebt()) {\n            currentProductMap = investMap.debt\n        } else if (detail.productType.isStock()) {\n            currentProductMap = investMap.stock\n        } else {\n            currentProductMap = investMap.fund\n        }\n        if (DataUtil.isNull(currentProductMap[detail.productId])) {\n            currentProductMap[detail.productId] = {}\n        }\n        currentProductMap = currentProductMap[detail.productId]\n        currentProductMap.info = detail\n\n        // 保存现价\n        if (detail.recordType == InvestmentRecordType.CurrentPrice || detail.recordType == InvestmentRecordType.AssetDebtCurrentPrice) {\n            if(currentProductMap.currentPrice === undefined) {\n                currentProductMap.currentPrice = detail\n            }\n        } else if (detail.recordType == InvestmentRecordType.Profit || detail.recordType == InvestmentRecordType.AssetDebtProfit) {\n            if (DataUtil.isNull(currentProductMap.profits)) {\n                currentProductMap.profits = {\n                    totalMoney: 0,\n                    datas: [],\n                }\n            }\n            currentProductMap.profits.totalMoney += detail.money\n            currentProductMap.profits.datas.push(detail)\n        } else if (detail.recordType == InvestmentRecordType.BuySell) {\n            if (DataUtil.isNull(currentProductMap.buySells)) {\n                currentProductMap.buySells = {\n                    totalMoney: 0,\n                    totalSellMoney: 0,\n                    totalCount: 0,\n                    datas: [],\n                }\n            }\n            if(!DataUtil.notNumber(detail.count)) {\n                currentProductMap.buySells.totalCount += detail.count\n            }\n            currentProductMap.buySells.totalMoney += detail.money\n            if(detail.money < 0) {\n                currentProductMap.buySells.totalSellMoney += detail.money\n            }\n            currentProductMap.buySells.datas.push(detail)\n        }\n        return investMap\n    }\n\n    static getProductTotalBuySellBefore(productId, endTime) {\n        return InvestmentDetail.queryTimeBetwen(productId, InvestmentRecordType.BuySell, null, endTime)\n    }\n\n    static addAssetDebtProfit(productId, productName, productTypeCode, money, currentPrice, happenTime) {\n        if (!DataUtil.notNumber(money) && money != 0) {\n            this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n                InvestmentRecordType.AssetDebtProfit)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.AssetDebtCurrentPrice)\n    }\n\n    static addBuyInvest(productId, productName, productTypeCode, count, money, currentPrice, happenTime) {\n        var id = this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n            InvestmentRecordType.BuySell, count)\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.CurrentPrice, null, id)\n    }\n\n    static addSellInvest(productId, productName, productTypeCode, count, sellGetMoney, currentPrice, currentProfit, happenTime) {\n        let totalInvestMoney = 0\n        // 添加1秒，避免同一天添加的买入查不出来\n        this.getProductTotalBuySellBefore(productId, new Date(happenTime.getTime() + 1000)).forEach(buySell => {\n            totalInvestMoney += buySell.money\n        })\n        // 所得为正数，卖出的本金 = 总投资金额 - 当前投资金额\n        let principal = totalInvestMoney - (currentPrice - currentProfit)\n        let sellProfit = sellGetMoney - principal\n        console.log(`totalInvestMoney: ${totalInvestMoney} currentProfit: ${currentProfit} currentPrice: ${currentPrice} principal: ${principal} sellGetMoney: ${sellGetMoney} sellProfit: ${sellProfit}`)\n        this.addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime)\n    }\n\n    static addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime) {\n        // 所得为正数，表示花费的本金\n        let principal = sellGetMoney - sellProfit\n        if(!DataUtil.notNumber(count)) {\n            count = -1 * count\n        }\n        // 卖出本金，需要转为负数\n        var id = this._upsertInvest(productId, productName, productTypeCode, -1 * principal, happenTime,\n            InvestmentRecordType.BuySell, count)\n        if(currentPrice >= 0) {\n            this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n                InvestmentRecordType.CurrentPrice, null, id)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, sellProfit, happenTime, InvestmentRecordType.Profit, null, id)\n    }\n\n    /**\n     * @param {InvestmentDetail} detail \n     */\n    static deleteInvestDetail(detail) {\n        detail.delete()\n    }\n\n    static _upsertInvest(productId, productName, productTypeCode, money, happenTime, recordType,\n        count = null, buySellId = null, id = null) {\n        var detail = new InvestmentDetail()\n        detail.id = id\n        detail.productId = productId\n        detail.productName = productName\n        detail.productType = InvestmentType.getByCode(productTypeCode)\n        detail.money = money\n        detail.count = count\n        detail.happenTime = happenTime\n        detail.buySellId = buySellId\n        detail.recordType = recordType\n        return detail.save()\n    }\n}\n\nexport default InvestmentService","import { DataUtil, MoneyUtil, TimeUtil } from \"../../utils/utils\"\nimport { IncomeExpenditureDetail } from \"../entity/income_expenditure\"\nimport { UserConfigStatus, UserConfigType } from \"../entity/user_entity\"\nimport { IncomeExpenditureService } from \"./income_expenditure_service\"\nimport InvestmentService from \"./investment_service\"\n\nclass IncomeExpenditureVMService {\n\n    static getTypeTrees(configType, includeDisable=false) {\n        let topCodes = []\n        let result = []\n        function addTopTypes(type) {\n            if(!includeDisable && type.config.status == UserConfigStatus.Disabled) {\n                return\n            }\n            let parentCode = type.config.parent_code\n            if(DataUtil.isNull(parentCode)) {\n                topCodes.push(type.code)\n                result.push({\n                    \"key\": type.code,\n                    \"entity\": type,\n                    \"childs\": []\n                })\n            }\n        }\n        function addChildrenTypes(type) {\n            if(!includeDisable && type.config.status == UserConfigStatus.Disabled) {\n                return\n            }\n            let parentCode = type.config.parent_code\n            if(!DataUtil.isNull(parentCode)) {\n                let index = topCodes.indexOf(parentCode)\n                if(index < 0) {\n                    return\n                }\n                result[index][\"childs\"].push({\n                    \"key\": type.code,\n                    \"entity\": type\n                })\n            }\n        }\n        if(configType == UserConfigType.IncomeType) {\n            IncomeExpenditureService.getIncomeTypes().forEach(type => addTopTypes(type))\n            IncomeExpenditureService.getIncomeTypes().forEach(type => addChildrenTypes(type))\n        } else {\n            IncomeExpenditureService.getExpenditureTypes().forEach(type => addTopTypes(type))\n            IncomeExpenditureService.getExpenditureTypes().forEach(type => addChildrenTypes(type))\n        }\n        return result\n    }\n\n    static queryMonthData(monthDate) {\n        return this._calIncomeExpendData(IncomeExpenditureService.queryMonth(monthDate))\n    }\n\n    static queryYearData(startMonthDate) {\n        let data = this._calIncomeExpendData(IncomeExpenditureService.queryTimeBetwen(\n            TimeUtil.monthStart(startMonthDate), TimeUtil.yearEnd(startMonthDate)))\n        let incomeDetailByMonth = this._calSumByMonth(data['income']['details'])\n        let expendDetailByMonth = this._calSumByMonth(data['expend']['details'])\n        data['income']['sumByMonth'] = incomeDetailByMonth\n        data['expend']['sumByMonth'] = expendDetailByMonth\n        return data\n    }\n\n    static _calSumByMonth(details) {\n        let sumByMonth = {}\n        for(const detail of details) {\n            let monthStr = TimeUtil.monthStr(detail.happenTime)\n            if(!(monthStr in sumByMonth)) {\n                sumByMonth[monthStr] = 0\n            }\n            sumByMonth[monthStr] += detail.money\n        }\n        return Object.keys(sumByMonth).map(month => {\n            return {\n                \"month\": month,\n                \"total\": sumByMonth[month]\n            }\n        })\n    }\n\n    /**\n     * @param {Array[IncomeExpenditureDetail]} details \n     * @returns \n     */\n    static _calIncomeExpendData(details) {\n        let result = {\n            'income': {\n                'total': 0,\n                'details': []\n            },\n            'expend': {\n                'total': 0,\n                'details': []\n            }\n        }\n        details.sort((a, b) => Math.abs(a.type.code) > Math.abs(b.type.code) ? 1 : -1).forEach(detail => {\n            let obj = result['expend']\n            if (detail.type.isIncome()) {\n                obj = result['income']\n            }\n            obj.details.push(this._newEntityFromDetail(detail))\n            obj.total += detail.money\n        })\n        return result\n    }\n\n    /**\n     * @param {IncomeExpenditureDetail} detail \n     */\n    static _newEntityFromDetail(detail) {\n        return {\n            id: detail.id,\n            happenTime: detail.happenTime,\n            title: detail.type.name,\n            money: detail.money,\n            desc: detail.desc,\n            type: detail.type\n        }\n    }\n}\n\nclass InvestmentVMService {\n\n    static queryMonthData(monthDate) {\n        let startDate = TimeUtil.monthStart(monthDate)\n        let endDate = TimeUtil.monthEnd(monthDate)\n        let investMap = InvestmentService.getAllInvestDetailBefore(endDate)\n\n        return {\n            \"asset\": this._getInvestSummary(investMap.asset, startDate, endDate),\n            \"debt\": this._getInvestSummary(investMap.debt, startDate, endDate),\n            \"fund\": this._getInvestSummary(investMap.fund, startDate, endDate),\n            \"stock\": this._getInvestSummary(investMap.stock, startDate, endDate),\n        }\n    }\n\n    static queryYearData(startMonthDate) {\n        let startDate = TimeUtil.monthStart(startMonthDate)\n        let endDate = TimeUtil.yearEnd(startMonthDate)\n        let investMap = InvestmentService.getAllInvestDetailBefore(endDate)\n\n        return {\n            \"asset\": this._getInvestSummary(investMap.asset, startDate, endDate),\n            \"debt\": this._getInvestSummary(investMap.debt, startDate, endDate),\n            \"fund\": this._getInvestSummary(investMap.fund, startDate, endDate),\n            \"stock\": this._getInvestSummary(investMap.stock, startDate, endDate),\n        }\n    }\n\n    static getPaperProfit(product) {\n        if(DataUtil.isNull(product)) {\n            return 0\n        }\n        return product.currentPrice?.money - product.buySells?.totalMoney\n    }\n\n    static getPaperProfitPercent(product) {\n        return MoneyUtil.safeDivision(this.getPaperProfit(product), product.buySells?.totalMoney)\n    }\n\n    static getSellProfitPercent(product) {\n        return MoneyUtil.safeDivision(product.profits?.filterTotalMoney, Math.abs(product.buySells?.filterSellMoney))\n    }\n\n    static _getInvestSummary(details, startTimeDate, endTimeDate) {\n        let profitSummary = this._getProfitSummary(details, startTimeDate, endTimeDate)\n        return {\n            \"totalMoneys\": this._getTotalMoney(details),\n            \"totalProfitMoneys\": [profitSummary[0], profitSummary[1]],\n            \"products\": profitSummary[2] \n        }\n    }\n\n    static _getProfitSummary(details, startTimeDate, endTimeDate) {\n        let totalProfitMoney = 0\n        let totalFilterProfitMoney = 0\n        let products = {}\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            if (!DataUtil.isNull(detail['profits'])) {\n                let filterTotalMoney = 0\n                let filterDatas = []\n                detail['profits']['datas'].forEach(ele => {\n                    if (TimeUtil.inTime(ele.happenTime, startTimeDate, endTimeDate)) {\n                        filterTotalMoney += ele.money\n                        filterDatas.push(ele)\n                    }\n                })\n                totalProfitMoney += detail['profits']['totalMoney']\n                if(filterTotalMoney !== 0) {\n                    totalFilterProfitMoney += filterTotalMoney\n                    detail['profits']['filterDatas'] = filterDatas\n                    detail['profits']['filterTotalMoney'] = filterTotalMoney\n                }\n            }\n            if (!DataUtil.isNull(detail['buySells'])) {\n                let filterMoney = 0\n                let filterSellMoney = 0\n                let filterTotalCount = 0\n                let filterDatas = []\n                detail.buySells.datas.forEach(ele => {\n                    if (TimeUtil.inTime(ele.happenTime, startTimeDate, endTimeDate)\n                        && ele.money !== 0) {\n                        filterMoney += ele.money\n                        if(ele.money < 0) {\n                            filterSellMoney += ele.money\n                        }\n                        if(!DataUtil.notNumber(ele.count)) {\n                            filterTotalCount += ele.count\n                        }\n                        filterDatas.push(ele)\n                    }\n                })\n                detail['buySells']['filterMoney'] = filterMoney\n                detail['buySells']['filterSellMoney'] = filterSellMoney\n                detail['buySells']['filterTotalCount'] = filterTotalCount\n                detail['buySells']['filterDatas'] = filterDatas\n            }\n            products[productId] = detail\n        }\n        return [totalProfitMoney, totalFilterProfitMoney, products]\n    }\n\n    static _getTotalMoney(details) {\n        let totalCurrentPrice = 0, totalBuySellMoney = 0\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            if (!DataUtil.isNull(detail.currentPrice)) {\n                totalCurrentPrice += detail.currentPrice.money\n            }\n            if (!DataUtil.isNull(detail.buySells)) {\n                totalBuySellMoney += detail.buySells.totalMoney\n            }\n        }\n        return [totalCurrentPrice, totalBuySellMoney]\n    }\n}\n\nexport { IncomeExpenditureVMService, InvestmentVMService }\n","import { Button, Card, Col, DatePicker, Input, InputNumber, Row, Select, Switch, TreeSelect, Typography } from \"antd\";\nimport moment from 'moment';\nimport React from 'react';\nimport { DataUtil, TimeUtil } from '../../../utils/utils';\n\nconst { Text } = Typography;\n\nclass InputWidget extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            extra: this.props.extra\n        }\n    }\n\n    static getMoney(s, key) {\n        let ponKey = key + \"Pon\"\n        let pon = s[ponKey] ? 1 : -1\n        if (DataUtil.notNumber(s[key])) {\n            return NaN\n        } else {\n            return s[key] * pon * 100\n        }\n    }\n\n    getOptions(code2Name) {\n        let options = []\n        if (DataUtil.isNull(code2Name)) {\n            return options\n        }\n        let codes = Object.keys(code2Name)\n        if(codes.length === 0) {\n            return options\n        }\n        if(code2Name[codes[0]].length === 1) {\n            //无 parent 相关信息，普通 options\n            for (let code of codes) {\n                options.push({\n                    \"value\": code,\n                    \"label\": code2Name[code][0]\n                })\n            }\n        } else {\n            //有 parent 相关信息，两层 options\n            let groupNames = []\n            for (let code of codes) {\n                let groupName = code2Name[code][2]\n                if(!groupNames.includes(groupName)) {\n                    options.push({\n                        \"label\": groupName,\n                        \"options\": []\n                    })\n                    groupNames.push(groupName)\n                }\n            }\n            for (let code of codes) {\n                let groupName = code2Name[code][2]\n                let groupIndex = groupNames.indexOf(groupName)\n                options[groupIndex][\"options\"].push({\n                    \"value\": code,\n                    \"label\": code2Name[code][0]\n                })\n            }\n        }\n        return options\n    }\n\n    itemToWidget(item) {\n        let stateCode = item.name\n        let type = item.type ?? item.name\n        let nameAppend = (item.required ?? false) ? \"(必填)\" : \"\"\n        let hint = \"\"\n        let placeholder = \"\"\n        let defaultValue = item.defaultValue\n        if (DataUtil.isNull(this.state[stateCode]) && !DataUtil.isNull(defaultValue)) {\n            this.state[stateCode] = defaultValue\n        }\n        let widgetWidth = '220px'\n        switch (type) {\n            case \"treeType\":\n                hint = item.hint ?? \"类型\"\n                placeholder = item.placeholder ?? \"请选择(支持搜索)\"\n                return <Row align='middle'>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <TreeSelect\n                            style={{\n                                width: widgetWidth,\n                            }}\n                            dropdownStyle={{\n                                maxHeight: 600,\n                                overflow: 'auto',\n                            }}\n                            showSearch={true}\n                            treeData={item.treeData}\n                            placeholder={placeholder}\n                            treeDefaultExpandAll={false}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value,\n                                })\n                            }}\n                        />\n                    </Col>\n                </Row>\n            case \"type\":\n                hint = item.hint ?? \"类型\"\n                let typeName = stateCode + \"Name\"\n                let parentCode = stateCode + \"ParentCode\"\n                let parentName = stateCode + \"ParentName\"\n                let opts = this.getOptions(item.code2Name)\n                return <Row align='middle'>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Select style={{ width: widgetWidth }}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value,\n                                    [typeName]: item.code2Name[value][0],\n                                    [parentCode]: item.code2Name[value][1],\n                                    [parentName]: item.code2Name[value][2]\n                                })\n                            }}\n                            options={opts} />\n                    </Col>\n                </Row>\n            case \"money\":\n                let pon = item.moneyPon\n                hint = item.hint ?? \"金额\"\n                let ponKey = stateCode + \"Pon\"\n                this.state[ponKey] = pon\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <InputNumber style={{ width: widgetWidth }} addonBefore={pon ? \"+\" : \"-\"}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"date\":\n                if (!DataUtil.isNull(item.inMonth)) {\n                    if (DataUtil.isNull(this.state[stateCode]) || !TimeUtil.inMonth(this.state[stateCode], new Date(item.inMonth))) {\n                        this.state[stateCode] = new Date(item.inMonth)\n                    }\n                }\n                hint = item.hint ?? \"发生日期\"\n                let picker = item.picker ?? \"\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <DatePicker style={{ width: widgetWidth }}\n                            picker={picker}\n                            value={moment(this.state[stateCode])}\n                            onChange={(m, dateString) => {\n                                this.setState({\n                                    [stateCode]: m.toDate(),\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"input\":\n                hint = item.hint ?? \"描述\"\n                placeholder = item.placeholder ?? \"请输入文本\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Input placeholder={placeholder} style={{ width: widgetWidth }}\n                            value={this.state[stateCode]}\n                            onChange={(event) => {\n                                this.setState({ [stateCode]: event.target.value })\n                            }} />\n                    </Col>\n                </Row>\n            case \"switch\":\n                hint = item.hint ?? \"开关\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                <Col span={8}>\n                    <Text >{hint}{nameAppend}:</Text>\n                </Col>\n                <Col flex=\"auto\" align=\"center\">\n                    <Switch \n                        defaultChecked={this.state[stateCode]}\n                        onChange={(checked) => {\n                            this.setState({ [stateCode]: checked })\n                        }} />\n                </Col>\n            </Row>\n            default:\n                return <Row>\n                    <Text>未支持输入配置 {item.name}</Text>\n                </Row>\n        }\n    }\n\n    checkData(state, item) {\n        try {\n            let value = state[item.name]\n            if (item.required === true && DataUtil.isNull(value)) {\n                throw new Error(item.name + \" 必须输入\")\n            }\n            if (item.isNum === true && isNaN(value)) {\n                throw new Error(item.name + \" 必须为数字\")\n            }\n            if (!DataUtil.isNull(item.inMonth)) {\n                if (!TimeUtil.inMonth(value, new Date(item.inMonth))) {\n                    throw new Error(\"发生日期仅可选在当前月份：\" + item.inMonth)\n                }\n            }\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    render() {\n        const handleSubmit = () => {\n            for (let item of this.props.cfgs) {\n                if (!this.checkData(this.state, item)) {\n                    return\n                }\n            }\n            if (this.props.onSubmit(this.state)) {\n                this.setState({})\n            }\n        };\n        let rows = []\n        for (let item of this.props.cfgs) {\n            rows.push(this.itemToWidget(item))\n        }\n\n        return (<Card title={this.props.title ?? \"新增\"} style={{ margin: \"0px 5px\" }} bodyStyle={{ padding: \"25px\" }}>\n            {rows}\n            <Row justify='center' style={{ margin: \"15px 0 0 0\" }}>\n                <Col>\n                    <Button type=\"primary\" onClick={handleSubmit}> 提交 </Button>\n                </Col>\n            </Row>\n        </Card>)\n    }\n}\n\nexport default InputWidget","import { Modal } from \"antd\"\nimport React from 'react'\nimport InputWidget from './input_widget'\n\nclass CusDialog extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        let title = this.props.title\n        let visible = this.props.visible\n        let cfgs = this.props.cfgs\n        let extra = this.props.extra\n        return <Modal title={title} visible={visible}\n            footer={null}\n            onCancel={() => this.props.onCancel()}>\n            <InputWidget key={this.props.key} title=\"\" cfgs={cfgs} extra={extra} onSubmit={(s) => {\n                return this.props.onOk(s)\n            }} />\n        </Modal>\n    }\n}\n\nexport { CusDialog }\n","import { Col, Divider, Layout, Row, Space, Table, Tag, Typography } from \"antd\";\nimport React from 'react';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { InvestmentVMService } from '../../domain/service/view_model_service';\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport { CusDialog } from './widget/cus_dialog';\nimport InputWidget from './widget/input_widget';\n\nconst { Content } = Layout;\nconst { Text} = Typography;\n\nclass InvestPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'gold'\n                if (entity.info.productType.isStock()) {\n                    color = 'red'\n                }\n                return <Tag color={color} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = InvestmentVMService.getPaperProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = InvestmentVMService.getPaperProfitPercent(a.entity)\n                let bpaperProfitPercent = InvestmentVMService.getPaperProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(InvestmentVMService.getPaperProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(InvestmentVMService.getPaperProfit(a.entity), InvestmentVMService.getPaperProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.totalSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.totalSellMoney, b.entity.buySells?.totalSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = this.getSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = this.getSellProfitPercent(a.entity)\n                let bsellProfitPercent = this.getSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.totalMoney, b.entity.profits?.totalMoney)\n            }\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                var count = entity.buySells?.totalCount\n                return <Text>{Math.abs(count) == 0 ? \"-\" : Math.abs(count)}</Text>\n            },\n        },];\n\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(-1 * entity.money + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{Math.abs(entity.count) == 0 ? \"-\" : Math.abs(entity.count)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.productColumns = [\n            {\n                title: '类型',\n                key: 'type',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let color = 'gold'\n                    if (entity.type?.isAsset()) {\n                        color = 'geekblue'\n                    } else if (entity.type?.isDebt()) {\n                        color = 'green'\n                    } else if (entity.type?.isStock()) {\n                        color = 'red'\n                    }\n                    return <Tag color={color} key={entity.type?.code}>\n                        {entity.type?.name}\n                    </Tag>\n                },\n            }, {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.name}</Text>\n                },\n            }, {\n                title: '描述',\n                key: 'desc',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.desc}</Text>\n                },\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={() => { this.showEditProductDialog(record.entity) }}>编辑</a>\n                        <a onClick={() => { this.deleteProduct(record.entity) }}>删除</a>\n                    </Space>\n                ),\n            },\n        ];\n\n        this.productFixVoteColumns = [\n            {\n                title: '类型',\n                key: 'type',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let color = 'gold'\n                    return <Tag color={color} key={entity.productTypeCode}>\n                        {entity.productTypeName}\n                    </Tag>\n                },\n            }, {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.productName}</Text>\n                },\n            }, {\n                title: '定投额',\n                key: 'fixVote',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{MoneyUtil.getStr(entity.productFixVote)}</Text>\n                },\n            }, {\n                title: '账面利润率',\n                key: 'paperProfitPercent',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let paperProfitPercent = entity.paperProfitPercent\n                    return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                        {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n                },\n                sorter: (a, b) => {\n                    let apaperProfitPercent = a.entity.paperProfitPercent\n                    let bpaperProfitPercent = b.entity.paperProfitPercent\n                    return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n                }\n            }, {\n                title: '卖出利润率',\n                key: 'sellProfitPercent',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let sellProfitPercent = entity.sellProfitPercent\n                    return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                        {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n                },\n                sorter: (a, b) => {\n                    let asellProfitPercent = a.entity.sellProfitPercent\n                    let bsellProfitPercent = b.entity.sellProfitPercent\n                    return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n                }\n            }, {\n                title: '描述',\n                key: 'desc',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.product?.desc}</Text>\n                },\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => {\n                    if(!DataUtil.isNull(record.entity.product)) {\n                        return <Space size=\"middle\">\n                            <a onClick={() => { this.showEditProductDialog(record.entity.product) }}>编辑</a>\n                            <a onClick={() => { this.deleteProduct(record.entity.product) }}>删除</a>\n                        </Space>\n                    }\n                },\n            }];\n    }\n\n    getSellProfitPercent(entity) {\n        return MoneyUtil.safeDivision(entity.profits?.totalMoney, Math.abs(entity.buySells?.totalSellMoney))\n    }\n\n    showEditProductDialog(detail) {\n        this.setState({\n            showDialog: \"editProduct\",\n            currentProduct: detail\n        })\n    }\n\n    editProduct(detail, state) {\n        InvestmentService.editProduct(detail, state.desc, InputWidget.getMoney(state, \"money\"))\n        this.hideDialog()\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n            currentProduct: null\n        })\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    addProduct(s) {\n        InvestmentService.upsertProduct(s.type, s.name, s.desc)\n        this.refreshPage()\n    }\n\n    queryProducts() {\n        return InvestmentService.queryProducts()\n    }\n\n    deleteProduct(entity) {\n        InvestmentService.deleteProduct(entity)\n        this.refreshPage()\n    }\n\n    queryAllInvestData() {\n        let map = InvestmentService.getAllInvestDetailBefore(null)\n        return map\n    }\n\n    render() {\n        let code2Name = {}\n        InvestmentService.getProductTypes().forEach(type => {\n            code2Name[type.code] = [type.name]\n        })\n        let productAssetDatas = []\n        let productStockDatas = []\n        let productInvestDatas = []\n        let productIdToProduct = {}\n        InvestmentService.queryProducts().sort((a, b) => Math.abs(a.type.code) < Math.abs(b.type.code) ? 1 : -1).forEach(entity => {\n            if(entity.type.isAsset() || entity.type.isDebt()) {\n                productAssetDatas.push({ key: entity.id, entity: entity })\n            } else if (entity.type.isStock()) {\n                productStockDatas.push({ key: entity.id, entity: entity })\n            } else {\n                productInvestDatas.push({ key: entity.id, entity: entity })\n            }\n            productIdToProduct[entity.id] = entity\n        })\n\n        let investMap = this.queryAllInvestData()\n\n        let fundDatas = []\n        let stockDatas = []\n        let investFixVoteDatas = []\n        var totalFixVote = {\n            productTypeCode: 99999999,\n            productTypeName: \"汇总\",\n            productName: \"汇总\",\n            productFixVote: 0,\n            paperProfit: 0,\n            sellProfit: 0,\n            paperProfitPercent: 0,\n            sellProfitPercent: 0,\n        }\n        for (let productId of Object.keys(investMap.fund)) {\n            let detail = investMap.fund[productId]\n            fundDatas.push({ key: productId, entity: detail })\n\n            var product = productIdToProduct[productId]\n            var paperProfitPercent = InvestmentVMService.getPaperProfitPercent(detail)\n            var sellProfitPercent = this.getSellProfitPercent(detail)\n            var fixVoteEntity = {\n                product: product,\n                productTypeCode: product.type.code,\n                productTypeName: product.type.name,\n                productName: product.name,\n                productFixVote: product.fixVote,\n                paperProfit: product.fixVote * paperProfitPercent,\n                sellProfit: product.fixVote * sellProfitPercent,\n                paperProfitPercent: paperProfitPercent,\n                sellProfitPercent: sellProfitPercent,\n            }\n            totalFixVote.productFixVote += fixVoteEntity.productFixVote\n            totalFixVote.paperProfit += fixVoteEntity.paperProfit\n            totalFixVote.sellProfit += fixVoteEntity.sellProfit\n            investFixVoteDatas.push({key: productId, entity: fixVoteEntity})\n        }\n        totalFixVote.paperProfitPercent = totalFixVote.paperProfit / totalFixVote.productFixVote\n        totalFixVote.sellProfitPercent = totalFixVote.sellProfit / totalFixVote.productFixVote\n        investFixVoteDatas.push({key: 9999999, entity: totalFixVote})\n\n        for (let productId of Object.keys(investMap.stock)) {\n            let detail = investMap.stock[productId]\n            stockDatas.push({ key: productId, entity: detail })\n        }\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.datas.forEach(ele => {\n                if(ele.money !== 0) {\n                    for (let profit of record.entity.profits?.datas ?? []) {\n                        if (profit.buySellId === ele.id) {\n                            ele.profitMoney = profit.money\n                            break\n                        }\n                    }\n                    data.push({\n                        key: ele.id,\n                        entity: ele\n                    });\n                }\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.datas)\n        }\n        return (\n            <Content className='Content'>\n                <Divider orientation=\"center\">投资详情</Divider>\n                <Table columns={this.investColumns} dataSource={stockDatas} expandable={{\n                    expandedRowRender: subInvestRowRender,\n                    rowExpandable: subInvestRowExpandable\n                }} pagination={{pageSize: 20}} scroll={{ x: 1500 }} sortDirections={['descend']}/>\n                <Table columns={this.investColumns} dataSource={fundDatas} expandable={{\n                    expandedRowRender: subInvestRowRender,\n                    rowExpandable: subInvestRowExpandable\n                }} pagination={{pageSize: 20}} scroll={{ x: 1500 }} sortDirections={['descend']}/>\n                <Divider orientation=\"center\">投资产品</Divider>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Col span={8}>\n                        <InputWidget title={\"新增投资产品\"} cfgs={[{\n                            name: \"type\",\n                            code2Name: code2Name,\n                            required: true\n                        }, {\n                            name: \"name\",\n                            type: \"input\",\n                            hint: \"名称\",\n                            required: true\n                        }, {\n                            name: \"desc\",\n                            type: \"input\",\n                        }\n                        ]} onSubmit={(s) => {\n                            this.addProduct(s)\n                            return true\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.productColumns} dataSource={productStockDatas} pagination={{pageSize: 10}}/>\n                        <Table columns={this.productFixVoteColumns} dataSource={investFixVoteDatas} \n                            pagination={{pageSize: 15}} scroll={{ x: 1000 }} sortDirections={['descend']}/>\n                        <Table columns={this.productColumns} dataSource={productAssetDatas} pagination={{pageSize: 10}}/>\n                    </Col>\n                </Row>\n                <CusDialog title=\"修改产品\" visible={this.state.showDialog === \"editProduct\"}\n                        key={this.state.currentProduct?.id}\n                        cfgs={[{\n                            name: \"money\",\n                            hint: \"定投额\",\n                            defaultValue: this.state.currentProduct?.fixVote / 100,\n                            moneyPon: true\n                        }, {\n                            name: \"desc\",\n                            type: \"input\",\n                            defaultValue: this.state.currentProduct?.desc,\n                        }]}\n                        onOk={(state) => this.editProduct(this.state.currentProduct, state)}\n                        onCancel={() => this.hideDialog()} />\n            </Content>\n        )\n    }\n}\n\nexport default InvestPage","import { App } from '../../app';\nimport { SummaryData, SummaryType } from '../entity/summary';\nimport { BaseRepo } from './base_repo';\n\nclass SummaryDataRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"data_summary\"\n    }\n\n    /**\n      * @param {SummaryData} entity \n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        }\n    }\n\n    selectAllMonthKey() {\n        return this.convert(App.db?.select(this.tablename, ['type'], [SummaryType.BY_MONTH_KEY.code], ['=']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new SummaryData()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = SummaryType.getByCode(data[3])\n            detail.time = new Date(data[4])\n            detail.money = data[5]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport { SummaryDataRepo };\n","import { SummaryDataRepo } from '../repo/summary_repo';\nimport { BaseEntity } from './base_entity';\n\n//数据总结\nclass SummaryData extends BaseEntity {\n    /**\n     * @type {SummaryType}\n     */\n    type = null\n    time = null\n    money = null\n\n    static repo = new SummaryDataRepo()\n\n    static queryAllMonthKey() {\n        return this.repo.selectAllMonthKey()\n    }\n\n    static delete(id) {\n        this.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        SummaryData.repo.upsert(this)\n    }\n}\n\nclass SummaryType {\n    static BY_MONTH_KEY = new SummaryType(1, \"按月展示的可用月份\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BY_MONTH_KEY]\n    }\n}\n\nexport { SummaryData, SummaryType };\n","import { TimeUtil } from \"../../utils/utils\"\nimport { SummaryData, SummaryType } from \"../entity/summary\"\n\nclass SummaryService {\n\n    static addMonth(monthDate) {\n        var data = new SummaryData()\n        data.type = SummaryType.BY_MONTH_KEY\n        data.time = TimeUtil.monthStart(monthDate)\n        data.save()\n    }\n\n    static queryMonths() {\n        var monthDatas = SummaryData.queryAllMonthKey()\n        return monthDatas.map(d => {\n            return TimeUtil.monthStr(d.time)\n        })\n    }\n}\n\nexport { SummaryService }\n","import { Col, Row, Tag, Typography } from \"antd\";\nconst { Text } = Typography;\n\nclass UIUtils {\n\n    static getProductTag(productType) {\n        return <Tag color={this._getProductColor(productType)} key={productType.code}>\n            {productType.name}\n        </Tag>\n    }\n\n    static _getProductColor(productType) {\n        if (productType.isAsset()) {\n            return 'geekblue'\n        } else if (productType.isDebt()) {\n            return 'green'\n        } else if(productType.isStock()) {\n            return 'red'\n        } else {\n            return 'gold'\n        }\n    }\n\n    static createShowTextRow(title, text, textType = \"\") {\n        return (<Row align='middle' style={{ margin: '0 10px', padding: '4px 0', }} >\n            <Col span={12}>\n                <Text type={textType} strong>{title}</Text>\n            </Col>\n            <Col span={12} align='right'>\n                <Text type={textType} strong>{text}</Text>\n            </Col>\n        </Row>\n        )\n    }\n}\n\nexport { UIUtils };\n","import { Breadcrumb, Button, Col, Divider, Layout, Menu, Row, Space, Table, Tag, Typography, message } from \"antd\";\nimport React from 'react';\nimport { IncomeExpenditureType } from '../../domain/entity/income_expenditure';\nimport { UserConfigType } from '../../domain/entity/user_entity';\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { SummaryService } from '../../domain/service/summary_service';\nimport { IncomeExpenditureVMService, InvestmentVMService } from '../../domain/service/view_model_service';\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport { UIUtils } from '../ui_utils';\nimport { CusDialog } from './widget/cus_dialog';\nimport InputWidget from './widget/input_widget';\n\nconst { Content, Sider } = Layout;\nconst { Text } = Typography;\n\nclass MonthPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.incomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.title === '主动收入' || entity.title === '被动收入') {\n                    color = 'red'\n                } else if (entity.title === '主动支出' || entity.title === '被动支出') {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.title}>\n                    {entity.title}\n                </Tag>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            }\n        }]\n        this.subIncomeExpendColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.title}</Text>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.money, b.entity.money)\n        }, {\n            title: '描述',\n            key: 'desc',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.desc}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => {\n                if(!DataUtil.isNull(record.entity.id)) {\n                    return <Space size=\"middle\">\n                        <a onClick={() => {\n                            console.log(record.entity)\n                            this.showDialog(\"modifyIncomeOrExpend\", record.entity)\n                        }}>编辑</a>\n                        <a onClick={() => {\n                            this.deleteIncomeExpendDetail(record.entity.id)\n                        }}>删除</a>\n                    </Space>\n                }\n            }   \n        },]\n\n        this.assetDebtColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        },  {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let type = \"\"\n                if (!TimeUtil.inMonth(entity.currentPrice?.happenTime, this.monthDate)) {\n                    type = \"secondary\"\n                }\n                return <Text type={type}>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '总额',\n            key: 'currentPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n        }]\n        this.subAssetDebtColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let type = \"\"\n                if (!TimeUtil.inMonth(entity.currentPrice?.happenTime, this.monthDate)) {\n                    type = \"secondary\"\n                }\n                return <Text type={type}>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.filterSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.filterSellMoney, b.entity.buySells?.filterSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = InvestmentVMService.getSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = InvestmentVMService.getSellProfitPercent(a.entity)\n                let bsellProfitPercent = InvestmentVMService.getSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n            }\n        }, {\n            title: '当期投资',\n            key: 'timeInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.filterMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.filterMoney, b.entity.buySells?.filterMoney)\n        }, {\n            title: '当期账面利润',\n            key: 'qoqPaperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(this.getQoqPaperProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(this.getQoqPaperProfit(a.entity), this.getQoqPaperProfit(b.entity))\n            }\n        }, {\n            title: '当期账面利润率',\n            key: 'qoqPaperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = this.getQoqPaperProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = this.getQoqPaperProfitPercent(a.entity)\n                let bpaperProfitPercent = this.getQoqPaperProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = InvestmentVMService.getPaperProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = InvestmentVMService.getPaperProfitPercent(a.entity)\n                let bpaperProfitPercent = InvestmentVMService.getPaperProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(InvestmentVMService.getPaperProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(InvestmentVMService.getPaperProfit(a.entity), InvestmentVMService.getPaperProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        },]\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.money) + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n    }\n\n    getQoqPaperProfit(entity) {\n        let lastMonthPaperProfit = InvestmentVMService.getPaperProfit(this._getLastMonthProductDetail(entity.info.productId))\n        // 当期账面利润\n        let paperProfit = InvestmentVMService.getPaperProfit(entity)\n        // 当期卖出所得利润\n        let sellProfit = DataUtil.safeGetNumber(entity.profits?.filterTotalMoney)\n        return sellProfit + paperProfit - lastMonthPaperProfit\n    }\n\n    //用这个月新增的账面利润 / 总投资额 得到这个月的收益率\n    getQoqPaperProfitPercent(entity) {\n        return MoneyUtil.safeDivision(this.getQoqPaperProfit(entity), entity?.buySells?.totalMoney)\n    }\n\n    _getLastMonthProductDetail(productId) {\n        for(let item of [this.lastMonthAllInvestData['fund'], this.lastMonthAllInvestData['stock'], \n            this.lastMonthAllInvestData['asset'], this.lastMonthAllInvestData['debt']]) {\n            if(productId in item['products']) {\n                return item['products'][productId]\n            }\n        }\n        return null\n    }\n\n    insertData(inputValues) {\n        try {\n            let money = InputWidget.getMoney(inputValues, \"money\")\n            let date = inputValues.date\n            let typeCode = this._praseTypeCode(inputValues.treeType)\n            IncomeExpenditureService.upsert(money,\n                IncomeExpenditureType.getByCode(typeCode), date, inputValues.desc ?? \"\")\n            this.refreshPage()\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    modifyIncomeOrExpend(inputValues) {\n        let detail = inputValues.extra\n        let typeCode = this._praseTypeCode(inputValues.treeType)\n        let desc = inputValues.desc ?? \"\"\n        IncomeExpenditureService.upsert(detail.money,\n            IncomeExpenditureType.getByCode(typeCode), detail.happenTime, desc, detail.id)\n        this.hideDialog()\n    }\n\n    addBuyInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let count = s.count\n        let happenTime = s.date\n        InvestmentService.addBuyInvest(productCode, productName, productTypeCode, count, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    addSellInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let count = s.count\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let currentProfit = InputWidget.getMoney(s, \"currentProfit\")\n        let sellProfit = InputWidget.getMoney(s, \"sellProfit\")\n        let happenTime = s.date\n        if (!DataUtil.notNumber(sellProfit)) {\n            InvestmentService.addSellInvestOfProfit(productCode, productName, productTypeCode, count, money, sellProfit, currentPrice, happenTime)\n        } else if (!DataUtil.notNumber(currentProfit)) {\n            InvestmentService.addSellInvest(productCode, productName, productTypeCode, count, money, currentPrice, currentProfit, happenTime)\n        } else {\n            message.error(\"卖出利润 或 账面利润 必须填写一个！\")\n            return false\n        }\n        this.refreshPage()\n        return true\n    }\n\n    addAssetDebtProfit(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let happenTime = s.date\n        InvestmentService.addAssetDebtProfit(productCode, productName, productTypeCode, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    deleteIncomeExpendDetail(id) {\n        IncomeExpenditureService.delete(id)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    getByMonthSideDatas() {\n        var months = SummaryService.queryMonths()\n        this.months = months\n        var map = {}\n        months.forEach(element => {\n            let year = element.substring(0, 4)\n            if (DataUtil.isNull(map[year])) {\n                map[year] = []\n            }\n            map[year].push(element)\n        })\n        return map\n    }\n\n    showDialog(key, extra) {\n        this.setState({\n            dialogKey: key,\n            dialogExtra: extra\n        })\n    }\n\n    addNewMoth(d) {\n        if (isNaN(d)) {\n            message.error(\"请输入有效月份，如 2022-5\")\n        } else {\n            if (this.months.includes(TimeUtil.monthStr(d))) {\n                message.error(\"已有当前月份\")\n                this.hideDialog()\n            } else {\n                SummaryService.addMonth(d)\n                this.state.sideKey = TimeUtil.monthStr(d)\n                this.hideDialog()\n            }\n        }\n    }\n\n    hideDialog() {\n        this.setState({\n            dialogKey: \"\",\n        })\n    }\n\n    render() {\n        let siderItems = []\n        let openKeys = []\n        let sideDatas = this.getByMonthSideDatas()\n        let lastMonth = null\n        siderItems = Object.keys(sideDatas).sort((a, b) => b > a ? 1 : -1).map((year, i) => {\n            openKeys.push(year)\n            return {\n                key: year,\n                label: year,\n                children: sideDatas[year].sort((a, b) => b > a ? 1 : -1).map((month, j) => {\n                    if (lastMonth == null) { lastMonth = month }\n                    return {\n                        key: month,\n                        label: month,\n                    };\n                }),\n            };\n        })\n        if (DataUtil.isNull(this.state.sideKey)) {\n            this.state.sideKey = lastMonth\n        }\n        this.monthDate = new Date(this.state.sideKey)\n        let currentMonthDate = this.monthDate\n        if (DataUtil.notNumber(currentMonthDate)) {\n            return <Content />\n        }\n        console.log(\"month page render \", currentMonthDate)\n        //处理一些类型数据\n        let incomeTypes = IncomeExpenditureVMService.getTypeTrees(UserConfigType.IncomeType, false)\n        let expendTypes = IncomeExpenditureVMService.getTypeTrees(UserConfigType.ExpenditureType, false)\n        let incomeTreeDatas = this._getTypeTreeSelectDatas(incomeTypes)\n        let expendTreeDatas = this._getTypeTreeSelectDatas(expendTypes)\n\n        let investProductCode2Name = {}, assetProductCode2Name = {}, debtProductCode2Name = {}\n        InvestmentService.queryProducts().forEach(entity => {\n            if (entity.type.isAsset()) {\n                assetProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else if (entity.type.isDebt()) {\n                debtProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else {\n                investProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            }\n        })\n        //处理收支数据\n        let incomeExpendData = []\n        let monthData = IncomeExpenditureVMService.queryMonthData(currentMonthDate)\n        let totalIncome = monthData['income']['total'], totalExpend = monthData['expend']['total']\n\n        //处理资产、负债、投资的一些总数据\n        let allInvestData = InvestmentVMService.queryMonthData(currentMonthDate)\n        let passiveIncomeSummary = this._getPassiveIncomeSummary(allInvestData)\n        let passiveExpendSummary = this._getPassiveExpendSummary(allInvestData)\n\n        console.log(\"===== monthData     =====\", monthData)\n        console.log(\"===== allInvestData =====\", allInvestData)\n\n        this.lastMonthAllInvestData = InvestmentVMService.queryMonthData(TimeUtil.lastMonthEnd(currentMonthDate))\n\n        let currentMonthTotalMoney = this._getTotalMoney(allInvestData)\n        let lastMonthTotalMoney = this._getTotalMoney(this.lastMonthAllInvestData)\n        let currentMonthAddMoney = totalIncome + totalExpend + passiveIncomeSummary['total'] + passiveExpendSummary['total']\n\n        incomeExpendData.push({key: \"主动收入\", entity: this.newEntity(null, \"主动收入\", totalIncome, null, monthData['income']['details'])})    \n        incomeExpendData.push({key: \"被动收入\", entity: this.newEntity(null, \"被动收入\",  passiveIncomeSummary['total'], \n            null, passiveIncomeSummary['details'])})\n        incomeExpendData.push({key: \"主动支出\", entity: this.newEntity(null, \"主动支出\", totalExpend, null, monthData['expend']['details'])})\n        incomeExpendData.push({key: \"被动支出\", entity: this.newEntity(null, \"被动支出\", passiveExpendSummary['total'], \n            null, passiveExpendSummary['details'])})\n        incomeExpendData.push({key: \"新增现金\", entity: this.newEntity(null, \"新增现金\", currentMonthAddMoney, \n            null)})\n        incomeExpendData.push({key: \"上期总资产\", entity: this.newEntity(null, \"上期总资产\", lastMonthTotalMoney, \n            null)})\n\n        let totalMoneyEntitys = []\n        totalMoneyEntitys.push(this.newEntity(null, \"资产总额\", allInvestData['asset']['totalMoneys'][0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"负债总额\", allInvestData['debt']['totalMoneys'][0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"投资总额\", allInvestData['fund']['totalMoneys'][1], `账面价值：${MoneyUtil.getStr(allInvestData['fund']['totalMoneys'][0])}`))\n        totalMoneyEntitys.push(this.newEntity(null, \"股票总额\", allInvestData['stock']['totalMoneys'][1], `账面价值：${MoneyUtil.getStr(allInvestData['stock']['totalMoneys'][0])}`))\n        incomeExpendData.push({key: \"当前总资产\", entity: this.newEntity(null, \"当前总资产\", currentMonthTotalMoney, \n            null, totalMoneyEntitys)})\n\n        let subIncomeExpendRowRender = (record, index) => {\n            const data = [];\n            record.entity.child.forEach(ele => {\n                data.push({\n                    key: DataUtil.isNull(ele.id) ? ele.title : ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subIncomeExpendColumns} dataSource={data} pagination={false} sortDirections={['descend']}/>;\n        }\n        let subIncomeExpendRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.child) &&\n                record.entity.child.length > 0\n        }\n\n        //处理资产、负债、投资的表格数据\n        let fundData = this._mapToList(allInvestData['fund']['products'], true)\n        let stockData = this._mapToList(allInvestData['stock']['products'], true)\n        let assetDebtDatas = []\n        assetDebtDatas.push(...this._mapToList(allInvestData['asset']['products']),\n            ...this._mapToList(allInvestData['debt']['products']))\n\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.filterDatas.forEach(ele => {\n                for (let profit of record.entity.profits?.filterDatas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.filterDatas) &&\n                record.entity.buySells?.filterDatas.length > 0\n        }\n        let subAssetDebtRowRender = (record, index) => {\n            const data = [];\n            record.entity.profits.filterDatas.forEach(ele => {\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subAssetDebtColumns} dataSource={data} pagination={false} />;\n        }\n        let subAssetDebtRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.profits?.filterDatas) &&\n                record.entity.profits?.filterDatas.length > 0\n        }\n\n        let contentView = <Content className='Content'>\n                <Row>\n                    <Divider orientation=\"center\">使用步骤</Divider>\n                    <Space direction='vertical'>\n                        <Text>1. 还清各资产账户的借款（信用卡），记录资产现额</Text>\n                        <Text>2. 记录 支付宝/微信 当月的 收入/支出</Text>\n                        <Text>3. 记录 基金/股票 的 当月 买入/卖出 操作和当前现额等信息</Text>\n                        <Text>4. 检查 总资产环比误差 信息（大于0表示：收入少了/支出多了/当前总资产多了），尽量保持500以下</Text>\n                    </Space>\n                </Row>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">新增收入/支出</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"收入\" cfgs={[{\n                            name: \"treeType\",\n                            treeData: incomeTreeDatas,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }, {\n                            name: \"desc\",\n                            type: \"input\"\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                        <InputWidget title=\"支出\" cfgs={[{\n                            name: \"treeType\",\n                            treeData: expendTreeDatas,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }, {\n                            name: \"desc\",\n                            type: \"input\"\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.incomeExpendColumns} dataSource={incomeExpendData}\n                            expandable={{\n                                expandedRowRender: subIncomeExpendRowRender,\n                                rowExpandable: subIncomeExpendRowExpandable\n                            }} pagination={{ pageSize: 20 }} sortDirections={['descend']} />\n                        <Divider orientation=\"center\">指标</Divider>\n                        {UIUtils.createShowTextRow(\"被动收入/支出（财富自由率）\", DataUtil.getPercent(passiveIncomeSummary['total'] / Math.abs(totalExpend + passiveExpendSummary['total'])))}\n                        {UIUtils.createShowTextRow(\"被动收入/主动收入\", DataUtil.getPercent(passiveIncomeSummary['total'] / totalIncome))}\n                        {this.createShowMoneyRowIfBiggerThan(\"总资产环比误差\", currentMonthTotalMoney - lastMonthTotalMoney - currentMonthAddMoney, [500, 1000])}\n                    </Col>\n                </Row>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">资产/负债</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"资产\" cfgs={[{\n                            name: \"type\",\n                            code2Name: assetProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            type: \"money\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"收益\",\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n\n                        <InputWidget title=\"负债\" cfgs={[{\n                            name: \"type\",\n                            code2Name: debtProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            type: \"money\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"money\",\n                            hint: \"亏损\",\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.assetDebtColumns} dataSource={assetDebtDatas}\n                            expandable={{\n                                expandedRowRender: subAssetDebtRowRender,\n                                rowExpandable: subAssetDebtRowExpandable\n                            }} pagination={{ pageSize: 20 }} scroll={{ x: 800 }} sortDirections={['descend']} />\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">投资</Divider>\n                    <Col span={10}>\n                        <InputWidget title=\"买入投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            hint: \"花费金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            type: \"money\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"count\",\n                            type: \"money\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addBuyInvest(s)\n                        }} />\n                    </Col>\n                    <Col span={14}>\n                    <InputWidget title=\"卖出投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"count\",\n                            type: \"money\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"卖出所得金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"sellProfit\",\n                            type: \"money\",\n                            hint: \"卖出利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            type: \"money\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentProfit\",\n                            type: \"money\",\n                            hint: \"账面利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addSellInvest(s)\n                        }} />\n                    </Col>\n                </Row>\n                <Table columns={this.investColumns} dataSource={stockData} expandable={{\n                            expandedRowRender: subInvestRowRender,\n                            rowExpandable: subInvestRowExpandable\n                        }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n                <Table columns={this.investColumns} dataSource={fundData} expandable={{\n                            expandedRowRender: subInvestRowRender,\n                            rowExpandable: subInvestRowExpandable\n                        }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n            </Content>\n        \n        return <Layout>\n                    <Sider width={200}>\n                        <Menu\n                            className='Menu'\n                            mode=\"inline\"\n                            openKeys={openKeys}\n                            selectedKeys={[this.state.sideKey]}\n                            items={siderItems}\n                            onSelect={(item) => {\n                                this.setState(() => this.state.sideKey = item.key)\n                            }}\n                        />\n                    </Sider>\n                    <Layout className='Layout-inner'>\n                        <Row align='middle'>\n                            <Col flex=\"auto\">\n                                <Breadcrumb>\n                                    <Breadcrumb.Item>{this.state.sideKey}</Breadcrumb.Item>\n                                </Breadcrumb>\n                            </Col>\n                            <Col span={12} align='right'>\n                                <Button onClick={() => this.showDialog(\"addNewMonth\", null)}>新加月份</Button>\n                            </Col>\n                        </Row>\n                        {contentView}\n                    </Layout>\n                    <CusDialog title=\"新加月份\" visible={this.state.dialogKey === \"addNewMonth\"}\n                        cfgs={[{\n                            name: \"date\",\n                            hint: \"月份\",\n                            picker: \"month\",\n                            defaultValue: new Date()\n                        }]}\n                        onOk={(state) => this.addNewMoth(state.date)}\n                        onCancel={() => this.hideDialog()} />\n                    <CusDialog title=\"修改收入/支出\" visible={this.state.dialogKey === \"modifyIncomeOrExpend\"}\n                        key={this.state.dialogExtra?.id}\n                        cfgs={[{\n                            name: \"treeType\",\n                            required: true,\n                            treeData: this.state.dialogExtra?.type.isIncome() ? incomeTreeDatas : expendTreeDatas,\n                            defaultValue: this._getTypeTreeCode(this.state.dialogExtra?.type)\n                        }, {\n                            name: \"desc\",\n                            type: \"input\",\n                            required: false,\n                            defaultValue: this.state.dialogExtra?.desc\n                        }]}\n                        extra={this.state.dialogExtra}\n                        onOk={(state) => this.modifyIncomeOrExpend(state)}\n                        onCancel={() => this.hideDialog()} />\n                </Layout>\n    }\n\n    /**\n     * @param {IncomeExpenditureType} type \n     */\n    _getTypeTreeCode(type) {\n        if(DataUtil.isNull(type)) {\n            return null\n        }\n        return type.code + \"___\" + type.name\n    }\n\n    _praseTypeCode(treeCode) {\n        return parseInt(treeCode.split('___')[0])\n    }\n\n    _getTypeTreeSelectDatas(typesTree) {\n        let result = []\n        for (const type of typesTree) {\n            let group = {\n                \"title\": type.entity.name,\n                // 为了能够搜索，所以在 value 里面拼上 name\n                \"value\": this._getTypeTreeCode(type.entity),\n                \"children\": []\n            }\n            for (const child of type.childs) {\n                group.children.push({\n                    \"title\": child.entity.name,\n                    \"value\": this._getTypeTreeCode(child.entity)\n                })\n            }\n            result.push(group)\n        }\n        return result\n    }\n\n    createShowMoneyRowIfBiggerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney > valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney > valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return UIUtils.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRowIfSmallerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney < valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney < valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return UIUtils.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRow(title, money) {\n        return UIUtils.createShowTextRow(title, MoneyUtil.getStr(money), \"\")\n    }\n\n    newEntity(happenTime, title, money, desc, child=[]) {\n        return {\n            happenTime: happenTime,\n            title: title,\n            money: money,\n            desc: desc,\n            child: child\n        }\n    }\n\n    _getTotalMoney(allInvestData) {\n        let totalAssetMoneys = allInvestData['asset']['totalMoneys']\n        let totalFundMoneys = allInvestData['fund']['totalMoneys']\n        let totalStockMoneys = allInvestData['stock']['totalMoneys']\n        let totalDebtMoneys = allInvestData['debt']['totalMoneys']\n        return totalAssetMoneys[0] + totalDebtMoneys[0] + totalFundMoneys[1] + totalStockMoneys[1]\n    }\n\n    _mapToList(productMap, filter=false) {\n        let arr = []\n        for (let productId of Object.keys(productMap)) {\n            let detail = productMap[productId]\n            if(filter && MoneyUtil.noValue(detail.currentPrice?.money) && MoneyUtil.noValue(detail.profits?.filterTotalMoney) && \n                MoneyUtil.noValue(detail.buySells?.filterMoney) && MoneyUtil.noValue(detail.buySells?.totalMoney)) {\n                //四个值全没有，不展示\n            } else {\n                arr.push({ key: productId, entity: detail })\n            }\n        }\n        return arr\n    }\n\n    _getProductsProfitEntitys(products) {\n        if(DataUtil.isEmpty(products)) {\n            return []\n        }\n        let profitEntitys = []\n        Object.keys(products).map(productId => {\n            let product = products[productId]\n            let filterDatas = product.profits?.filterDatas\n            if(!DataUtil.isNull(filterDatas)) {\n                for(let data of filterDatas) {\n                    profitEntitys.push(this.newEntity(data.happenTime, data.productName, data.money, null))\n                }\n            }\n        })\n        return profitEntitys\n    }\n\n    _getPassiveIncomeSummary(yearInvestData) {\n        let assetData = yearInvestData['asset']\n        let fundData = yearInvestData['fund']\n        let stockData = yearInvestData['stock']\n        let details = []\n        details.push(...this._getProductsProfitEntitys(assetData['products']),\n                 ...this._getProductsProfitEntitys(fundData['products']),\n                 ...this._getProductsProfitEntitys(stockData['products']))\n        return {\n            'total': assetData['totalProfitMoneys'][1] + fundData['totalProfitMoneys'][1] \n                + stockData['totalProfitMoneys'][1],\n            'details': details\n        }\n    }\n\n    _getPassiveExpendSummary(yearInvestData) {\n        let debtData = yearInvestData['debt']\n        let details = []\n        details.push(...this._getProductsProfitEntitys(debtData['products']))\n        return {\n            'total': debtData['totalProfitMoneys'][1],\n            'details': details\n        }\n    }\n}\n\nexport default MonthPage","import { Layout, Typography } from \"antd\";\nimport React from 'react';\n\nconst { Content } = Layout;\nconst { Text } = Typography;\n\nclass TodoPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <Content className='Content'>\n                <Text style={{fontSize: '50px'}}> TODO </Text>\n            </Content>\n        )\n    }\n}\n\nexport default TodoPage","import { Col, Divider, Layout, Row, Space, Table, Typography } from 'antd';\nimport React from 'react';\nimport { App } from '../../app';\nimport { UserConfigStatus, UserConfigType } from '../../domain/entity/user_entity';\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service';\nimport { IncomeExpenditureVMService } from '../../domain/service/view_model_service';\nimport { DataUtil } from '../../utils/utils';\nimport { CusDialog } from './widget/cus_dialog';\n\nconst { Content } = Layout;\nconst { Text } = Typography;\n\nclass UserPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n        this.incomeExpendColumns = [\n            // {\n            //     title: 'Code',\n            //     key: 'code',\n            //     dataIndex: 'entity',\n            //     render: (entity) => {\n            //         return <Text disabled={!entity.isEnable()}>{entity.code}</Text>\n            //     },\n            // },\n            {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text disabled={!entity.isEnable()}>{entity.name}</Text>\n                },\n            }, {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={() => {\n                            this.showModifyTypeDialog('updateType', record.entity)\n                        }}>编辑</a>\n                        <a disabled={!record.entity.isEnable()} onClick={() => {\n                            if (record.entity.isEnable()) {\n                                this.showModifyTypeDialog('addType', record.entity)\n                            }\n                        }}>新增</a>\n                    </Space>\n                ),\n            }];\n\n        this.subIncomeExpendColumns = [\n            // {\n            //     title: '子类型Code',\n            //     key: 'code',\n            //     dataIndex: 'entity',\n            //     render: (entity) => {\n            //         return <Text disabled={!entity.isEnable()}>{entity.code}</Text>\n            //     },\n            // },\n            {\n                title: '子类型名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text disabled={!entity.isEnable()}>{entity.name}</Text>\n                },\n            }, {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={() => {\n                            this.showModifyTypeDialog('updateType', record.entity)\n                        }}>编辑</a>\n                    </Space>\n                ),\n            }]\n    }\n\n    showModifyTypeDialog(key, type) {\n        this.setState({\n            dialogKey: key,\n            dialogExtra: type\n        })\n    }\n\n    hideDialog() {\n        this.setState({\n            dialogKey: null,\n            dialogExtra: null\n        })\n    }\n\n    modifyType(key, data) {\n        console.log(key, data)\n        let type = data.extra\n        let enable = data.switch\n        let newName = data.desc\n        let newParentCode = parseInt(data.type)\n        if (newParentCode == 0) {\n            newParentCode = null\n        }\n        if (key === 'updateType') {\n            IncomeExpenditureService.updateType(type, newName, newParentCode, enable ? UserConfigStatus.Normal : UserConfigStatus.Disabled)\n        } else if (key === 'addType') {\n            IncomeExpenditureService.addType(type.config.type, newName, newParentCode, enable ? UserConfigStatus.Normal : UserConfigStatus.Disabled)\n        }\n        this.hideDialog()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    render() {\n        let incomeTypes = IncomeExpenditureVMService.getTypeTrees(UserConfigType.IncomeType, true)\n        let expendTypes = IncomeExpenditureVMService.getTypeTrees(UserConfigType.ExpenditureType, true)\n        let subIncomeExpendRowRender = (record, index) => {\n            return <Table columns={this.subIncomeExpendColumns} dataSource={record.childs} pagination={false} />;\n        }\n        let subIncomeExpendRowExpandable = (record) => {\n            return !DataUtil.isNull(record.childs) && record.childs.length > 0\n        }\n        let topIncomeCodeToName = {}\n        let topExpendCodeToName = {}\n        for (const type of incomeTypes) {\n            topIncomeCodeToName[type.entity.code] = [type.entity.name]\n        }\n        topIncomeCodeToName[\"0\"] = [\"空\"]\n        for (const type of expendTypes) {\n            topExpendCodeToName[type.entity.code] = [type.entity.name]\n        }\n        topExpendCodeToName[\"0\"] = [\"空\"]\n        let dialogTitle = \"\"\n        let dialogVisible = false\n        if (this.state.dialogKey === \"updateType\") {\n            dialogVisible = true\n            dialogTitle = \"编辑类型\"\n        } else if (this.state.dialogKey === \"addType\") {\n            dialogVisible = true\n            dialogTitle = \"新增类型\"\n        }\n        return (\n            <Content className='Content'>\n                <Divider orientation=\"center\">DB版本：{App.db?.getDbConfig()['db_version']}</Divider>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Col span={12}>\n                        <Divider orientation=\"center\">收入类型配置</Divider>\n                        <Table style={{ margin: \"0px 5px\" }} columns={this.incomeExpendColumns} dataSource={incomeTypes} expandable={{\n                            expandedRowRender: subIncomeExpendRowRender,\n                            rowExpandable: subIncomeExpendRowExpandable\n                        }} pagination={{ pageSize: 50 }} sortDirections={['descend']} />\n                    </Col>\n                    <Col span={12}>\n                        <Divider orientation=\"center\">支出类型配置</Divider>\n                        <Table columns={this.incomeExpendColumns} dataSource={expendTypes} expandable={{\n                            expandedRowRender: subIncomeExpendRowRender,\n                            rowExpandable: subIncomeExpendRowExpandable\n                        }} pagination={{ pageSize: 50 }} sortDirections={['descend']} />\n                    </Col>\n                </Row>\n                <CusDialog title={dialogTitle} visible={dialogVisible}\n                    key={this.state.dialogExtra?.code}\n                    cfgs={[{\n                        name: \"type\",\n                        hint: \"父类型\",\n                        required: true,\n                        code2Name: this.state.dialogExtra?.isIncome() ? topIncomeCodeToName : topExpendCodeToName,\n                        defaultValue: this.state.dialogKey === \"addType\" ? (this.state.dialogExtra?.config.code ?? 0) + '' :\n                            (this.state.dialogExtra?.config.parent_code ?? 0) + ''\n                    }, {\n                        name: \"desc\",\n                        type: \"input\",\n                        hint: \"名称\",\n                        required: true,\n                        defaultValue: this.state.dialogExtra?.name\n                    }, {\n                        name: \"switch\",\n                        hint: \"是否启用\",\n                        required: true,\n                        defaultValue: this.state.dialogExtra?.isEnable()\n                    }]}\n                    extra={this.state.dialogExtra}\n                    onOk={(state) => this.modifyType(this.state.dialogKey, state)}\n                    onCancel={() => this.hideDialog()} />\n            </Content>\n        )\n    }\n}\n\nexport default UserPage","import { Column, Pie, measureTextWidth } from '@ant-design/plots';\nimport { Breadcrumb, Button, Col, Divider, Layout, Menu, Row, Table, Tag, Typography, message } from \"antd\";\nimport React from 'react';\nimport { IncomeExpenditureType } from '../../domain/entity/income_expenditure';\nimport { SummaryService } from '../../domain/service/summary_service';\nimport { IncomeExpenditureVMService, InvestmentVMService } from '../../domain/service/view_model_service';\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport { UIUtils } from '../ui_utils';\nimport { CusDialog } from './widget/cus_dialog';\n\nconst { Content, Sider } = Layout;\nconst { Text } = Typography;\n\nclass YearPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            \"startMonth\": \"01\"\n        }\n\n        this.incomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.title === '主动收入' || entity.title === '被动收入') {\n                    color = 'red'\n                } else if (entity.title === '主动支出' || entity.title === '被动支出') {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.title}>\n                    {entity.title}\n                </Tag>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            }\n        }]\n        this.subIncomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.title}</Text>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.money, b.entity.money)\n        }, {\n            title: '描述',\n            key: 'desc',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.desc}</Text>\n            },\n        },]\n\n        this.assetDebtColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '总额',\n            key: 'currentPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n        }]\n        this.subAssetDebtColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        },]\n\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.filterSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.filterSellMoney, b.entity.buySells?.filterSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = InvestmentVMService.getSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = InvestmentVMService.getSellProfitPercent(a.entity)\n                let bsellProfitPercent = InvestmentVMService.getSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n            }\n        }, {\n            title: '当期投资',\n            key: 'timeInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.filterMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.filterMoney, b.entity.buySells?.filterMoney)\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = InvestmentVMService.getPaperProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = InvestmentVMService.getPaperProfitPercent(a.entity)\n                let bpaperProfitPercent = InvestmentVMService.getPaperProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(InvestmentVMService.getPaperProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(InvestmentVMService.getPaperProfit(a.entity), InvestmentVMService.getPaperProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        },]\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.money) + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        },]\n    }\n\n    getByYearSideDatas(monthStr = \"01\") {\n        var months = SummaryService.queryMonths()\n        this.months = months\n        var items = []\n        months.forEach(element => {\n            let year = element.substring(0, 4)\n            let startMonth = year + \"-\" + monthStr\n            if (!items.includes(startMonth)) {\n                items.push(startMonth)\n            }\n        })\n        return items.sort((a, b) => b > a ? 1 : -1)\n    }\n\n    showDialog(type) {\n        this.setState({\n            showDialog: type,\n        })\n    }\n\n    modifyMonth(d) {\n        if (isNaN(d)) {\n            message.error(\"请输入有效月份，如 2022-5\")\n        } else {\n            this.state.startMonth = TimeUtil.monthStr(d).substring(5, 7)\n            this.state.sideKey = null\n            this.hideDialog()\n        }\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n        })\n    }\n\n    getAggregateGroupDataArr(details) {\n        let dataMap = {}\n        let total = 0\n        for(let detail of details) {\n            let type = IncomeExpenditureType.getByCode(detail.type.code)\n            type = type.getGroup()\n            if(!(type.code in dataMap)) {\n                dataMap[type.code] = {\n                    \"name\": type.name,\n                    \"code\": type.code,\n                    \"value\": 0\n                }\n            }\n            let money = Math.abs(detail.money/100)\n            dataMap[type.code]['value'] += money\n            total += money\n        }\n        let dataArr = Object.keys(dataMap).map(code => {\n            dataMap[code]['valuePercent'] = dataMap[code]['value']/total\n            return dataMap[code]\n        }).sort((a, b) => DataUtil.compare(a.code, b.code))\n        return dataArr\n    }\n\n    getAggregateTimeDataArr(details, groupCode) {\n        let dataMap = {}\n        let total = 0\n        for(let detail of details) {\n            let type = IncomeExpenditureType.getByCode(detail.type.code)\n            let groupType = type.getGroup()\n            if(groupCode === groupType.code) {\n                let key = TimeUtil.monthStr(detail.happenTime) + \"_\" + type.code\n                if(!(key in dataMap)) {\n                    dataMap[key] = {\n                        \"name\": type.name,\n                        \"code\": type.code,\n                        \"groupCode\": groupType.code,\n                        \"groupName\": groupType.name,\n                        \"month\": TimeUtil.monthStr(detail.happenTime),\n                        \"value\": 0\n                    }\n                }\n                let money = Math.abs(detail.money/100)\n                dataMap[key]['value'] += money\n                total += money\n            }\n        }\n        let dataArr = Object.keys(dataMap).map(key => {\n            dataMap[key]['valuePercent'] = dataMap[key]['value']/total\n            return dataMap[key]\n        }).sort((a, b) => {\n            if(a.month == b.month) {\n                return DataUtil.compare(a.code, b.code)\n            } else {\n                return a.month > b.month ? 1 : -1\n            }\n        })\n        return dataArr\n    }\n\n    render() {\n        let sideDatas = this.getByYearSideDatas(this.state.startMonth)\n        let siderItems = sideDatas.map((yearStartMonth, i) => {\n            return {\n                key: yearStartMonth,\n                label: yearStartMonth\n            }\n        })\n        if (DataUtil.isNull(this.state.sideKey)) {\n            this.state.sideKey = sideDatas[0]\n        }\n        let yearStartMonthDate = new Date(this.state.sideKey)\n\n        let yearData = IncomeExpenditureVMService.queryYearData(yearStartMonthDate)\n        let allInvestData = InvestmentVMService.queryYearData(yearStartMonthDate)\n        console.log(\"===== yearData     =====\", yearData)\n        console.log(\"===== allInvestData =====\", allInvestData)\n\n        let passiveIncomeSummary = this._getPassiveIncomeSummary(allInvestData)\n        let passiveExpendSummary = this._getPassiveExpendSummary(allInvestData)\n\n        let incomeExpendData = []\n        incomeExpendData.push({\n            key: \"主动收入\", entity: this.newEntity(null, \"主动收入\",\n                yearData['income']['total'], null, yearData['income']['sumByMonth'].map(it => {\n                    return this.newEntity(null, it['month'], it['total'], null)\n                }))\n        })\n        incomeExpendData.push({\n            key: \"被动收入\", entity: this.newEntity(null, \"被动收入\",\n                passiveIncomeSummary['total'], null, passiveIncomeSummary['details'])\n        })\n        incomeExpendData.push({\n            key: \"主动支出\", entity: this.newEntity(null, \"主动支出\",\n                yearData['expend']['total'], null, yearData['expend']['sumByMonth'].map(it => {\n                    return this.newEntity(null, it['month'], it['total'], null)\n                }))\n        })\n        incomeExpendData.push({\n            key: \"被动支出\", entity: this.newEntity(null, \"被动支出\",\n                passiveExpendSummary['total'], null, passiveExpendSummary['details'])\n        })\n        incomeExpendData.push({\n            key: \"新增现金\", entity: this.newEntity(null, \"新增现金\",\n                yearData['income']['total'] + passiveIncomeSummary['total'] +\n                yearData['expend']['total'] + passiveExpendSummary['total'], null)\n        })\n\n        let subIncomeExpendRowRender = (record, index) => {\n            const data = [];\n            record.entity.child.forEach(ele => {\n                data.push({\n                    key: DataUtil.isNull(ele.id) ? ele.title : ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subIncomeExpendColumns} dataSource={data} pagination={false} sortDirections={['descend']} />;\n        }\n        let subIncomeExpendRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.child) &&\n                record.entity.child.length > 0\n        }\n        let fundData = this._mapToList(allInvestData['fund']['products'], true)\n        let stockData = this._mapToList(allInvestData['stock']['products'], true)\n        let assetDebtDatas = []\n        assetDebtDatas.push(...this._mapToList(allInvestData['asset']['products']),\n            ...this._mapToList(allInvestData['debt']['products']))\n\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.filterDatas.forEach(ele => {\n                for (let profit of record.entity.profits?.filterDatas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.filterDatas) &&\n                record.entity.buySells?.filterDatas.length > 0\n        }\n        let subAssetDebtRowRender = (record, index) => {\n            const data = [];\n            record.entity.profits.filterDatas.forEach(ele => {\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subAssetDebtColumns} dataSource={data} pagination={false} />;\n        }\n        let subAssetDebtRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.profits?.filterDatas) &&\n                record.entity.profits?.filterDatas.length > 0\n        }\n\n        let incomeGroupDataArr = this.getAggregateGroupDataArr(yearData.income.details)\n        let expendGroupDataArr = this.getAggregateGroupDataArr(yearData.expend.details)\n        \n        let barData = []\n        if(!DataUtil.isNull(this.state.selectedGroupCode)) {\n            let groupType = IncomeExpenditureType.getByCode(this.state.selectedGroupCode)\n            if(groupType.isIncome()) {\n                barData = this.getAggregateTimeDataArr(yearData.income.details, groupType.code)\n            } else {\n                barData = this.getAggregateTimeDataArr(yearData.expend.details, groupType.code)\n            }\n        }\n\n        let contentView = <Content>\n            <Table columns={this.incomeExpendColumns} dataSource={incomeExpendData}\n                expandable={{\n                    expandedRowRender: subIncomeExpendRowRender,\n                    rowExpandable: subIncomeExpendRowExpandable\n                }} pagination={{ pageSize: 20 }} sortDirections={['descend']} />\n            <Row>\n                <Col span={12}>\n                    <Pie {...this._getPieConfig(incomeGroupDataArr)} />\n                </Col>\n                <Col span={12}>\n                    <Pie {...this._getPieConfig(expendGroupDataArr)} />\n                </Col>\n            </Row>\n            <Row style={{ padding: '10px'}}>\n                <Col span={24}>\n                    {barData.length > 0 ? <Column {...this._getBarConfig(barData)} /> : <div/>}\n                </Col>\n            </Row>\n            <Divider orientation=\"center\">指标</Divider>\n            {UIUtils.createShowTextRow(\"被动收入/支出（财富自有率）\", DataUtil.getPercent(passiveIncomeSummary['total'] /\n                Math.abs(yearData['expend']['total'] + passiveExpendSummary['total'])))}\n            {UIUtils.createShowTextRow(\"被动收入/主动收入\", DataUtil.getPercent(passiveIncomeSummary['total'] / yearData['income']['total']))}\n            <Divider orientation=\"center\">资产/负债</Divider>\n            <Table columns={this.assetDebtColumns} dataSource={assetDebtDatas}\n                expandable={{\n                    expandedRowRender: subAssetDebtRowRender,\n                    rowExpandable: subAssetDebtRowExpandable\n                }} pagination={{ pageSize: 20 }} scroll={{ x: 800 }} sortDirections={['descend']} />\n            <Divider orientation=\"center\">投资</Divider>\n            <Table columns={this.investColumns} dataSource={stockData} expandable={{\n                expandedRowRender: subInvestRowRender,\n                rowExpandable: subInvestRowExpandable\n            }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n            <Table columns={this.investColumns} dataSource={fundData} expandable={{\n                expandedRowRender: subInvestRowRender,\n                rowExpandable: subInvestRowExpandable\n            }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n        </Content>\n\n        return <Layout>\n            <Sider width={200}>\n                <Menu\n                    className='Menu'\n                    mode=\"inline\"\n                    selectedKeys={[this.state.sideKey]}\n                    items={siderItems}\n                    onSelect={(item) => {\n                        this.setState(() => this.state.sideKey = item.key)\n                    }}\n                />\n            </Sider>\n            <Layout className='Layout-inner'>\n                <Row align='middle'>\n                    <Col flex=\"auto\">\n                        <Breadcrumb>\n                            <Breadcrumb.Item>{this.state.sideKey}</Breadcrumb.Item>\n                        </Breadcrumb>\n                    </Col>\n                    <Col span={12} align='right'>\n                        <Button onClick={() => this.showDialog(\"modifyStartMonth\")}>调整开始月份</Button>\n                    </Col>\n                </Row>\n                {contentView}\n            </Layout>\n            <CusDialog title=\"调整开始月份\" visible={this.state.showDialog === \"modifyStartMonth\"}\n                cfgs={[{\n                    name: \"date\",\n                    hint: \"月份\",\n                    picker: \"month\",\n                    defaultValue: new Date('2022-01')\n                }]}\n                onOk={(state) => this.modifyMonth(state.date)}\n                onCancel={() => this.hideDialog()} />\n        </Layout>\n    }\n\n    _getBarConfig(barData) {\n        const config = {\n            data: barData,\n            xField: 'month',\n            yField: 'value',\n            isGroup: true,\n            isStack: true,\n            seriesField: 'name',\n            groupField: 'groupName',\n            label: {\n                position: 'middle',\n                style: {\n                  fill: 'black',\n                  textAlign: 'center',\n                },\n                formatter: (item) => {\n                  return item.name + \": \" + MoneyUtil.getPercentStr(item.valuePercent)\n                },\n            },\n            tooltip: {\n                formatter: (datum) => ({\n                  name: `${datum.name}`,\n                  value: `${MoneyUtil.getStr(datum.value, true)}`,\n                }),\n            },\n        };\n        return config\n    }\n\n    _getPieConfig(dataArr) {\n        function renderStatistic(containerWidth, text, style) {\n            const { width: textWidth, height: textHeight } = measureTextWidth(text, style);\n            const R = containerWidth / 2; // r^2 = (w / 2)^2 + (h - offsetY)^2\n            let scale = 1;\n            if (containerWidth < textWidth) {\n              scale = Math.min(Math.sqrt(Math.abs(Math.pow(R, 2) / (Math.pow(textWidth / 2, 2) + Math.pow(textHeight, 2)))), 1);\n            }\n            const textStyleStr = `width:${containerWidth}px;`;\n            return `<div style=\"${textStyleStr};font-size:${scale}em;line-height:${scale < 1 ? 1 : 'inherit'};\">${text}</div>`;\n        }\n    \n        const config = {\n            appendPadding: 10,\n            data: dataArr,\n            angleField: 'valuePercent',\n            colorField: 'name',\n            radius: 1,\n            innerRadius: 0.618,\n            label: {\n              type: 'inner',\n              offset: '-50%',\n              style: {\n                fill: 'black',\n                textAlign: 'center',\n              },\n              formatter: (item) => {\n                return item.name + \": \" + MoneyUtil.getPercentStr(item.valuePercent)\n              },\n              autoRotate: false,\n            },\n            statistic: {\n              title: {\n                offsetY: -4,\n                customHtml: (container, view, datum) => {\n                  const { width, height } = container.getBoundingClientRect();\n                  const d = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2));\n                  const text = datum ? datum.name : '总计';\n                  return renderStatistic(d, text, {\n                    fontSize: 28,\n                  });\n                },\n              },\n              content: {\n                offsetY: 4,\n                customHtml: (container, view, datum, data) => {\n                  const { width } = container.getBoundingClientRect();\n                  const text = datum ? `${MoneyUtil.getStr(datum.value, true)}` \n                    : `${MoneyUtil.getStr(data.reduce((r, d) => r + d.value, 0), true)}`;\n                  return renderStatistic(width, text, {\n                    fontSize: 32,\n                  });\n                },\n              },\n            },\n            // 添加 中心统计文本 交互\n            interactions: [{\n                type: 'element-selected',\n              },{\n                type: 'element-active',\n              },{\n                type: 'pie-statistic-active',\n              },],\n            onReady:(plot) => {\n                plot.on('element:click', (event) => {\n                    this.setState({\n                        selectedGroupCode: event.data.data.code\n                    })\n                })\n            }\n        };\n        return config\n    }\n\n    newEntity(happenTime, title, money, desc, child = []) {\n        return {\n            happenTime: happenTime,\n            title: title,\n            money: money,\n            desc: desc,\n            child: child\n        }\n    }\n\n    _mapToList(productMap, filter = false) {\n        let arr = []\n        for (let productId of Object.keys(productMap)) {\n            let detail = productMap[productId]\n            if (filter && MoneyUtil.noValue(detail.currentPrice?.money) && MoneyUtil.noValue(detail.profits?.filterTotalMoney) &&\n                MoneyUtil.noValue(detail.buySells?.filterMoney) && MoneyUtil.noValue(detail.buySells?.totalMoney)) {\n                //四个值全没有，不展示\n            } else {\n                arr.push({ key: productId, entity: detail })\n            }\n        }\n        return arr\n    }\n\n    _getPassiveIncomeSummary(yearInvestData) {\n        let assetData = yearInvestData['asset']\n        let fundData = yearInvestData['fund']\n        let stockData = yearInvestData['stock']\n        return {\n            'total': assetData['totalProfitMoneys'][1] + fundData['totalProfitMoneys'][1]\n                + stockData['totalProfitMoneys'][1],\n            'details': [\n                this.newEntity(null, '资产收入', assetData['totalProfitMoneys'][1]),\n                this.newEntity(null, '投资收入', fundData['totalProfitMoneys'][1]),\n                this.newEntity(null, '股票收入', stockData['totalProfitMoneys'][1]),\n            ]\n        }\n    }\n\n    _getPassiveExpendSummary(yearInvestData) {\n        let debtData = yearInvestData['debt']\n        return {\n            'total': debtData['totalProfitMoneys'][1],\n            'details': [\n                this.newEntity(null, '负债支出', debtData['totalProfitMoneys'][1]),\n            ]\n        }\n    }\n}\n\nexport default YearPage","import { Button, Divider, Row, Table, Tag, Typography } from \"antd\"\nimport { Content } from 'antd/lib/layout/layout'\nimport React from 'react'\nimport { App } from '../../app'\nimport { IncomeExpenditureVMService, InvestmentVMService } from '../../domain/service/view_model_service'\n\nconst { Text } = Typography\n\nclass TestPage extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {}\n\t\tthis.testResults = []\n\t\tthis.group = 'default'\n\t\tthis.resultColumns = [{\n            title: 'id',\n            key: 'id',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.id}</Text>\n            }\n        }, {\n            title: 'success',\n            key: 'success',\n            dataIndex: 'entity',\n            render: (entity) => {\n\t\t\t\tlet color = 'green'\n                if (!entity.success) {\n                    color = 'red'\n                }\n                return <Tag color={color}>\n                    {entity.success ? \"Success\":\"Fail\"}\n                </Tag>\n            }\n        }, {\n            title: 'group',\n            key: 'group',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.group}</Text>\n            }\n        }, {\n            title: 'msg',\n            key: 'msg',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.msg}</Text>\n            },\n        }, {\n            title: 'actual',\n            key: 'actual',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.actual}</Text>\n            },\n        }, {\n            title: 'expect',\n            key: 'expect',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.expect}</Text>\n            },\n        },]\n\t}\n\n\trefreshPage() {\n\t\tthis.setState({\n\t\t\tupdateTime: new Date().getTime()\n\t\t})\n\t}\n\n\t_expect(actual, expect, msg='') {\n\t\tlet result = {}\n\t\tif(expect === actual) {\n\t\t\tresult = {\n\t\t\t\t'group': this.group,\n\t\t\t\t'success': true,\n\t\t\t\t'msg': msg,\n\t\t\t\t'expect': expect,\n\t\t\t\t'actual': actual\n\t\t\t}\n\t\t} else {\n\t\t\tresult = {\n\t\t\t\t'group': this.group,\n\t\t\t\t'success': false,\n\t\t\t\t'msg': msg,\n\t\t\t\t'expect': expect,\n\t\t\t\t'actual': actual\n\t\t\t}\n\t\t}\n\t\tresult['id'] = this.testResults.length + 1\n\t\tthis.testResults.push(result)\n\t}\n\n\t_testIncomeExpend() {\n\t\tthis.group = '_testIncomeExpend'\n\t\tlet data11 = IncomeExpenditureVMService.queryMonthData(new Date('2022-11'))\n\t\tthis._expect(data11['income']['total'], 3007018)\n\t\tthis._expect(data11['income']['details'].length, 2)\n\t\tthis._expect(data11['expend']['total'], -826853)\n\t\tthis._expect(data11['expend']['details'].length, 17)\n\n\t\tlet data10 = IncomeExpenditureVMService.queryMonthData(new Date('2022-10'))\n\t\tthis._expect(data10['income']['total'], 3260514)\n\t\tthis._expect(data10['income']['details'].length, 3)\n\t\tthis._expect(data10['expend']['total'], -1809859)\n\t\tthis._expect(data10['expend']['details'].length, 20)\n\n\t\tlet yearData01 = IncomeExpenditureVMService.queryYearData(new Date('2021-04'))\n\t\tthis._expect(yearData01['income']['total'], 14980332)\n\t\tthis._expect(yearData01['income']['details'].length, 9)\n\t\tthis._expect(yearData01['income']['sumByMonth'].length, 4)\n\t\tthis._expect(yearData01['expend']['total'], -164667437)\n\t\tthis._expect(yearData01['expend']['details'].length, 51)\n\t\tthis._expect(yearData01['expend']['sumByMonth'].length, 4)\n\t}\n\n\t_testInvestData() {\n\t\t/**\n\t\t * \t2022-10\n\t\t *  totalAssetMoneys (3) [17330631, 7500, 0]\n\t\t\ttotalDebtMoneys (3) [-894467, -850000, 0]\n\t\t\ttotalInvestMoneys (3) [50981840, 0, 57218750]\n\t\t\ttotalStockMoneys (3) [21153610, 28250, 24719638]\n\t\t\tlastMonthTotalMoney 97684540\n\t\t\tcurrentMonthTotalMoney 98374552\n\t\t\tcurrentMonthAddMoney 636405\n\t\t\ttotalPassiveMoney 35750\n\t\t\t\n\t\t\t2022-11\n\t\t\ttotalAssetMoneys (3) [16241803, 2650, 0]\n\t\t\ttotalDebtMoneys (3) [-6000, -1500000, 0]\n \t\t\ttotalInvestMoneys (3) [54335438, 0, 58088750]\n\t\t\ttotalStockMoneys (3) [21522750, -20, 24677398]\n\t\t\tlastMonthTotalMoney 98374552\n\t\t\tcurrentMonthTotalMoney 99001951\n\t\t\tcurrentMonthAddMoney 682795\n\t\t\ttotalPassiveMoney 2630\n\t\t */\n\t\tthis.group = '_testInvestData'\n\n\t\tlet monthData1 = InvestmentVMService.queryMonthData(new Date('2022-10'))\n\t\tthis._expect(monthData1['asset']['totalMoneys'][0], 17330631)\n\t\tthis._expect(monthData1['asset']['totalProfitMoneys'][1], 7500)\n\t\tthis._expect(monthData1['asset']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData1['debt']['totalMoneys'][0], -894467)\n\t\tthis._expect(monthData1['debt']['totalProfitMoneys'][1], -850000)\n\t\tthis._expect(monthData1['debt']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData1['fund']['totalMoneys'][0], 50981840)\n\t\tthis._expect(monthData1['fund']['totalProfitMoneys'][1], 0)\n\t\tthis._expect(monthData1['fund']['totalMoneys'][1], 57218750)\n\n\t\tthis._expect(monthData1['stock']['totalMoneys'][0], 21153610)\n\t\tthis._expect(monthData1['stock']['totalProfitMoneys'][1], 28250)\n\t\tthis._expect(monthData1['stock']['totalMoneys'][1], 24719638)\n\n\t\tlet monthData2 = InvestmentVMService.queryMonthData(new Date('2022-11'))\n\t\tthis._expect(monthData2['asset']['totalMoneys'][0], 16241803)\n\t\tthis._expect(monthData2['asset']['totalProfitMoneys'][1], 2650)\n\t\tthis._expect(monthData2['asset']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData2['debt']['totalMoneys'][0], -6000)\n\t\tthis._expect(monthData2['debt']['totalProfitMoneys'][1], -1500000)\n\t\tthis._expect(monthData2['debt']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData2['fund']['totalMoneys'][0], 54335438)\n\t\tthis._expect(monthData2['fund']['totalProfitMoneys'][1], 0)\n\t\tthis._expect(monthData2['fund']['totalMoneys'][1], 58088750)\n\n\t\tthis._expect(monthData2['stock']['totalMoneys'][0], 21522750)\n\t\tthis._expect(monthData2['stock']['totalProfitMoneys'][1], -20)\n\t\tthis._expect(monthData2['stock']['totalMoneys'][1], 24677398)\n\t}\n\n\ttestAll() {\n\t\tthis.testResults = []\n\t\tthis._testIncomeExpend()\n\t\tthis._testInvestData()\n\t\tthis.refreshPage()\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Content className='Content'>\n\t\t\t\t<Divider orientation=\"center\">版本：{App.getVersion()}</Divider>\n\t\t\t\t<Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\", margin: \"10px 0\" }}>\n\t\t\t\t\t<Divider orientation=\"center\">测试按钮</Divider>\n\t\t\t\t\t<Button onClick={() => this.testAll()}>所有测试用例</Button>\n\t\t\t\t</Row>\n\t\t\t\t<Table columns={this.resultColumns} dataSource={this.testResults\n\t\t\t\t\t.filter((msg) => !msg['success']).map((msg, i) => {\n\t\t\t\t\t\treturn { key: i, entity: msg }\n\t\t\t\t\t})} />\n\t\t\t</Content>\n\t\t)\n\t}\n}\n\nexport default TestPage","import { Layout, Menu, message } from \"antd\";\nimport React from 'react';\nimport { App, DB_INIT } from '../../app.js';\nimport InitPage from '../detail/init_page';\nimport InvestPage from '../detail/invest_page';\nimport MonthPage from '../detail/month_page';\nimport TodoPage from '../detail/todo_page';\nimport UserPage from '../detail/user_page';\nimport YearPage from '../detail/year_page';\nimport TestPage from './test_page';\n\nconst { Header } = Layout;\n\nclass MainPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        let items = {\n            'init': \"数据初始化\",\n            'by_month': \"按月展示\",\n            'by_year': \"按年展示\",\n            'invest_detail': \"投资详情\",\n            'user_config': \"用户配置\",\n        }\n        if(!App.isProduction()) {\n            items['test'] = '测试页面'\n        }\n        this.navItems = Object.keys(items).map((key) => {\n            return { key, label: items[key] }\n        });\n        this.state = {\n            navKey: \"init\",\n        }\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    render() {\n        let navKey = this.state.navKey\n        let subPage = null\n        if (navKey === 'init' || DB_INIT !== true) {\n            if(navKey !== 'init') {\n                this.state.navKey = \"init\"\n                message.error('请先加载DB文件')\n            }\n            subPage = <InitPage onDbReady={() => {\n                if(App.isProduction()) {\n                    this.state.navKey = \"by_month\"\n                } else {\n                    this.state.navKey = \"user_config\"\n                }\n                this.refreshPage()\n            }} />\n        } else {\n            if (navKey === 'test') {\n                subPage = <TestPage />\n            } else if (navKey === 'by_month') {\n                subPage = <MonthPage />\n            } else if (navKey === 'by_year') {\n                subPage = <YearPage />\n            } else if (navKey === 'invest_detail') {\n                subPage = <InvestPage />\n            } else if (navKey === 'user_config') {\n                subPage = <UserPage />\n            } else {\n                subPage = <TodoPage />\n            }\n        }\n        return (\n            <Layout>\n                <Header className=\"header\">\n                    <Menu theme=\"dark\" mode=\"horizontal\" items={this.navItems} selectedKeys={[navKey]}\n                        onSelect={(item) => {\n                            this.setState(() => this.state.navKey = item.key)\n                        }} />\n                </Header>\n                {subPage}\n            </Layout>\n        )\n    }\n}\n\nexport default MainPage","import { ConfigProvider } from 'antd';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport ReactDOM from 'react-dom';\nimport './app';\nimport './index.css';\nimport MainPage from './pages/main/main_page';\n\nmoment.locale('zh-cn');\n\nReactDOM.render(<ConfigProvider locale={zhCN}>\n    <MainPage key={\"mainpage\"}/>\n</ConfigProvider>, document.getElementById('root'));\n\n// window.onerror = function(message, source, lineNumber, colno, error) {\n//     alert(\"Console 查看错误信息：\" + message);\n// };"],"sourceRoot":""}
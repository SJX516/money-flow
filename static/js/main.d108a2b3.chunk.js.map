{"version":3,"sources":["utils/db.js","utils/utils.js","domain/repo/base_repo.js","domain/entity/base_entity.js","domain/repo/income_expenditure_repo.js","domain/entity/income_expenditure.js","domain/service/income_expenditure_service.js","domain/repo/investment_repo.js","domain/entity/investment.js","domain/service/investment_service.js","domain/service/view_model_service.js","pages/main/test_page.js","pages/detail/widget/input_widget.js","pages/ui_utils.js","domain/repo/summary_repo.js","domain/entity/summary.js","domain/service/summary_service.js","pages/detail/widget/cus_dialog.js","pages/detail/month_page.js","pages/detail/todo_page.js","pages/detail/invest_page.js","pages/detail/init_page.js","pages/detail/year_page.js","pages/main/main_page.js","index.js"],"names":["DBHelper","this","db","actionCount","file","a","initSqlJs","locateFile","sqlWasm","SQL","Promise","resolve","reject","fr","FileReader","readAsArrayBuffer","onload","result","fileResult","Uints","Uint8Array","Database","create","data","export","buffer","Buffer","from","blob","Blob","url","window","URL","createObjectURL","downloadFile","message","info","console","log","document","createElement","body","appendChild","href","download","onclick","setTimeout","revokeObjectURL","click","tablename","select","cols","values","ops","selectAndOrder","orders","sql","genWhereSql","valueDict","length","join","exec","run","i","JSON","stringify","content","checkAutoSave","id","genSubSql","delete","isWhere","op","undefined","MoneyUtil","money","DataUtil","isEmpty","notNumber","noValue","temp","toFixed","isYuan","getFixedMoney","negMoney","str","substr","l","strArr","count","push","money1","money2","Math","abs","b","percent","getPercent","o","isNull","isNaN","TimeUtil","time1","month","getMonth","year","getFullYear","Date","nextMonthStart","nextYearStart","monthStart","monthTime","currentMonthStart","currentMonthEnd","monthEnd","inTime","startTime","endTime","timeStr","substring","getDay","BaseRepo","prototype","format","fmt","getDate","getHours","getMinutes","getSeconds","floor","getMilliseconds","k","test","replace","RegExp","$1","DB_INIT","convert","App","Error","selectAll","deleteAll","date","allowNull","BaseEntity","gmtCreate","gmtModified","IncomeExpenditureRepo","detail","getDateStr","happenTime","insert","type","code","desc","update","IncomeExpenditureDetail","IncomeExpenditureType","getByCode","repo","upsert","get","name","Object","keys","key","concat","toList","Incomme","Expenditure","salary","self","num13","bonus","luckmoney","work","home","other","rent","utility","daily","taxi","phone","shopping","elc","life","happy","online","offline","food","canteen","out","family","traval","gift","study","health","car","etc","oil","girlfriend","eat","IncomeExpenditureService","save","monthDate","startDate","queryTimeBetwen","endDate","InvestmentProductRepo","entity","fixVote","InvestmentProduct","InvestmentType","InvestmentDetailRepo","productId","productName","productType","buySellId","recordType","InvestmentDetail","InvestmentRecordType","BuySell","deleteBySellId","CurrentPrice","Profit","AssetDebtCurrentPrice","AssetDebtProfit","Product","saving","debt","stock","stock_fund","etf","bond","InvestmentService","typeCode","queryAll","product","details","investMap","fund","asset","forEach","dealDetail","currentProductMap","isAsset","isDebt","isStock","currentPrice","profits","totalMoney","datas","buySells","totalSellMoney","totalCount","productTypeCode","_upsertInvest","sellGetMoney","currentProfit","totalInvestMoney","getProductTotalBuySellBefore","getTime","buySell","principal","sellProfit","addSellInvestOfProfit","IncomeExpenditureVMService","_calIncomeExpendData","queryMonth","startMonthDate","yearEnd","incomeDetailByMonth","_calSumByMonth","expendDetailByMonth","sumByMonth","monthStr","map","sort","obj","_newEntityFromDetail","total","title","InvestmentVMService","getAllInvestDetailBefore","_getInvestSummary","safeDivision","getPaperProfit","filterTotalMoney","filterSellMoney","startTimeDate","endTimeDate","profitSummary","_getProfitSummary","_getTotalMoney","totalProfitMoney","totalFilterProfitMoney","products","filterDatas","ele","filterMoney","filterTotalCount","totalCurrentPrice","totalBuySellMoney","Text","Typography","Title","Paragraph","TestPage","Link","props","state","testResults","group","resultColumns","dataIndex","render","color","success","msg","actual","expect","setState","updateTime","data11","queryMonthData","_expect","data10","yearData01","queryYearData","monthData1","monthData2","_testIncomeExpend","_testInvestData","refreshPage","className","orientation","getVersion","style","padding","backgroundColor","margin","onClick","testAll","columns","dataSource","filter","React","Component","Option","Select","Layout","Header","Content","Sider","ItemNames","InputWidget","getInitialState","element","code2Name","opts","value","item","stateCode","nameAppend","required","hint","defaultValue","typeName","parentCode","parentName","getOpts","align","span","flex","width","onChange","placeholder","event","target","pon","moneyPon","ponKey","addonBefore","inMonth","picker","moment","m","dateString","toDate","isNum","e","warn","alert","rows","cfgs","itemToWidget","bodyStyle","justify","checkData","onSubmit","s","NaN","UIUtils","_getProductColor","text","textType","strong","SummaryDataRepo","time","SummaryType","BY_MONTH_KEY","SummaryData","selectAllMonthKey","SummaryService","monthDatas","queryAllMonthKey","d","CusDialog","visible","footer","onCancel","onOk","MonthPage","incomeExpendColumns","getStr","subIncomeExpendColumns","dayStr","sorter","compareAbs","_","record","size","deleteIncomeExpendDetail","assetDebtColumns","getProductTag","compare","subAssetDebtColumns","deleteInvestDetail","investColumns","sellProfitPercent","getSellProfitPercent","getPercentColorType","getPercentStr","asellProfitPercent","bsellProfitPercent","getQoqPaperProfit","paperProfitPercent","getQoqPaperProfitPercent","apaperProfitPercent","bpaperProfitPercent","getPaperProfitPercent","getDetailStr","subInvestColumns","profitMoney","profitPercent","lastMonthPaperProfit","_getLastMonthProductDetail","lastMonthAllInvestData","inputValues","getMoney","productCode","typeParentCode","addBuyInvest","error","addSellInvest","addAssetDebtProfit","months","queryMonths","showDialog","includes","hideDialog","addMonth","sideKey","siderItems","openKeys","sideDatas","getByMonthSideDatas","lastMonth","label","children","j","currentMonthDate","expendCode2Name","incomeCode2Name","getExpenditureTypes","getIncomeTypes","investProductCode2Name","assetProductCode2Name","debtProductCode2Name","queryProducts","incomeExpendData","monthData","totalIncome","totalExpend","allInvestData","passiveIncomeSummary","_getPassiveIncomeSummary","passiveExpendSummary","_getPassiveExpendSummary","lastMonthEnd","currentMonthTotalMoney","lastMonthTotalMoney","currentMonthAddMoney","newEntity","totalMoneyEntitys","fundData","_mapToList","stockData","assetDebtDatas","subInvestRowRender","index","profit","pagination","subInvestRowExpandable","contentView","direction","insertData","expandable","expandedRowRender","child","sortDirections","rowExpandable","pageSize","createShowTextRow","createShowMoneyRowIfBiggerThan","scroll","x","mode","selectedKeys","items","onSelect","Item","showAddNewMonthDialog","addNewMoth","valueRange","pMoney","totalAssetMoneys","totalFundMoneys","totalStockMoneys","totalDebtMoneys","productMap","arr","profitEntitys","yearInvestData","assetData","_getProductsProfitEntitys","debtData","TodoPage","fontSize","InvestPage","getPagerProfitProcent","getPagerProfit","productColumns","showEditProductDialog","deleteProduct","productFixVoteColumns","productTypeName","productFixVote","currentProduct","editProduct","upsertProduct","getProductTypes","productAssetDatas","productStockDatas","productInvestDatas","productIdToProduct","queryAllInvestData","investDatas","stockDatas","investFixVoteDatas","totalFixVote","paperProfit","fixVoteEntity","addProduct","InitPage","files","initDb","onDbReady","createDb","fileName","accept","refreshDB","click1","click2","YearPage","startMonth","dataMap","getGroup","groupCode","groupType","dataArr","getByYearSideDatas","yearStartMonth","yearStartMonthDate","yearData","it","incomeGroupDataArr","getAggregateGroupDataArr","income","expendGroupDataArr","expend","barData","selectedGroupCode","isIncome","getAggregateTimeDataArr","_getPieConfig","_getBarConfig","modifyMonth","xField","yField","isGroup","isStack","seriesField","groupField","position","fill","textAlign","formatter","valuePercent","tooltip","datum","renderStatistic","containerWidth","measureTextWidth","textWidth","textHeight","height","R","scale","min","sqrt","pow","textStyleStr","appendPadding","angleField","colorField","radius","innerRadius","offset","autoRotate","statistic","offsetY","customHtml","container","view","getBoundingClientRect","reduce","r","interactions","onReady","plot","on","MainPage","isProduction","navItems","navKey","subPage","theme","locale","_env","_version","init","process","ReactDOM","zhCN","getElementById"],"mappings":"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","file":"static/js/main.d108a2b3.chunk.js","sourcesContent":["import initSqlJs from \"sql.js\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\nimport { message } from \"antd\";\n\nclass DBHelper {\n    constructor() {\n        this.db = null;\n        this.actionCount = 0\n    }\n\n    async init(file) {\n        let SQL = await initSqlJs({ locateFile: () => sqlWasm });\n        let fileResult = await new Promise((resolve, reject) => {\n            let fr = new FileReader();\n            fr.readAsArrayBuffer(file);\n            fr.onload = () => resolve(fr.result)\n        })\n        const Uints = new Uint8Array(fileResult);\n        this.db = new SQL.Database(Uints);\n    }\n\n    async createDb() {\n        let SQL = await initSqlJs({ locateFile: () => sqlWasm });\n        this.db = new SQL.Database();\n        this.create(\"CREATE TABLE `data_summary` (\\\n            `id` INTEGER NOT NULL  ,\\\n            `gmt_create` datetime NOT NULL  ,\\\n            `gmt_modified` datetime NOT NULL  ,\\\n            `type` varchar(64) NOT NULL ,\\\n            `time` datetime NOT NULL  ,\\\n            `money` INTEGER,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n           )\")\n        this.create(\"CREATE TABLE `income_expenditure_detail` (\\\n            `id` INTEGER NOT NULL ,\\\n            `gmt_create` datetime NOT NULL,\\\n            `gmt_modified` datetime NOT NULL ,\\\n            `type` int NOT NULL,\\\n            `desc` varchar(64) NULL,\\\n            `money` bigint unsigned NOT NULL,\\\n            `happen_time` datetime NOT NULL,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n        )\")\n        this.create(\"CREATE TABLE `investment_detail` (\\\n            `id` INTEGER NOT NULL  ,\\\n            `gmt_create` datetime NOT NULL  ,\\\n            `gmt_modified` datetime NOT NULL  ,\\\n            `product_id` INTEGER NOT NULL  ,\\\n            `product_name` varchar(64) NOT NULL  ,\\\n            `product_type` INTEGER NOT NULL  ,\\\n            `money` INTEGER NOT NULL  ,\\\n            `happen_time` datetime NOT NULL  ,\\\n            `buy_sell_id` INTEGER,\\\n            `record_type` int NOT NULL , `count` INT,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n           )\")\n        this.create(\"CREATE TABLE `investment_product` (\\\n            `id` INTEGER NOT NULL  ,\\\n            `gmt_create` datetime NOT NULL  ,\\\n            `gmt_modified` datetime NOT NULL  ,\\\n            `name` varchar(64) NOT NULL  ,\\\n            `type` int NOT NULL  ,\\\n            `desc` varchar(64) NULL  , fix_vote INT,\\\n            PRIMARY KEY (`id` AUTOINCREMENT)\\\n           )\")\n    }\n\n    export() {\n        const data = this.db.export();\n        const buffer = Buffer.from(data);\n        var blob = new Blob([buffer]);\n        var url = window.URL.createObjectURL(blob);\n        this.downloadFile(url)\n    }\n\n    checkAutoSave() {\n        if(++this.actionCount > 20) {\n            message.info(\"自动触发保存\")\n            this.actionCount = 0\n            this.export()\n        }\n    }\n\n    downloadFile(url) {\n        console.log(\"下载文件：\" + url);\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.href = url;\n        a.download = \"data.db\";\n        a.onclick = () => {\n            setTimeout(() => { window.URL.revokeObjectURL(a.href) }, 1500);\n        };\n        a.click();\n    }\n\n    selectAll(tablename) {\n        return this.select(tablename, [], [], [])\n    }\n\n    select(tablename, cols, values, ops) {\n        return this.selectAndOrder(tablename, cols, values, ops, [])\n    }\n\n    selectAndOrder(tablename, cols, values, ops, orders) {\n        let sql = `SELECT * FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        if (orders.length > 0) {\n            sql += ` order by ${orders.join(',')}`\n        }\n        // console.log(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        return content\n    }\n\n    create(sql) {\n        console.log(sql)\n        this.db.run(sql)\n    }\n\n    insert(tablename, cols, values) {\n        let sql = `INSERT INTO ${tablename} (${cols.join(',')}) VALUES (`\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            sql += \"$\" + cols[i] + i\n            if (i < cols.length - 1) {\n                sql += \", \"\n            }\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        sql += \") returning id\"\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        var content = this.db.exec(sql, valueDict);\n        this.checkAutoSave()\n        return content[0].values[0][0]\n    }\n\n    update(tablename, id, cols, values) {\n        let sql = `UPDATE ${tablename} SET`\n        let data = this.genSubSql(cols, values, [], false)\n        let valueDict = data[1]\n        sql += data[0]\n        sql += \" where id=$id\"\n        valueDict['$id'] = id\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        this.checkAutoSave()\n        this.db.run(sql, valueDict);\n    }\n\n    deleteAll(tablename) {\n        this.delete(tablename, [], [], [])\n    }\n\n    delete(tablename, cols, values, ops) {\n        let sql = `DELETE FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        this.checkAutoSave()\n        console.log(JSON.stringify(content))\n    }\n\n    genWhereSql(cols, values, ops) {\n        return this.genSubSql(cols, values, ops, true)\n    }\n\n    genSubSql(cols, values, ops, isWhere) {\n        let sql = \"\"\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            if (i !== 0) {\n                sql += (isWhere ? \" and \" : \" , \")\n            } else {\n                sql += (isWhere ? \" where \" : \" \")\n            }\n            let op = ops[i]\n            if (op === undefined) {\n                op = \"=\"\n            }\n            sql += \" \" + cols[i] + \" \" + op + \" $\" + cols[i] + i\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        return [sql, valueDict]\n    }\n}\n\nexport default DBHelper","class MoneyUtil {\n    static noValue(money) {\n        return DataUtil.isEmpty(money) || DataUtil.notNumber(money) || money == 0\n    }\n\n    static getDetailStr(money) {\n        if(this.noValue(money)) {\n            return \"-\"\n        }\n        let temp = money / 100\n        if(temp % 1 === 0) {\n            return `￥${temp}`\n        } else {\n            return `￥${temp.toFixed(2)}`\n        }\n    }\n\n    static getStr(money, isYuan=false) {\n        if(this.noValue(money)) {\n            return \"-\"\n        }\n        let temp = money / 100\n        if(isYuan) {\n            temp = money\n        }\n        return `￥${this.getFixedMoney(temp)}`\n    }\n\n    static getMoneyColorType(money) {\n        if(this.noValue(money)) {\n            return \"\"\n        }\n        if(money > 0) {\n            return \"danger\"\n        } else if(money < 0) {\n            return \"success\"\n        } else {\n            return \"\"\n        }\n    }\n\n    // 1234567 -> 1,234,567\n    static getFixedMoney(money) {\n        var negMoney = money < 0\n        var str = money.toFixed()\n        if(negMoney) {\n            str = str.substr(1)\n        }\n        var l = str.length\n        var strArr = []\n        for(var i = 0; i < l; ) {\n            var count = i == 0 ? l % 3 : 3\n            if(count == 0) {\n                count = 3\n            }\n            strArr.push(str.substr(i, count))\n            i += count\n        }\n        if(negMoney) {\n            return \"-\" + strArr.join(\",\")\n        } else {\n            return strArr.join(\",\")\n        }\n    }\n\n    static compare(money1, money2) {\n        if(DataUtil.notNumber(money1)) {\n            return -1\n        } else if (DataUtil.notNumber(money2)) {\n            return 1\n        }\n        return money1 - money2\n    }\n\n    static compareAbs(money1, money2) {\n        if(DataUtil.notNumber(money1)) {\n            return -1\n        } else if (DataUtil.notNumber(money2)) {\n            return 1\n        }\n        return Math.abs(money1) - Math.abs(money2)\n    }\n\n    // a / b\n    static safeDivision(a, b) {\n        if(DataUtil.notNumber(a) || DataUtil.notNumber(b) || b == 0) {\n            return null\n        } else {\n            return a / b\n        }\n    }\n\n    static getPercentStr(percent) {\n        if(DataUtil.notNumber(percent) || Math.abs(percent) <= 0.0001) {\n            return \"-\"\n        } else {\n            return DataUtil.getPercent(percent)\n        }\n    }\n\n    static getPercentColorType(percent) {\n        if(DataUtil.notNumber(percent) || Math.abs(percent) <= 0.0001) {\n            return \"\"\n        }\n        if(percent > 0) {\n            return \"danger\"\n        } else if(percent < 0) {\n            return \"success\"\n        } else {\n            return \"\"\n        }\n    }\n}\n\nclass DataUtil {\n    static isEmpty(str) {\n        return str === undefined || str === null || str === \"\"\n    }\n\n    static isNull(o) {\n        return o === undefined || o === null\n    }\n\n    static notNumber(o) {\n        return this.isNull(o) || isNaN(o)\n    }\n\n    static getPercent(a) {\n        let temp = a * 100\n        if(temp % 1 === 0) {\n            return `${temp}%`\n        } else {\n            return `${temp.toFixed(2)}%`\n        }\n    }\n\n    static compare(a, b) {\n        if(DataUtil.notNumber(a)) {\n            return -1\n        } else if (DataUtil.notNumber(b)) {\n            return 1\n        }\n        return a - b\n    }\n\n    static compareAbs(a, b) {\n        if(DataUtil.notNumber(a)) {\n            return -1\n        } else if (DataUtil.notNumber(b)) {\n            return 1\n        }\n        return Math.abs(a) - Math.abs(b)\n    }\n}\n\nclass TimeUtil {\n    static nextMonthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        if (month === 12) {\n            year += 1;\n            month = '01';\n        } else {\n            month += 1;\n            month = (month < 10) ? '0' + month : month;\n        }\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static monthEnd(time1) {\n        return new Date(this.nextMonthStart(time1) - 1)\n    }\n\n    static monthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static nextYearStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear() + 1;\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static yearEnd(time1) {\n        return new Date(this.nextYearStart(time1) - 1)\n    }\n\n    static lastMonthEnd(time1) {\n        return new Date(this.monthStart(time1) - 1)\n    }\n\n    static inMonth(time1, monthTime) {\n        let currentMonthStart = TimeUtil.monthStart(monthTime)\n        let currentMonthEnd = TimeUtil.monthEnd(monthTime)\n        return this.inTime(time1, currentMonthStart, currentMonthEnd)\n    }\n\n    static inTime(time1, startTime, endTime) {\n        if (time1 > endTime || time1 < startTime) {\n            return false\n        } else {\n            return true\n        }\n    }\n\n    static dayStr(time1) {\n        if(DataUtil.isNull(time1)) {\n            return \"\"\n        }\n        return time1.timeStr().substring(0, 10)\n    }\n\n    static monthStr(time1) {\n        if(DataUtil.isNull(time1)) {\n            return \"\"\n        }\n        return time1.timeStr().substring(0, 7)\n    }\n\n    static weekDayStr(time1) {\n        let i = time1.getDay()\n        switch (i) {\n            case 0:\n                return \"周日\"\n            case 1:\n                return \"周一\"\n            case 2:\n                return \"周二\"\n            case 3:\n                return \"周三\"\n            case 4:\n                return \"周四\"\n            case 5:\n                return \"周五\"\n            case 6:\n                return \"周六\"\n        }\n    }\n}\n\nexport { DataUtil, TimeUtil, MoneyUtil }","import { App, DB_INIT } from '../..';\n\nclass BaseRepo {\n\n    constructor() {\n        this.tablename = null\n        Date.prototype.format = function(fmt) { \n            var o = { \n               \"M+\" : this.getMonth()+1,                 //月份 \n               \"d+\" : this.getDate(),                    //日 \n               \"h+\" : this.getHours(),                   //小时 \n               \"m+\" : this.getMinutes(),                 //分 \n               \"s+\" : this.getSeconds(),                 //秒 \n               \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n               \"S\"  : this.getMilliseconds()             //毫秒 \n           }; \n           if(/(y+)/.test(fmt)) {\n                   fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n           }\n            for(var k in o) {\n               if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length===1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n                }\n            }\n           return fmt; \n        }\n        Date.prototype.timeStr = function() {\n            return this.format(\"yyyy-MM-dd hh:mm:ss\")\n        }\n    }\n\n    static getDateStr(date, allowNull=false) {\n        if(date == null) {\n            if(allowNull) {\n                return new Date().timeStr()\n            } else {\n                throw new Error(\"日期不能为 null\")\n            }\n        } else if(date instanceof Date) {\n            return date.timeStr()\n        } else {\n            throw new Error(\"日期格式不为 Date\")\n        }\n    }\n\n    get(id) {\n        if(!DB_INIT) {\n            return null\n        }\n        if (id != null) {\n            return this.convert(App.db.select(this.tablename, [\"id\"], [id], []))\n        } else {\n            throw new Error(\"id 不能为空\")\n        }\n    }\n\n    selectAll() {\n        if(!DB_INIT) {\n            return []\n        }\n        return this.convert(App.db.selectAll(this.tablename))\n    }\n\n    delete(id) {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.delete(this.tablename, [\"id\"], [id], [])\n    }\n\n    deleteAll() {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.deleteAll(this.tablename)\n    }\n\n    convert(content) {}\n}\n\nexport {BaseRepo}","class BaseEntity {\n    id = null;\n    gmtCreate = null;\n    gmtModified = null;\n}\n\nexport {BaseEntity}","import { BaseRepo } from './base_repo';\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../entity/income_expenditure';\nimport { App } from '../..';\n\nclass IncomeExpenditureRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"income_expenditure_detail\"\n    }\n\n    /**\n      * @param {IncomeExpenditureDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                 detail.type.code, detail.desc, detail.money, happenTime])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                detail.type.code, detail.desc, detail.money, happenTime])\n        }\n    }\n\n    select(startTime, endTime) {\n        if(endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        return this.convert(App.db?.select(this.tablename, [\"happen_time\", \"happen_time\"],\n         [startTime.timeStr(), endTime.timeStr()], ['>', '<']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new IncomeExpenditureDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = IncomeExpenditureType.getByCode(data[3])\n            detail.desc = data[4]\n            detail.money = data[5]\n            detail.happenTime = new Date(data[6])\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport {IncomeExpenditureRepo}","import { BaseRepo } from '../repo/base_repo';\nimport { BaseEntity } from './base_entity';\nimport {IncomeExpenditureRepo} from '../repo/income_expenditure_repo';\n\n//'收入/支出' 表\nclass IncomeExpenditureDetail extends BaseEntity {\n    /**\n     * @type {IncomeExpenditureType}\n     */\n    type = null;\n    //额外描述，备注\n    desc = null;\n    //分为单位，流入为正，流出为负\n    money = null;\n    //实际发生时间，不确定可以填月初\n    happenTime = null;\n\n    static repo = new IncomeExpenditureRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(startTime, endTime) {\n        return this.repo.select(startTime, endTime)\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(this.money*this.type.code < 0) {\n            this.money = -1 * this.money\n        }\n        IncomeExpenditureDetail.repo.upsert(this)\n    }\n}\n\n\nclass IncomeExpenditureType {\n    static Incomme = {\n        salary: {\n            self: new IncomeExpenditureType(10000, \"薪水\"),\n            num13: new IncomeExpenditureType(10001, \"薪水-十三薪\"),\n            bonus: new IncomeExpenditureType(10002, \"薪水-年终奖\"),\n        },\n        luckmoney: {\n            self: new IncomeExpenditureType(20000, \"红包\"),\n            work: new IncomeExpenditureType(20001, \"红包-工作\"),\n            home: new IncomeExpenditureType(20002, \"红包-家人\"),\n        },\n        other: {\n            self: new IncomeExpenditureType(30000, \"其他\"),\n        }\n    };\n\n    static Expenditure = {\n        home: {\n            self: new IncomeExpenditureType(-10000, \"住房\"),\n            rent: new IncomeExpenditureType(-10001, \"住房-房租\"),\n            utility: new IncomeExpenditureType(-10002, \"住房-水电\"),\n        },\n        daily: {\n            self: new IncomeExpenditureType(-20000, \"日常\"),\n            taxi: new IncomeExpenditureType(-20001, \"日常-交通\"),\n            phone: new IncomeExpenditureType(-20002, \"日常-话费\"),\n        },\n        shopping: {\n            self: new IncomeExpenditureType(-30000, \"购物\"),\n            elc: new IncomeExpenditureType(-30001, \"购物-电子\"),\n            life: new IncomeExpenditureType(-30002, \"购物-生活\"),\n        },\n        happy: {\n            self: new IncomeExpenditureType(-40000, \"娱乐\"),\n            online: new IncomeExpenditureType(-40001, \"娱乐-线上\"),\n            offline: new IncomeExpenditureType(-40002, \"娱乐-线下\"),\n        },\n        food: {\n            self: new IncomeExpenditureType(-50000, \"餐饮\"),\n            canteen: new IncomeExpenditureType(-50001, \"餐饮-食堂\"),\n            out: new IncomeExpenditureType(-50002, \"餐饮-外出\"),\n        },\n        family: {\n            self: new IncomeExpenditureType(-60000, \"家人\"),\n            traval: new IncomeExpenditureType(-60001, \"家人-交通\"),\n            gift: new IncomeExpenditureType(-60002, \"家人-礼物\"),\n        },\n        study: {\n            self: new IncomeExpenditureType(-70000, \"学习\"),\n            online: new IncomeExpenditureType(-70001, \"学习-线上\"),\n            offline: new IncomeExpenditureType(-70002, \"学习-线下\"),\n        },\n        health: {\n            self: new IncomeExpenditureType(-80000, \"健康\"),\n        },\n        car: {\n            self: new IncomeExpenditureType(-90000, \"车\"),\n            etc: new IncomeExpenditureType(-90001, \"车-停车/ETC\"),\n            oil: new IncomeExpenditureType(-90002, \"车-加油\"),\n        },\n        girlfriend: {\n            self: new IncomeExpenditureType(-100000, \"女朋友\"),\n            traval: new IncomeExpenditureType(-100001, \"女朋友-旅游\"),\n            eat: new IncomeExpenditureType(-100002, \"女朋友-吃喝\"),\n            gift: new IncomeExpenditureType(-100003, \"女朋友-礼物\"),\n        },\n        other: {\n            self: new IncomeExpenditureType(-110000, \"其他\"),\n        },\n    }\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof IncomeExpenditureType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    static values() {\n        return this.toList(this.Incomme).concat(this.toList(this.Expenditure))\n    }\n\n    getGroup() {\n        return IncomeExpenditureType.getByCode(this.code - this.code % 100)\n    }\n\n    isIncome() {\n        return this.code > 0\n    }\n}\n\nexport {IncomeExpenditureDetail, IncomeExpenditureType}\n","import { TimeUtil } from \"../../utils/utils\"\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from \"../entity/income_expenditure\"\n\nclass IncomeExpenditureService {\n\n    static getIncomeTypes() {\n        return IncomeExpenditureType.Incomme\n    }\n\n    static getExpenditureTypes() {\n        return IncomeExpenditureType.Expenditure\n    }\n\n    /**\n     * \n     * @param {IncomeExpenditureType} type\n     * @param {Date} happenTime \n     */\n    static upsert(money, type, happenTime, desc=null, id=null) {\n        var detail = new IncomeExpenditureDetail()\n        detail.id = id\n        detail.type = type\n        detail.desc = desc\n        detail.money = money\n        detail.happenTime = happenTime\n        detail.save()\n    }\n\n    /**\n     * \n     * @returns {Array[IncomeExpenditureDetail]}\n     */\n    static queryMonth(monthDate) {\n        let startDate = TimeUtil.monthStart(monthDate)\n        return IncomeExpenditureDetail.queryTimeBetwen(startDate, TimeUtil.monthEnd(startDate))\n    }\n\n    static queryTimeBetwen(startDate, endDate) {\n        return IncomeExpenditureDetail.queryTimeBetwen(startDate, endDate)\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.delete(id)\n    }\n}\n\nexport {IncomeExpenditureService}","import { BaseRepo } from './base_repo';\nimport { App, DB_INIT } from '../..';\nimport { InvestmentDetail, InvestmentProduct, InvestmentProductReal, InvestmentRecordType, InvestmentType} from '../entity/investment';\n\nclass InvestmentProductRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_product\"\n    }\n\n    /**\n      * @param {InvestmentProduct} entity\n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        }\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new InvestmentProduct()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.name = data[3]\n            detail.type = InvestmentType.getByCode(data[4])\n            detail.desc = data[5]\n            detail.fixVote = data[6]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nclass InvestmentDetailRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_detail\"\n    }\n\n    /**\n      * @param {InvestmentDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            return App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                 detail.productId, detail.productName, detail.productType.code, detail.money, \n                 happenTime, detail.buySellId, detail.recordType.code, detail.count])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                detail.productId, detail.productName, detail.productType.code, detail.money,\n                happenTime, detail.buySellId, detail.recordType.code, detail.count])\n            return detail.id\n        }\n    }\n\n    select(productId, recordType, startTime, endTime) {\n        if(!DB_INIT) {\n            return []\n        }\n        if(startTime != null && endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        let cols = [], values = [], ops = []\n        if(productId != null) {\n            cols.push('product_id')\n            values.push(productId)\n            ops.push('=')\n        }\n        if(recordType != null) {\n            cols.push('record_type')\n            values.push(recordType.code)\n            ops.push('=')\n        }\n        if(startTime != null) {\n            cols.push('happen_time')\n            values.push(startTime.timeStr())\n            ops.push('>')\n        }\n        if(endTime != null) {\n            cols.push('happen_time')\n            values.push(endTime.timeStr())\n            ops.push('<')\n        }\n        return this.convert(App.db?.selectAndOrder(this.tablename, cols, values, ops, ['happen_time desc', 'gmt_modified desc']))\n    }\n\n    selectBySellId(buySellId) {\n        return this.convert(App.db?.select(this.tablename, [\"buy_sell_id\"],\n         [buySellId], ['=']))\n    }\n\n    deleteBySellId(buySellId) {\n        App.db?.delete(this.tablename, [\"buy_sell_id\"], [buySellId], ['='])\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new InvestmentDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.productId = data[3]\n            detail.productName = data[4]\n            detail.productType = InvestmentType.getByCode(data[5])\n            detail.money = data[6]\n            detail.happenTime = new Date(data[7])\n            detail.buySellId = data[8]\n            detail.recordType = InvestmentRecordType.getByCode(data[9])\n            detail.count = data[10]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport { InvestmentProductRepo, InvestmentDetailRepo}","import { DataUtil } from '../../utils/utils';\nimport { InvestmentDetailRepo, InvestmentProductRepo } from '../repo/investment_repo';\nimport { BaseEntity } from './base_entity';\n\n//投资产品\nclass InvestmentProduct extends BaseEntity {\n    //产品名称\n    name = null\n    /**\n     * @type {InvestmentType}\n     */\n    type = null\n    desc = null\n    fixVote = null\n\n    static repo = new InvestmentProductRepo()\n\n    static queryAll() {\n        return this.repo.selectAll()\n    }\n\n    static delete(id) {\n        InvestmentProduct.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(DataUtil.isNull(this.fixVote)) {\n            this.fixVote = 0\n        }\n        InvestmentProduct.repo.upsert(this)\n    }\n}\n\n//投资明细\n class InvestmentDetail extends BaseEntity {\n    productId = null\n    productName = null\n    /**\n     * @type {InvestmentType}\n     */\n    productType = null\n    //分为单位，买入为正，卖出为负\n    money = null\n    //份数，只在表示股票时候可能存在，用于计算成本价\n    count = null\n    //实际发生时间，不确定可以填月初\n    happenTime = null\n    /**\n     * 相关联的 买入/卖出 事件ID\n     */\n    buySellId = null\n    /**\n     * @type {InvestmentRecordType}\n     */\n    recordType = null\n\n    static repo = new InvestmentDetailRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(productId, recordType, startTime, endTime) {\n        return this.repo.select(productId, recordType, startTime, endTime)\n    }\n    \n    save() {\n        this.gmtModified = new Date()\n        return InvestmentDetail.repo.upsert(this)\n    }\n\n    delete() {\n        if(this.recordType.code === InvestmentRecordType.BuySell.code) {\n            InvestmentDetail.repo.deleteBySellId(this.id)\n        }\n        InvestmentDetail.repo.delete(this.id)\n    }\n}\n\nclass InvestmentRecordType {\n    static BuySell = new InvestmentRecordType(1, \"买入或卖出\")\n    static CurrentPrice = new InvestmentRecordType(2, \"投资类现价\")\n    static Profit = new InvestmentRecordType(3, \"投资类收益\")\n    static AssetDebtCurrentPrice = new InvestmentRecordType(4, \"资产/负债类现价\")\n    static AssetDebtProfit = new InvestmentRecordType(5, \"资产/负债类收益\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BuySell, this.CurrentPrice, this.Profit, this.AssetDebtCurrentPrice, this.AssetDebtProfit]\n    }\n}\n\nclass InvestmentType {\n    static Product = {\n        saving: new InvestmentType(1000000, \"现金类资产\"),\n        stock_fund: new InvestmentType(2000000, \"股票类基金\"),\n        etf: new InvestmentType(3000000, \"指数类基金\"),\n        bond: new InvestmentType(4000000, \"债券类基金\"),\n        stock: new InvestmentType(5000000, \"股票\"),\n        debt: new InvestmentType(6000000, \"负债\"),\n    };\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof InvestmentType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    static values() {\n        return this.toList(this.Product)\n    }\n\n    isAsset() {\n        return this === InvestmentType.Product.saving\n    }\n\n    isDebt() {\n        return this === InvestmentType.Product.debt\n    }\n\n    isStock() {\n        return this === InvestmentType.Product.stock\n    }\n\n    isFund() {\n        return this === InvestmentType.Product.stock_fund || \n            this === InvestmentType.Product.etf || this === InvestmentType.Product.bond\n    }\n}\n\nexport {InvestmentProduct, InvestmentType, InvestmentRecordType, InvestmentDetail}\n","import { DataUtil } from \"../../utils/utils\";\nimport { InvestmentDetail, InvestmentProduct, InvestmentRecordType, InvestmentType } from \"../entity/investment\";\n\nclass InvestmentService {\n\n    static getProductTypes() {\n        return InvestmentType.toList(InvestmentType.Product)\n    }\n\n    static upsertProduct(typeCode, name, desc = null, id = null) {\n        var entity = new InvestmentProduct()\n        entity.id = id\n        entity.type = InvestmentType.getByCode(typeCode)\n        entity.desc = desc\n        entity.name = name\n        entity.save()\n    }\n\n    static queryProducts() {\n        return InvestmentProduct.queryAll()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} detail \n     * @param {String} desc \n     * @param {Number} fixVote \n     */\n    static editProduct(detail, desc, fixVote) {\n        detail.fixVote = fixVote\n        detail.desc = desc\n        detail.save()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} product \n     */\n    static deleteProduct(product) {\n        InvestmentProduct.delete(product.id)\n    }\n\n    static getAllInvestDetailBefore(endTime) {\n        var details = InvestmentDetail.queryTimeBetwen(null, null, null, endTime)\n        let investMap = {\n            fund: {},\n            stock: {},\n            asset: {},\n            debt: {}\n        }\n        details.forEach(detail => {\n            this.dealDetail(detail, investMap)\n        })\n        return investMap\n    }\n\n    /**\n     * \n     * @param {InvestmentDetail} detail \n     * @param {{}} investMap \n     * \n     *  investMap = {\n            invest: {\n                \"1\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"buySells\": {\n                        \"totalMoney\": 100000\n                        \"datas\": [InvestmentDetail]\n                    },\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            },\n            stock: {\n                \"11\": {\n\n                }\n            }\n            asset: {                \n                \"2\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n\n            },\n            debt: {                \n                \"3\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            }\n        }\n     */\n    static dealDetail(detail, investMap) {\n        var currentProductMap = null\n        if (detail.productType.isAsset()) {\n            currentProductMap = investMap.asset\n        } else if (detail.productType.isDebt()) {\n            currentProductMap = investMap.debt\n        } else if (detail.productType.isStock()) {\n            currentProductMap = investMap.stock\n        } else {\n            currentProductMap = investMap.fund\n        }\n        if (DataUtil.isNull(currentProductMap[detail.productId])) {\n            currentProductMap[detail.productId] = {}\n        }\n        currentProductMap = currentProductMap[detail.productId]\n        currentProductMap.info = detail\n\n        // 保存现价\n        if (detail.recordType == InvestmentRecordType.CurrentPrice || detail.recordType == InvestmentRecordType.AssetDebtCurrentPrice) {\n            if(currentProductMap.currentPrice === undefined) {\n                currentProductMap.currentPrice = detail\n            }\n        } else if (detail.recordType == InvestmentRecordType.Profit || detail.recordType == InvestmentRecordType.AssetDebtProfit) {\n            if (DataUtil.isNull(currentProductMap.profits)) {\n                currentProductMap.profits = {\n                    totalMoney: 0,\n                    datas: [],\n                }\n            }\n            currentProductMap.profits.totalMoney += detail.money\n            currentProductMap.profits.datas.push(detail)\n        } else if (detail.recordType == InvestmentRecordType.BuySell) {\n            if (DataUtil.isNull(currentProductMap.buySells)) {\n                currentProductMap.buySells = {\n                    totalMoney: 0,\n                    totalSellMoney: 0,\n                    totalCount: 0,\n                    datas: [],\n                }\n            }\n            if(!DataUtil.notNumber(detail.count)) {\n                currentProductMap.buySells.totalCount += detail.count\n            }\n            currentProductMap.buySells.totalMoney += detail.money\n            if(detail.money < 0) {\n                currentProductMap.buySells.totalSellMoney += detail.money\n            }\n            currentProductMap.buySells.datas.push(detail)\n        }\n        return investMap\n    }\n\n    static getProductTotalBuySellBefore(productId, endTime) {\n        return InvestmentDetail.queryTimeBetwen(productId, InvestmentRecordType.BuySell, null, endTime)\n    }\n\n    static addAssetDebtProfit(productId, productName, productTypeCode, money, currentPrice, happenTime) {\n        if (!DataUtil.notNumber(money) && money != 0) {\n            this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n                InvestmentRecordType.AssetDebtProfit)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.AssetDebtCurrentPrice)\n    }\n\n    static addBuyInvest(productId, productName, productTypeCode, count, money, currentPrice, happenTime) {\n        var id = this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n            InvestmentRecordType.BuySell, count)\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.CurrentPrice, null, id)\n    }\n\n    static addSellInvest(productId, productName, productTypeCode, count, sellGetMoney, currentPrice, currentProfit, happenTime) {\n        let totalInvestMoney = 0\n        // 添加1秒，避免同一天添加的买入查不出来\n        this.getProductTotalBuySellBefore(productId, new Date(happenTime.getTime() + 1000)).forEach(buySell => {\n            totalInvestMoney += buySell.money\n        })\n        // 所得为正数，卖出的本金 = 总投资金额 - 当前投资金额\n        let principal = totalInvestMoney - (currentPrice - currentProfit)\n        let sellProfit = sellGetMoney - principal\n        console.log(`totalInvestMoney: ${totalInvestMoney} currentProfit: ${currentProfit} currentPrice: ${currentPrice} principal: ${principal} sellGetMoney: ${sellGetMoney} sellProfit: ${sellProfit}`)\n        this.addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime)\n    }\n\n    static addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime) {\n        // 所得为正数，表示花费的本金\n        let principal = sellGetMoney - sellProfit\n        if(!DataUtil.notNumber(count)) {\n            count = -1 * count\n        }\n        // 卖出本金，需要转为负数\n        var id = this._upsertInvest(productId, productName, productTypeCode, -1 * principal, happenTime,\n            InvestmentRecordType.BuySell, count)\n        if(currentPrice >= 0) {\n            this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n                InvestmentRecordType.CurrentPrice, null, id)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, sellProfit, happenTime, InvestmentRecordType.Profit, null, id)\n    }\n\n    /**\n     * @param {InvestmentDetail} detail \n     */\n    static deleteInvestDetail(detail) {\n        detail.delete()\n    }\n\n    static _upsertInvest(productId, productName, productTypeCode, money, happenTime, recordType,\n        count = null, buySellId = null, id = null) {\n        var detail = new InvestmentDetail()\n        detail.id = id\n        detail.productId = productId\n        detail.productName = productName\n        detail.productType = InvestmentType.getByCode(productTypeCode)\n        detail.money = money\n        detail.count = count\n        detail.happenTime = happenTime\n        detail.buySellId = buySellId\n        detail.recordType = recordType\n        return detail.save()\n    }\n}\n\nexport default InvestmentService","import { DataUtil, MoneyUtil, TimeUtil } from \"../../utils/utils\"\nimport { IncomeExpenditureDetail } from \"../entity/income_expenditure\"\nimport { IncomeExpenditureService } from \"./income_expenditure_service\"\nimport InvestmentService from \"./investment_service\"\n\nclass IncomeExpenditureVMService {\n\n    static queryMonthData(monthDate) {\n        return this._calIncomeExpendData(IncomeExpenditureService.queryMonth(monthDate))\n    }\n\n    static queryYearData(startMonthDate) {\n        let data = this._calIncomeExpendData(IncomeExpenditureService.queryTimeBetwen(\n            TimeUtil.monthStart(startMonthDate), TimeUtil.yearEnd(startMonthDate)))\n        let incomeDetailByMonth = this._calSumByMonth(data['income']['details'])\n        let expendDetailByMonth = this._calSumByMonth(data['expend']['details'])\n        data['income']['sumByMonth'] = incomeDetailByMonth\n        data['expend']['sumByMonth'] = expendDetailByMonth\n        return data\n    }\n\n    static _calSumByMonth(details) {\n        let sumByMonth = {}\n        for(const detail of details) {\n            let monthStr = TimeUtil.monthStr(detail.happenTime)\n            if(!(monthStr in sumByMonth)) {\n                sumByMonth[monthStr] = 0\n            }\n            sumByMonth[monthStr] += detail.money\n        }\n        return Object.keys(sumByMonth).map(month => {\n            return {\n                \"month\": month,\n                \"total\": sumByMonth[month]\n            }\n        })\n    }\n\n    static _calIncomeExpendData(details) {\n        let result = {\n            'income': {\n                'total': 0,\n                'details': []\n            },\n            'expend': {\n                'total': 0,\n                'details': []\n            }\n        }\n        details.sort((a, b) => Math.abs(a.type.code) > Math.abs(b.type.code) ? 1 : -1).forEach(detail => {\n            let obj = result['expend']\n            if (detail.type.code > 0) {\n                obj = result['income']\n            }\n            obj.details.push(this._newEntityFromDetail(detail))\n            obj.total += detail.money\n        })\n        return result\n    }\n\n    /**\n     * @param {IncomeExpenditureDetail} detail \n     */\n    static _newEntityFromDetail(detail) {\n        return {\n            id: detail.id,\n            happenTime: detail.happenTime,\n            title: detail.type.name,\n            money: detail.money,\n            desc: detail.desc,\n            type: detail.type\n        }\n    }\n}\n\nclass InvestmentVMService {\n\n    static queryMonthData(monthDate) {\n        let startDate = TimeUtil.monthStart(monthDate)\n        let endDate = TimeUtil.monthEnd(monthDate)\n        let investMap = InvestmentService.getAllInvestDetailBefore(endDate)\n\n        return {\n            \"asset\": this._getInvestSummary(investMap.asset, startDate, endDate),\n            \"debt\": this._getInvestSummary(investMap.debt, startDate, endDate),\n            \"fund\": this._getInvestSummary(investMap.fund, startDate, endDate),\n            \"stock\": this._getInvestSummary(investMap.stock, startDate, endDate),\n        }\n    }\n\n    static queryYearData(startMonthDate) {\n        let startDate = TimeUtil.monthStart(startMonthDate)\n        let endDate = TimeUtil.yearEnd(startMonthDate)\n        let investMap = InvestmentService.getAllInvestDetailBefore(endDate)\n\n        return {\n            \"asset\": this._getInvestSummary(investMap.asset, startDate, endDate),\n            \"debt\": this._getInvestSummary(investMap.debt, startDate, endDate),\n            \"fund\": this._getInvestSummary(investMap.fund, startDate, endDate),\n            \"stock\": this._getInvestSummary(investMap.stock, startDate, endDate),\n        }\n    }\n\n    static getPaperProfit(product) {\n        if(DataUtil.isNull(product)) {\n            return 0\n        }\n        return product.currentPrice?.money - product.buySells?.totalMoney\n    }\n\n    static getPaperProfitPercent(product) {\n        return MoneyUtil.safeDivision(this.getPaperProfit(product), product.buySells?.totalMoney)\n    }\n\n    static getSellProfitPercent(product) {\n        return MoneyUtil.safeDivision(product.profits?.filterTotalMoney, Math.abs(product.buySells?.filterSellMoney))\n    }\n\n    static _getInvestSummary(details, startTimeDate, endTimeDate) {\n        let profitSummary = this._getProfitSummary(details, startTimeDate, endTimeDate)\n        return {\n            \"totalMoneys\": this._getTotalMoney(details),\n            \"totalProfitMoneys\": [profitSummary[0], profitSummary[1]],\n            \"products\": profitSummary[2] \n        }\n    }\n\n    static _getProfitSummary(details, startTimeDate, endTimeDate) {\n        let totalProfitMoney = 0\n        let totalFilterProfitMoney = 0\n        let products = {}\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            if (!DataUtil.isNull(detail['profits'])) {\n                let filterTotalMoney = 0\n                let filterDatas = []\n                detail['profits']['datas'].forEach(ele => {\n                    if (TimeUtil.inTime(ele.happenTime, startTimeDate, endTimeDate)) {\n                        filterTotalMoney += ele.money\n                        filterDatas.push(ele)\n                    }\n                })\n                totalProfitMoney += detail['profits']['totalMoney']\n                if(filterTotalMoney !== 0) {\n                    totalFilterProfitMoney += filterTotalMoney\n                    detail['profits']['filterDatas'] = filterDatas\n                    detail['profits']['filterTotalMoney'] = filterTotalMoney\n                }\n            }\n            if (!DataUtil.isNull(detail['buySells'])) {\n                let filterMoney = 0\n                let filterSellMoney = 0\n                let filterTotalCount = 0\n                let filterDatas = []\n                detail.buySells.datas.forEach(ele => {\n                    if (TimeUtil.inTime(ele.happenTime, startTimeDate, endTimeDate)\n                        && ele.money !== 0) {\n                        filterMoney += ele.money\n                        if(ele.money < 0) {\n                            filterSellMoney += ele.money\n                        }\n                        if(!DataUtil.notNumber(ele.count)) {\n                            filterTotalCount += ele.count\n                        }\n                        filterDatas.push(ele)\n                    }\n                })\n                detail['buySells']['filterMoney'] = filterMoney\n                detail['buySells']['filterSellMoney'] = filterSellMoney\n                detail['buySells']['filterTotalCount'] = filterTotalCount\n                detail['buySells']['filterDatas'] = filterDatas\n            }\n            products[productId] = detail\n        }\n        return [totalProfitMoney, totalFilterProfitMoney, products]\n    }\n\n    static _getTotalMoney(details) {\n        let totalCurrentPrice = 0, totalBuySellMoney = 0\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            if (!DataUtil.isNull(detail.currentPrice)) {\n                totalCurrentPrice += detail.currentPrice.money\n            }\n            if (!DataUtil.isNull(detail.buySells)) {\n                totalBuySellMoney += detail.buySells.totalMoney\n            }\n        }\n        return [totalCurrentPrice, totalBuySellMoney]\n    }\n}\n\nexport { IncomeExpenditureVMService , InvestmentVMService}","import React from 'react'\nimport { Upload, Button, DatePicker, version, Row, Tag, Table } from \"antd\"\nimport { Typography, Divider } from 'antd'\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { App } from '../..'\nimport { IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { Content } from 'antd/lib/layout/layout'\nimport { IncomeExpenditureVMService, InvestmentVMService } from '../../domain/service/view_model_service'\nimport { MoneyUtil } from '../../utils/utils'\n\nconst { Title, Paragraph, Text, Link } = Typography\n\nclass TestPage extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {}\n\t\tthis.testResults = []\n\t\tthis.group = 'default'\n\t\tthis.resultColumns = [{\n            title: 'id',\n            key: 'id',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.id}</Text>\n            }\n        }, {\n            title: 'success',\n            key: 'success',\n            dataIndex: 'entity',\n            render: (entity) => {\n\t\t\t\tlet color = 'green'\n                if (!entity.success) {\n                    color = 'red'\n                }\n                return <Tag color={color}>\n                    {entity.success ? \"Success\":\"Fail\"}\n                </Tag>\n            }\n        }, {\n            title: 'group',\n            key: 'group',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.group}</Text>\n            }\n        }, {\n            title: 'msg',\n            key: 'msg',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.msg}</Text>\n            },\n        }, {\n            title: 'actual',\n            key: 'actual',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.actual}</Text>\n            },\n        }, {\n            title: 'expect',\n            key: 'expect',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.expect}</Text>\n            },\n        },]\n\t}\n\n\trefreshPage() {\n\t\tthis.setState({\n\t\t\tupdateTime: new Date().getTime()\n\t\t})\n\t}\n\n\t_expect(actual, expect, msg='') {\n\t\tlet result = {}\n\t\tif(expect === actual) {\n\t\t\tresult = {\n\t\t\t\t'group': this.group,\n\t\t\t\t'success': true,\n\t\t\t\t'msg': msg,\n\t\t\t\t'expect': expect,\n\t\t\t\t'actual': actual\n\t\t\t}\n\t\t} else {\n\t\t\tresult = {\n\t\t\t\t'group': this.group,\n\t\t\t\t'success': false,\n\t\t\t\t'msg': msg,\n\t\t\t\t'expect': expect,\n\t\t\t\t'actual': actual\n\t\t\t}\n\t\t}\n\t\tresult['id'] = this.testResults.length + 1\n\t\tthis.testResults.push(result)\n\t}\n\n\t_testIncomeExpend() {\n\t\tthis.group = '_testIncomeExpend'\n\t\tlet data11 = IncomeExpenditureVMService.queryMonthData(new Date('2022-11'))\n\t\tthis._expect(data11['income']['total'], 3007018)\n\t\tthis._expect(data11['income']['details'].length, 2)\n\t\tthis._expect(data11['expend']['total'], -826853)\n\t\tthis._expect(data11['expend']['details'].length, 17)\n\n\t\tlet data10 = IncomeExpenditureVMService.queryMonthData(new Date('2022-10'))\n\t\tthis._expect(data10['income']['total'], 3260514)\n\t\tthis._expect(data10['income']['details'].length, 3)\n\t\tthis._expect(data10['expend']['total'], -1809859)\n\t\tthis._expect(data10['expend']['details'].length, 20)\n\n\t\tlet yearData01 = IncomeExpenditureVMService.queryYearData(new Date('2021-04'))\n\t\tthis._expect(yearData01['income']['total'], 14980332)\n\t\tthis._expect(yearData01['income']['details'].length, 9)\n\t\tthis._expect(yearData01['income']['sumByMonth'].length, 4)\n\t\tthis._expect(yearData01['expend']['total'], -164667437)\n\t\tthis._expect(yearData01['expend']['details'].length, 51)\n\t\tthis._expect(yearData01['expend']['sumByMonth'].length, 4)\n\t}\n\n\t_testInvestData() {\n\t\t/**\n\t\t * \t2022-10\n\t\t *  totalAssetMoneys (3) [17330631, 7500, 0]\n\t\t\ttotalDebtMoneys (3) [-894467, -850000, 0]\n\t\t\ttotalInvestMoneys (3) [50981840, 0, 57218750]\n\t\t\ttotalStockMoneys (3) [21153610, 28250, 24719638]\n\t\t\tlastMonthTotalMoney 97684540\n\t\t\tcurrentMonthTotalMoney 98374552\n\t\t\tcurrentMonthAddMoney 636405\n\t\t\ttotalPassiveMoney 35750\n\t\t\t\n\t\t\t2022-11\n\t\t\ttotalAssetMoneys (3) [16241803, 2650, 0]\n\t\t\ttotalDebtMoneys (3) [-6000, -1500000, 0]\n \t\t\ttotalInvestMoneys (3) [54335438, 0, 58088750]\n\t\t\ttotalStockMoneys (3) [21522750, -20, 24677398]\n\t\t\tlastMonthTotalMoney 98374552\n\t\t\tcurrentMonthTotalMoney 99001951\n\t\t\tcurrentMonthAddMoney 682795\n\t\t\ttotalPassiveMoney 2630\n\t\t */\n\t\tthis.group = '_testInvestData'\n\n\t\tlet monthData1 = InvestmentVMService.queryMonthData(new Date('2022-10'))\n\t\tthis._expect(monthData1['asset']['totalMoneys'][0], 17330631)\n\t\tthis._expect(monthData1['asset']['totalProfitMoneys'][1], 7500)\n\t\tthis._expect(monthData1['asset']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData1['debt']['totalMoneys'][0], -894467)\n\t\tthis._expect(monthData1['debt']['totalProfitMoneys'][1], -850000)\n\t\tthis._expect(monthData1['debt']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData1['fund']['totalMoneys'][0], 50981840)\n\t\tthis._expect(monthData1['fund']['totalProfitMoneys'][1], 0)\n\t\tthis._expect(monthData1['fund']['totalMoneys'][1], 57218750)\n\n\t\tthis._expect(monthData1['stock']['totalMoneys'][0], 21153610)\n\t\tthis._expect(monthData1['stock']['totalProfitMoneys'][1], 28250)\n\t\tthis._expect(monthData1['stock']['totalMoneys'][1], 24719638)\n\n\t\tlet monthData2 = InvestmentVMService.queryMonthData(new Date('2022-11'))\n\t\tthis._expect(monthData2['asset']['totalMoneys'][0], 16241803)\n\t\tthis._expect(monthData2['asset']['totalProfitMoneys'][1], 2650)\n\t\tthis._expect(monthData2['asset']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData2['debt']['totalMoneys'][0], -6000)\n\t\tthis._expect(monthData2['debt']['totalProfitMoneys'][1], -1500000)\n\t\tthis._expect(monthData2['debt']['totalMoneys'][1], 0)\n\n\t\tthis._expect(monthData2['fund']['totalMoneys'][0], 54335438)\n\t\tthis._expect(monthData2['fund']['totalProfitMoneys'][1], 0)\n\t\tthis._expect(monthData2['fund']['totalMoneys'][1], 58088750)\n\n\t\tthis._expect(monthData2['stock']['totalMoneys'][0], 21522750)\n\t\tthis._expect(monthData2['stock']['totalProfitMoneys'][1], -20)\n\t\tthis._expect(monthData2['stock']['totalMoneys'][1], 24677398)\n\t}\n\n\ttestAll() {\n\t\tthis.testResults = []\n\t\tthis._testIncomeExpend()\n\t\tthis._testInvestData()\n\t\tthis.refreshPage()\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Content className='Content'>\n\t\t\t\t<Divider orientation=\"center\">版本：{App.getVersion()}</Divider>\n\t\t\t\t<Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\", margin: \"10px 0\" }}>\n\t\t\t\t\t<Divider orientation=\"center\">测试按钮</Divider>\n\t\t\t\t\t<Button onClick={() => this.testAll()}>所有测试用例</Button>\n\t\t\t\t</Row>\n\t\t\t\t<Table columns={this.resultColumns} dataSource={this.testResults\n\t\t\t\t\t.filter((msg) => !msg['success']).map((msg, i) => {\n\t\t\t\t\t\treturn { key: i, entity: msg }\n\t\t\t\t\t})} />\n\t\t\t</Content>\n\t\t)\n\t}\n}\n\nexport default TestPage","import React from 'react'\nimport { Button, message, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, TimeUtil } from '../../../utils/utils';\nimport moment from 'moment';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nconst ItemNames = [\"type\", \"name\", \"desc\", \"money\", \"currentPrice\", \"currentProfit\", \"sellProfit\", \"count\", \"date\"]\n\nclass InputWidget extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = this.getInitialState()\n    }\n\n    static getMoney(s, key) {\n        let ponKey = key + \"Pon\"\n        let pon = s[ponKey] ? 1 : -1\n        if(DataUtil.notNumber(s[key])) {\n            return NaN\n        } else {\n            return s[key] * pon * 100\n        }\n    }\n\n    getInitialState() {\n        let result = {}\n        ItemNames.forEach(element => {\n            result[element] = null\n        })\n        return result\n    }\n\n    getOpts(code2Name) {\n        let opts = []\n        for (let code of Object.keys(code2Name)) {\n            opts.push(<Option key={code} value={code}>{code2Name[code][0]}</Option>)\n        }\n        return opts\n    }\n\n    itemToWidget(item) {\n        let stateCode = item.name\n        let nameAppend = (item.required ?? false) ? \"(必填)\" : \"\"\n        let hint = \"\"\n        let defaultValue = item.defaultValue\n        if(DataUtil.isNull(this.state[stateCode]) && !DataUtil.isNull(defaultValue)) {\n            this.state[stateCode] = defaultValue\n        }\n        switch (item.name) {\n            case \"type\":\n                let typeName = stateCode + \"Name\"\n                let parentCode = stateCode + \"ParentCode\"\n                let parentName = stateCode + \"ParentName\"\n                let opts = this.getOpts(item.code2Name)\n                return <Row align='middle'>\n                    <Col span={8}>\n                        <Text >类型{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Select style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value,\n                                    [typeName]: item.code2Name[value][0],\n                                    [parentCode]: item.code2Name[value][1],\n                                    [parentName]: item.code2Name[value][2]\n                                })\n                            }}>\n                            {opts}\n                        </Select>\n                    </Col>\n                </Row>\n            case \"name\":\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8} >\n                        <Text >名称{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Input placeholder='名称' style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(event) => {\n                                this.setState({\n                                    [stateCode]: event.target.value\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"money\":\n            case \"currentPrice\":\n            case \"currentProfit\":\n            case \"sellProfit\":\n            case \"count\":\n                let pon = item.moneyPon\n                hint = item.hint ?? \"金额\"\n                let ponKey = stateCode + \"Pon\"\n                this.state[ponKey] = pon\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <InputNumber style={{ width: \"150px\" }} addonBefore={pon ? \"+\" : \"-\"}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"date\":\n                if(!DataUtil.isNull(item.inMonth)) {\n                    if(DataUtil.isNull(this.state[stateCode]) || !TimeUtil.inMonth(this.state[stateCode], new Date(item.inMonth))) {\n                        this.state[stateCode] = new Date(item.inMonth)\n                    }\n                }\n                hint = item.hint ?? \"发生日期\"\n                let picker = item.picker ?? \"\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <DatePicker style={{ width: \"150px\" }}\n                            picker={picker}\n                            value={moment(this.state[stateCode])}\n                            onChange={(m, dateString) => {\n                                this.setState({ \n                                    [stateCode]: m.toDate(),\n                                 })\n                            }} />\n                    </Col>\n                </Row>\n            case \"desc\":\n                hint = item.hint ?? \"描述\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Input placeholder='描述' style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(event) => {\n                                this.setState({ [stateCode]: event.target.value })\n                            }} />\n                    </Col>\n                </Row>\n            default:\n                return <Row>\n                    <Text>未支持输入配置 {item.name}</Text>\n                </Row>\n        }\n    }\n\n    checkData(state, item) {\n        try {\n            let value = state[item.name]\n            if(item.required === true && DataUtil.isNull(value)) {\n                throw new Error(item.name + \" 必须输入\")\n            }\n            if(item.isNum === true && isNaN(value)) {\n                throw new Error(item.name + \" 必须为数字\")\n            }\n            if(!DataUtil.isNull(item.inMonth)) {\n                if(!TimeUtil.inMonth(value, new Date(item.inMonth))) {\n                    throw new Error(\"发生日期仅可选在当前月份：\" + item.inMonth)\n                }\n            }\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    render() {\n        const handleSubmit = () => {\n            for (let item of this.props.cfgs) {\n                if (!this.checkData(this.state, item)) {\n                    return\n                }\n            }\n            if (this.props.onSubmit(this.state)) {\n                this.setState(this.getInitialState())\n            }\n        };\n        let rows = []\n        for (let item of this.props.cfgs) {\n            rows.push(this.itemToWidget(item))\n        }\n\n        return (<Card title={this.props.title ?? \"新增\"} style={{ margin: \"0px 5px\"}} bodyStyle={{padding: \"25px\"}}>\n            {rows}\n            <Row justify='center' style={{ margin: \"15px 0 0 0\" }}>\n                <Col>\n                    <Button type=\"primary\" onClick={handleSubmit}> 提交 </Button>\n                </Col>\n            </Row>\n        </Card>)\n    }\n}\n\nexport default InputWidget","import { Col, Row, Tag, Typography } from \"antd\";\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass UIUtils {\n\n    static getProductTag(productType) {\n        return <Tag color={this._getProductColor(productType)} key={productType.code}>\n            {productType.name}\n        </Tag>\n    }\n\n    static _getProductColor(productType) {\n        if (productType.isAsset()) {\n            return 'geekblue'\n        } else if (productType.isDebt()) {\n            return 'green'\n        } else if(productType.isStock()) {\n            return 'red'\n        } else {\n            return 'gold'\n        }\n    }\n\n    static createShowTextRow(title, text, textType = \"\") {\n        return (<Row align='middle' style={{ margin: '0 10px', padding: '4px 0', }} >\n            <Col span={12}>\n                <Text type={textType} strong>{title}</Text>\n            </Col>\n            <Col span={12} align='right'>\n                <Text type={textType} strong>{text}</Text>\n            </Col>\n        </Row>\n        )\n    }\n}\n\nexport { UIUtils }","import { BaseRepo } from './base_repo';\nimport { App, DB_INIT } from '../..';\nimport { SummaryData, SummaryType } from '../entity/summary';\n\nclass SummaryDataRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"data_summary\"\n    }\n\n    /**\n      * @param {SummaryData} entity \n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        }\n    }\n\n    selectAllMonthKey() {\n        return this.convert(App.db?.select(this.tablename, ['type'], [SummaryType.BY_MONTH_KEY.code], ['=']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new SummaryData()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = SummaryType.getByCode(data[3])\n            detail.time = new Date(data[4])\n            detail.money = data[5]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport {SummaryDataRepo}","import { SummaryDataRepo } from '../repo/summary_repo';\nimport { BaseEntity } from './base_entity';\n\n//数据总结\nclass SummaryData extends BaseEntity {\n    /**\n     * @type {SummaryType}\n     */\n    type = null\n    time = null\n    money = null\n\n    static repo = new SummaryDataRepo()\n\n    static queryAllMonthKey() {\n        return this.repo.selectAllMonthKey()\n    }\n\n    static delete(id) {\n        this.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        SummaryData.repo.upsert(this)\n    }\n}\n\nclass SummaryType {\n    static BY_MONTH_KEY = new SummaryType(1, \"按月展示的可用月份\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BY_MONTH_KEY]\n    }\n}\n\nexport {SummaryData, SummaryType}","import { TimeUtil } from \"../../utils/utils\"\nimport { SummaryData, SummaryType } from \"../entity/summary\"\n\nclass SummaryService {\n\n    static addMonth(monthDate) {\n        var data = new SummaryData()\n        data.type = SummaryType.BY_MONTH_KEY\n        data.time = TimeUtil.monthStart(monthDate)\n        data.save()\n    }\n\n    static queryMonths() {\n        var monthDatas = SummaryData.queryAllMonthKey()\n        console.log(monthDatas)\n        return monthDatas.map(d => {\n            return TimeUtil.monthStr(d.time)\n        })\n    }\n}\n\nexport {SummaryService}","import React from 'react'\nimport { Modal, Form, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport InputWidget from './input_widget'\n\nclass CusDialog extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        let title = this.props.title\n        let visible = this.props.visible\n        let cfgs = this.props.cfgs\n        return <Modal title={title} visible={visible}\n            footer={null}\n            onCancel={() => this.props.onCancel()}>\n            <InputWidget key={this.props.key} title=\"\" cfgs={cfgs} onSubmit={(s) => {\n                return this.props.onOk(s)\n            }} />\n        </Modal>\n    }\n}\n\nexport { CusDialog }","import React from 'react'\nimport { Table, Tag, Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography, message, List, Breadcrumb, Menu } from \"antd\"\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport InputWidget from './widget/input_widget';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { InvestmentRecordType, InvestmentType } from '../../domain/entity/investment';\nimport { IncomeExpenditureVMService, InvestmentVMService } from '../../domain/service/view_model_service';\nimport { UIUtils } from '../ui_utils';\nimport { SummaryService } from '../../domain/service/summary_service';\nimport { CusDialog } from './widget/cus_dialog';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass MonthPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.incomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.title === '主动收入' || entity.title === '被动收入') {\n                    color = 'red'\n                } else if (entity.title === '主动支出' || entity.title === '被动支出') {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.title}>\n                    {entity.title}\n                </Tag>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            }\n        }]\n        this.subIncomeExpendColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.title}</Text>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.money, b.entity.money)\n        }, {\n            title: '描述',\n            key: 'desc',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.desc}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => {\n                if(!DataUtil.isNull(record.entity.id)) {\n                    return <Space size=\"middle\">\n                        <a onClick={() => {\n                            this.deleteIncomeExpendDetail(record.entity.id)\n                        }}>删除</a>\n                    </Space>\n                }\n            }   \n        },]\n\n        this.assetDebtColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        },  {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let type = \"\"\n                if (!TimeUtil.inMonth(entity.currentPrice?.happenTime, this.monthDate)) {\n                    type = \"secondary\"\n                }\n                return <Text type={type}>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '总额',\n            key: 'currentPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n        }]\n        this.subAssetDebtColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let type = \"\"\n                if (!TimeUtil.inMonth(entity.currentPrice?.happenTime, this.monthDate)) {\n                    type = \"secondary\"\n                }\n                return <Text type={type}>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.filterSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.filterSellMoney, b.entity.buySells?.filterSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = InvestmentVMService.getSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = InvestmentVMService.getSellProfitPercent(a.entity)\n                let bsellProfitPercent = InvestmentVMService.getSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n            }\n        }, {\n            title: '当期投资',\n            key: 'timeInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.filterMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.filterMoney, b.entity.buySells?.filterMoney)\n        }, {\n            title: '当期账面利润',\n            key: 'qoqPaperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(this.getQoqPaperProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(this.getQoqPaperProfit(a.entity), this.getQoqPaperProfit(b.entity))\n            }\n        }, {\n            title: '当期账面利润率',\n            key: 'qoqPaperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = this.getQoqPaperProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = this.getQoqPaperProfitPercent(a.entity)\n                let bpaperProfitPercent = this.getQoqPaperProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = InvestmentVMService.getPaperProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = InvestmentVMService.getPaperProfitPercent(a.entity)\n                let bpaperProfitPercent = InvestmentVMService.getPaperProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(InvestmentVMService.getPaperProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(InvestmentVMService.getPaperProfit(a.entity), InvestmentVMService.getPaperProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        },]\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.money) + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n    }\n\n    getQoqPaperProfit(entity) {\n        let lastMonthPaperProfit = InvestmentVMService.getPaperProfit(this._getLastMonthProductDetail(entity.info.productId))\n        let paperProfit = InvestmentVMService.getPaperProfit(entity)\n        return paperProfit - lastMonthPaperProfit\n    }\n\n    //用这个月新增的账面利润 / 总投资额 得到这个月的收益率\n    getQoqPaperProfitPercent(entity) {\n        return MoneyUtil.safeDivision(this.getQoqPaperProfit(entity), entity?.buySells?.totalMoney)\n    }\n\n    _getLastMonthProductDetail(productId) {\n        for(let item of [this.lastMonthAllInvestData['fund'], this.lastMonthAllInvestData['stock'], \n            this.lastMonthAllInvestData['asset'], this.lastMonthAllInvestData['debt']]) {\n            if(productId in item['products']) {\n                return item['products'][productId]\n            }\n        }\n        return null\n    }\n\n    insertData(inputValues) {\n        try {\n            let money = InputWidget.getMoney(inputValues, \"money\")\n            let date = inputValues.date\n            IncomeExpenditureService.upsert(money,\n                IncomeExpenditureType.getByCode(inputValues.type), date, inputValues.desc ?? \"\")\n            this.refreshPage()\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    addBuyInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let count = s.count\n        let happenTime = s.date\n        InvestmentService.addBuyInvest(productCode, productName, productTypeCode, count, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    addSellInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let count = s.count\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let currentProfit = InputWidget.getMoney(s, \"currentProfit\")\n        let sellProfit = InputWidget.getMoney(s, \"sellProfit\")\n        let happenTime = s.date\n        if (!DataUtil.notNumber(sellProfit)) {\n            InvestmentService.addSellInvestOfProfit(productCode, productName, productTypeCode, count, money, sellProfit, currentPrice, happenTime)\n        } else if (!DataUtil.notNumber(currentProfit)) {\n            InvestmentService.addSellInvest(productCode, productName, productTypeCode, count, money, currentPrice, currentProfit, happenTime)\n        } else {\n            message.error(\"卖出利润 或 账面利润 必须填写一个！\")\n            return false\n        }\n        this.refreshPage()\n        return true\n    }\n\n    addAssetDebtProfit(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let happenTime = s.date\n        InvestmentService.addAssetDebtProfit(productCode, productName, productTypeCode, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    deleteIncomeExpendDetail(id) {\n        IncomeExpenditureService.delete(id)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    getByMonthSideDatas() {\n        var months = SummaryService.queryMonths()\n        this.months = months\n        var map = {}\n        months.forEach(element => {\n            let year = element.substring(0, 4)\n            if (DataUtil.isNull(map[year])) {\n                map[year] = []\n            }\n            map[year].push(element)\n        })\n        console.log(map)\n        return map\n    }\n\n    showAddNewMonthDialog() {\n        this.setState({\n            showDialog: \"addNewMonth\",\n        })\n    }\n\n    addNewMoth(d) {\n        if (isNaN(d)) {\n            message.error(\"请输入有效月份，如 2022-5\")\n        } else {\n            if (this.months.includes(TimeUtil.monthStr(d))) {\n                message.error(\"已有当前月份\")\n                this.hideDialog()\n            } else {\n                SummaryService.addMonth(d)\n                this.state.sideKey = TimeUtil.monthStr(d)\n                this.hideDialog()\n            }\n        }\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n        })\n    }\n\n    render() {\n        let siderItems = []\n        let openKeys = []\n        let sideDatas = this.getByMonthSideDatas()\n        let lastMonth = null\n        siderItems = Object.keys(sideDatas).sort((a, b) => b > a ? 1 : -1).map((year, i) => {\n            openKeys.push(year)\n            return {\n                key: year,\n                label: year,\n                children: sideDatas[year].sort((a, b) => b > a ? 1 : -1).map((month, j) => {\n                    if (lastMonth == null) { lastMonth = month }\n                    return {\n                        key: month,\n                        label: month,\n                    };\n                }),\n            };\n        })\n        if (DataUtil.isNull(this.state.sideKey)) {\n            this.state.sideKey = lastMonth\n        }\n        this.monthDate = new Date(this.state.sideKey)\n        let currentMonthDate = this.monthDate\n        if (DataUtil.notNumber(currentMonthDate)) {\n            return <Content />\n        }\n        console.log(\"month page render \", currentMonthDate)\n        //处理一些类型数据\n        let expendCode2Name = {}, incomeCode2Name = {}\n        IncomeExpenditureType.toList(IncomeExpenditureService.getExpenditureTypes()).forEach(type => {\n            expendCode2Name[type.code] = [type.name]\n        })\n        IncomeExpenditureType.toList(IncomeExpenditureService.getIncomeTypes()).forEach(type => {\n            incomeCode2Name[type.code] = [type.name]\n        })\n        let investProductCode2Name = {}, assetProductCode2Name = {}, debtProductCode2Name = {}\n        InvestmentService.queryProducts().forEach(entity => {\n            if (entity.type.isAsset()) {\n                assetProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else if (entity.type.isDebt()) {\n                debtProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else {\n                investProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            }\n        })\n        //处理收支数据\n        let incomeExpendData = []\n        let monthData = IncomeExpenditureVMService.queryMonthData(currentMonthDate)\n        let totalIncome = monthData['income']['total'], totalExpend = monthData['expend']['total']\n\n        //处理资产、负债、投资的一些总数据\n        let allInvestData = InvestmentVMService.queryMonthData(currentMonthDate)\n        let passiveIncomeSummary = this._getPassiveIncomeSummary(allInvestData)\n        let passiveExpendSummary = this._getPassiveExpendSummary(allInvestData)\n\n        console.log(\"===== monthData     =====\", monthData)\n        console.log(\"===== allInvestData =====\", allInvestData)\n\n        this.lastMonthAllInvestData = InvestmentVMService.queryMonthData(TimeUtil.lastMonthEnd(currentMonthDate))\n\n        let currentMonthTotalMoney = this._getTotalMoney(allInvestData)\n        let lastMonthTotalMoney = this._getTotalMoney(this.lastMonthAllInvestData)\n        let currentMonthAddMoney = totalIncome + totalExpend + passiveIncomeSummary['total'] + passiveExpendSummary['total']\n\n        incomeExpendData.push({key: \"主动收入\", entity: this.newEntity(null, \"主动收入\", totalIncome, null, monthData['income']['details'])})    \n        incomeExpendData.push({key: \"被动收入\", entity: this.newEntity(null, \"被动收入\",  passiveIncomeSummary['total'], \n            null, passiveIncomeSummary['details'])})\n        incomeExpendData.push({key: \"主动支出\", entity: this.newEntity(null, \"主动支出\", totalExpend, null, monthData['expend']['details'])})\n        incomeExpendData.push({key: \"被动支出\", entity: this.newEntity(null, \"被动支出\", passiveExpendSummary['total'], \n            null, passiveExpendSummary['details'])})\n        incomeExpendData.push({key: \"新增现金\", entity: this.newEntity(null, \"新增现金\", currentMonthAddMoney, \n            null)})\n        incomeExpendData.push({key: \"上期总资产\", entity: this.newEntity(null, \"上期总资产\", lastMonthTotalMoney, \n            null)})\n\n        let totalMoneyEntitys = []\n        totalMoneyEntitys.push(this.newEntity(null, \"资产总额\", allInvestData['asset']['totalMoneys'][0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"负债总额\", allInvestData['debt']['totalMoneys'][0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"投资总额\", allInvestData['fund']['totalMoneys'][1], `账面价值：${MoneyUtil.getStr(allInvestData['fund']['totalMoneys'][0])}`))\n        totalMoneyEntitys.push(this.newEntity(null, \"股票总额\", allInvestData['stock']['totalMoneys'][1], `账面价值：${MoneyUtil.getStr(allInvestData['stock']['totalMoneys'][0])}`))\n        incomeExpendData.push({key: \"当前总资产\", entity: this.newEntity(null, \"当前总资产\", currentMonthTotalMoney, \n            null, totalMoneyEntitys)})\n\n        let subIncomeExpendRowRender = (record, index) => {\n            const data = [];\n            record.entity.child.forEach(ele => {\n                data.push({\n                    key: DataUtil.isNull(ele.id) ? ele.title : ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subIncomeExpendColumns} dataSource={data} pagination={false} sortDirections={['descend']}/>;\n        }\n        let subIncomeExpendRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.child) &&\n                record.entity.child.length > 0\n        }\n\n        //处理资产、负债、投资的表格数据\n        let fundData = this._mapToList(allInvestData['fund']['products'], true)\n        let stockData = this._mapToList(allInvestData['stock']['products'], true)\n        let assetDebtDatas = []\n        assetDebtDatas.push(...this._mapToList(allInvestData['asset']['products']),\n            ...this._mapToList(allInvestData['debt']['products']))\n\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.filterDatas.forEach(ele => {\n                for (let profit of record.entity.profits?.filterDatas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.filterDatas) &&\n                record.entity.buySells?.filterDatas.length > 0\n        }\n        let subAssetDebtRowRender = (record, index) => {\n            const data = [];\n            record.entity.profits.filterDatas.forEach(ele => {\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subAssetDebtColumns} dataSource={data} pagination={false} />;\n        }\n        let subAssetDebtRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.profits?.filterDatas) &&\n                record.entity.profits?.filterDatas.length > 0\n        }\n\n        let contentView = <Content className='Content'>\n                <Row>\n                    <Divider orientation=\"center\">使用步骤</Divider>\n                    <Space direction='vertical'>\n                        <Text>1. 还清各资产账户的借款（信用卡），记录资产现额</Text>\n                        <Text>2. 记录 支付宝/微信 当月的 收入/支出</Text>\n                        <Text>3. 记录 基金/股票 的 当月 买入/卖出 操作和当前现额等信息</Text>\n                        <Text>4. 检查 总资产环比误差 信息（大于0表示：新增现金少了/当前总资产多了），尽量保持500以下</Text>\n                    </Space>\n                </Row>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">新增收入/支出</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"收入\" cfgs={[{\n                            name: \"type\",\n                            code2Name: incomeCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                        <InputWidget title=\"支出\" cfgs={[{\n                            name: \"type\",\n                            code2Name: expendCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.incomeExpendColumns} dataSource={incomeExpendData}\n                            expandable={{\n                                expandedRowRender: subIncomeExpendRowRender,\n                                rowExpandable: subIncomeExpendRowExpandable\n                            }} pagination={{ pageSize: 20 }} sortDirections={['descend']} />\n                        <Divider orientation=\"center\">指标</Divider>\n                        {UIUtils.createShowTextRow(\"被动收入/支出（财富自有率）\", DataUtil.getPercent(passiveIncomeSummary['total'] / Math.abs(totalExpend + passiveExpendSummary['total'])))}\n                        {UIUtils.createShowTextRow(\"被动收入/主动收入\", DataUtil.getPercent(passiveIncomeSummary['total'] / totalIncome))}\n                        {this.createShowMoneyRowIfBiggerThan(\"总资产环比误差\", currentMonthTotalMoney - lastMonthTotalMoney - currentMonthAddMoney, [500, 1000])}\n                    </Col>\n                </Row>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">资产/负债</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"资产\" cfgs={[{\n                            name: \"type\",\n                            code2Name: assetProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"收益\",\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n\n                        <InputWidget title=\"负债\" cfgs={[{\n                            name: \"type\",\n                            code2Name: debtProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"money\",\n                            hint: \"亏损\",\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.assetDebtColumns} dataSource={assetDebtDatas}\n                            expandable={{\n                                expandedRowRender: subAssetDebtRowRender,\n                                rowExpandable: subAssetDebtRowExpandable\n                            }} pagination={{ pageSize: 20 }} scroll={{ x: 800 }} sortDirections={['descend']} />\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">投资</Divider>\n                    <Col span={10}>\n                        <InputWidget title=\"买入投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            hint: \"花费金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"count\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addBuyInvest(s)\n                        }} />\n                    </Col>\n                    <Col span={14}>\n                    <InputWidget title=\"卖出投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"count\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"卖出所得金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"sellProfit\",\n                            hint: \"卖出利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentProfit\",\n                            hint: \"账面利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: currentMonthDate\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addSellInvest(s)\n                        }} />\n                    </Col>\n                </Row>\n                <Table columns={this.investColumns} dataSource={stockData} expandable={{\n                            expandedRowRender: subInvestRowRender,\n                            rowExpandable: subInvestRowExpandable\n                        }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n                <Table columns={this.investColumns} dataSource={fundData} expandable={{\n                            expandedRowRender: subInvestRowRender,\n                            rowExpandable: subInvestRowExpandable\n                        }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n            </Content>\n        \n        return <Layout>\n                    <Sider width={200}>\n                        <Menu\n                            className='Menu'\n                            mode=\"inline\"\n                            openKeys={openKeys}\n                            selectedKeys={[this.state.sideKey]}\n                            items={siderItems}\n                            onSelect={(item) => {\n                                this.setState(() => this.state.sideKey = item.key)\n                            }}\n                        />\n                    </Sider>\n                    <Layout className='Layout-inner'>\n                        <Row align='middle'>\n                            <Col flex=\"auto\">\n                                <Breadcrumb>\n                                    <Breadcrumb.Item>{this.state.sideKey}</Breadcrumb.Item>\n                                </Breadcrumb>\n                            </Col>\n                            <Col span={12} align='right'>\n                                <Button onClick={() => this.showAddNewMonthDialog()}>新加月份</Button>\n                            </Col>\n                        </Row>\n                        {contentView}\n                    </Layout>\n                    <CusDialog title=\"新加月份\" visible={this.state.showDialog === \"addNewMonth\"}\n                        cfgs={[{\n                            name: \"date\",\n                            hint: \"月份\",\n                            picker: \"month\",\n                            defaultValue: new Date()\n                        }]}\n                        onOk={(state) => this.addNewMoth(state.date)}\n                        onCancel={() => this.hideDialog()} />\n                </Layout>\n    }\n\n    createShowMoneyRowIfBiggerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney > valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney > valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return UIUtils.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRowIfSmallerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney < valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney < valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return UIUtils.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRow(title, money) {\n        return UIUtils.createShowTextRow(title, MoneyUtil.getStr(money), \"\")\n    }\n\n    newEntity(happenTime, title, money, desc, child=[]) {\n        return {\n            happenTime: happenTime,\n            title: title,\n            money: money,\n            desc: desc,\n            child: child\n        }\n    }\n\n    _getTotalMoney(allInvestData) {\n        let totalAssetMoneys = allInvestData['asset']['totalMoneys']\n        let totalFundMoneys = allInvestData['fund']['totalMoneys']\n        let totalStockMoneys = allInvestData['stock']['totalMoneys']\n        let totalDebtMoneys = allInvestData['debt']['totalMoneys']\n        return totalAssetMoneys[0] + totalDebtMoneys[0] + totalFundMoneys[1] + totalStockMoneys[1]\n    }\n\n    _mapToList(productMap, filter=false) {\n        let arr = []\n        for (let productId of Object.keys(productMap)) {\n            let detail = productMap[productId]\n            if(filter && MoneyUtil.noValue(detail.currentPrice?.money) && MoneyUtil.noValue(detail.profits?.filterTotalMoney) && \n                MoneyUtil.noValue(detail.buySells?.filterMoney) && MoneyUtil.noValue(detail.buySells?.totalMoney)) {\n                //四个值全没有，不展示\n            } else {\n                arr.push({ key: productId, entity: detail })\n            }\n        }\n        return arr\n    }\n\n    _getProductsProfitEntitys(products) {\n        if(DataUtil.isEmpty(products)) {\n            return []\n        }\n        let profitEntitys = []\n        Object.keys(products).map(productId => {\n            let product = products[productId]\n            let filterDatas = product.profits?.filterDatas\n            if(!DataUtil.isNull(filterDatas)) {\n                for(let data of filterDatas) {\n                    profitEntitys.push(this.newEntity(data.happenTime, data.productName, data.money, null))\n                }\n            }\n        })\n        return profitEntitys\n    }\n\n    _getPassiveIncomeSummary(yearInvestData) {\n        let assetData = yearInvestData['asset']\n        let fundData = yearInvestData['fund']\n        let stockData = yearInvestData['stock']\n        let details = []\n        details.push(...this._getProductsProfitEntitys(assetData['products']),\n                 ...this._getProductsProfitEntitys(fundData['products']),\n                 ...this._getProductsProfitEntitys(stockData['products']))\n        return {\n            'total': assetData['totalProfitMoneys'][1] + fundData['totalProfitMoneys'][1] \n                + stockData['totalProfitMoneys'][1],\n            'details': details\n        }\n    }\n\n    _getPassiveExpendSummary(yearInvestData) {\n        let debtData = yearInvestData['debt']\n        let details = []\n        details.push(...this._getProductsProfitEntitys(debtData['products']))\n        return {\n            'total': debtData['totalProfitMoneys'][1],\n            'details': details\n        }\n    }\n}\n\nexport default MonthPage","import React from 'react'\nimport { Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { DataUtil, TimeUtil } from '../../utils/utils';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass TodoPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    //TODO 导入导出自动化 or 在线化 \n    //年度总结，月度、年度投资利润分析\n    //利率计算器\n    render() {\n        return (\n            <Content className='Content'>\n                <Text style={{fontSize: '50px'}}> TODO </Text>\n            </Content>\n        )\n    }\n}\n\nexport default TodoPage","import React from 'react'\nimport { Table, Tag, Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport InputWidget from './widget/input_widget';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { CusDialog } from './widget/cus_dialog';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass InvestPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'gold'\n                if (entity.info.productType.isStock()) {\n                    color = 'red'\n                }\n                return <Tag color={color} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = this.getPagerProfitProcent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = this.getPagerProfitProcent(a.entity)\n                let bpaperProfitPercent = this.getPagerProfitProcent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(this.getPagerProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(this.getPagerProfit(a.entity), this.getPagerProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.totalSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.totalSellMoney, b.entity.buySells?.totalSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = this.getSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = this.getSellProfitPercent(a.entity)\n                let bsellProfitPercent = this.getSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.totalMoney, b.entity.profits?.totalMoney)\n            }\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                var count = entity.buySells?.totalCount\n                return <Text>{Math.abs(count) == 0 ? \"-\" : Math.abs(count)}</Text>\n            },\n        },];\n\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(-1 * entity.money + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{Math.abs(entity.count) == 0 ? \"-\" : Math.abs(entity.count)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.productColumns = [\n            {\n                title: '类型',\n                key: 'type',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let color = 'gold'\n                    if (entity.type?.isAsset()) {\n                        color = 'geekblue'\n                    } else if (entity.type?.isDebt()) {\n                        color = 'green'\n                    } else if (entity.type?.isStock()) {\n                        color = 'red'\n                    }\n                    return <Tag color={color} key={entity.type?.code}>\n                        {entity.type?.name}\n                    </Tag>\n                },\n            }, {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.name}</Text>\n                },\n            }, {\n                title: '描述',\n                key: 'desc',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.desc}</Text>\n                },\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={() => { this.showEditProductDialog(record.entity) }}>编辑</a>\n                        <a onClick={() => { this.deleteProduct(record.entity) }}>删除</a>\n                    </Space>\n                ),\n            },\n        ];\n\n        this.productFixVoteColumns = [\n            {\n                title: '类型',\n                key: 'type',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let color = 'gold'\n                    return <Tag color={color} key={entity.productTypeCode}>\n                        {entity.productTypeName}\n                    </Tag>\n                },\n            }, {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.productName}</Text>\n                },\n            }, {\n                title: '定投额',\n                key: 'fixVote',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{MoneyUtil.getStr(entity.productFixVote)}</Text>\n                },\n            }, {\n                title: '账面利润率',\n                key: 'paperProfitPercent',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let paperProfitPercent = entity.paperProfitPercent\n                    return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                        {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n                },\n                sorter: (a, b) => {\n                    let apaperProfitPercent = a.entity.paperProfitPercent\n                    let bpaperProfitPercent = b.entity.paperProfitPercent\n                    return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n                }\n            }, {\n                title: '卖出利润率',\n                key: 'sellProfitPercent',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let sellProfitPercent = entity.sellProfitPercent\n                    return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                        {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n                },\n                sorter: (a, b) => {\n                    let asellProfitPercent = a.entity.sellProfitPercent\n                    let bsellProfitPercent = b.entity.sellProfitPercent\n                    return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n                }\n            }, {\n                title: '描述',\n                key: 'desc',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.product?.desc}</Text>\n                },\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => {\n                    if(!DataUtil.isNull(record.entity.product)) {\n                        return <Space size=\"middle\">\n                            <a onClick={() => { this.showEditProductDialog(record.entity.product) }}>编辑</a>\n                            <a onClick={() => { this.deleteProduct(record.entity.product) }}>删除</a>\n                        </Space>\n                    }\n                },\n            }];\n    }\n\n    getPagerProfit(entity) {\n        return entity.currentPrice?.money - entity.buySells?.totalMoney\n    }\n\n    getPagerProfitProcent(entity) {\n        return MoneyUtil.safeDivision(this.getPagerProfit(entity), entity.buySells?.totalMoney)\n    }\n\n    getSellProfitPercent(entity) {\n        return MoneyUtil.safeDivision(entity.profits?.totalMoney, Math.abs(entity.buySells?.totalSellMoney))\n    }\n\n    showEditProductDialog(detail) {\n        this.setState({\n            showDialog: \"editProduct\",\n            currentProduct: detail\n        })\n    }\n\n    editProduct(detail, state) {\n        InvestmentService.editProduct(detail, state.desc, InputWidget.getMoney(state, \"money\"))\n        this.hideDialog()\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n            currentProduct: null\n        })\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    addProduct(s) {\n        InvestmentService.upsertProduct(s.type, s.name, s.desc)\n        this.refreshPage()\n    }\n\n    queryProducts() {\n        return InvestmentService.queryProducts()\n    }\n\n    deleteProduct(entity) {\n        InvestmentService.deleteProduct(entity)\n        this.refreshPage()\n    }\n\n    queryAllInvestData() {\n        let map = InvestmentService.getAllInvestDetailBefore(null)\n        return map\n    }\n\n    render() {\n        console.log('invest page render')\n        let code2Name = {}\n        InvestmentService.getProductTypes().forEach(type => {\n            code2Name[type.code] = [type.name]\n        })\n        let productAssetDatas = []\n        let productStockDatas = []\n        let productInvestDatas = []\n        let productIdToProduct = {}\n        InvestmentService.queryProducts().sort((a, b) => Math.abs(a.type.code) < Math.abs(b.type.code) ? 1 : -1).forEach(entity => {\n            if(entity.type.isAsset() || entity.type.isDebt()) {\n                productAssetDatas.push({ key: entity.id, entity: entity })\n            } else if (entity.type.isStock()) {\n                productStockDatas.push({ key: entity.id, entity: entity })\n            } else {\n                productInvestDatas.push({ key: entity.id, entity: entity })\n            }\n            productIdToProduct[entity.id] = entity\n        })\n\n        let investMap = this.queryAllInvestData()\n\n        let investDatas = []\n        let stockDatas = []\n        let investFixVoteDatas = []\n        var totalFixVote = {\n            productTypeCode: 99999999,\n            productTypeName: \"汇总\",\n            productName: \"汇总\",\n            productFixVote: 0,\n            paperProfit: 0,\n            sellProfit: 0,\n            paperProfitPercent: 0,\n            sellProfitPercent: 0,\n        }\n        for (let productId of Object.keys(investMap.fund)) {\n            let detail = investMap.fund[productId]\n            investDatas.push({ key: productId, entity: detail })\n\n            var product = productIdToProduct[productId]\n            var paperProfitPercent = this.getPagerProfitProcent(detail)\n            var sellProfitPercent = this.getSellProfitPercent(detail)\n            var fixVoteEntity = {\n                product: product,\n                productTypeCode: product.type.code,\n                productTypeName: product.type.name,\n                productName: product.name,\n                productFixVote: product.fixVote,\n                paperProfit: product.fixVote * paperProfitPercent,\n                sellProfit: product.fixVote * sellProfitPercent,\n                paperProfitPercent: paperProfitPercent,\n                sellProfitPercent: sellProfitPercent,\n            }\n            totalFixVote.productFixVote += fixVoteEntity.productFixVote\n            totalFixVote.paperProfit += fixVoteEntity.paperProfit\n            totalFixVote.sellProfit += fixVoteEntity.sellProfit\n            investFixVoteDatas.push({key: productId, entity: fixVoteEntity})\n        }\n        totalFixVote.paperProfitPercent = totalFixVote.paperProfit / totalFixVote.productFixVote\n        totalFixVote.sellProfitPercent = totalFixVote.sellProfit / totalFixVote.productFixVote\n        investFixVoteDatas.push({key: 9999999, entity: totalFixVote})\n\n        for (let productId of Object.keys(investMap.stock)) {\n            let detail = investMap.stock[productId]\n            stockDatas.push({ key: productId, entity: detail })\n        }\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.datas.forEach(ele => {\n                for (let profit of record.entity.profits?.datas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.datas)\n        }\n        return (\n            <Content className='Content'>\n                <Divider orientation=\"center\">投资详情</Divider>\n                <Table columns={this.investColumns} dataSource={stockDatas} expandable={{\n                    expandedRowRender: subInvestRowRender,\n                    rowExpandable: subInvestRowExpandable\n                }} pagination={{pageSize: 20}} scroll={{ x: 1500 }} sortDirections={['descend']}/>\n                <Table columns={this.investColumns} dataSource={investDatas} expandable={{\n                    expandedRowRender: subInvestRowRender,\n                    rowExpandable: subInvestRowExpandable\n                }} pagination={{pageSize: 20}} scroll={{ x: 1500 }} sortDirections={['descend']}/>\n                <Divider orientation=\"center\">投资产品</Divider>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Col span={8}>\n                        <InputWidget title={\"新增投资产品\"} cfgs={[{\n                            name: \"type\",\n                            code2Name: code2Name,\n                            required: true\n                        }, {\n                            name: \"name\",\n                            required: true\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            this.addProduct(s)\n                            return true\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.productColumns} dataSource={productStockDatas} pagination={{pageSize: 10}}/>\n                        <Table columns={this.productFixVoteColumns} dataSource={investFixVoteDatas} \n                            pagination={{pageSize: 15}} scroll={{ x: 1000 }} sortDirections={['descend']}/>\n                        <Table columns={this.productColumns} dataSource={productAssetDatas} pagination={{pageSize: 10}}/>\n                    </Col>\n                </Row>\n                <CusDialog title=\"修改产品\" visible={this.state.showDialog === \"editProduct\"}\n                        key={this.state.currentProduct?.id}\n                        cfgs={[{\n                            name: \"money\",\n                            hint: \"定投额\",\n                            defaultValue: this.state.currentProduct?.fixVote / 100,\n                            moneyPon: true\n                        }, {\n                            name: \"desc\",\n                            defaultValue: this.state.currentProduct?.desc,\n                        }]}\n                        onOk={(state) => this.editProduct(this.state.currentProduct, state)}\n                        onCancel={() => this.hideDialog()} />\n            </Content>\n        )\n    }\n}\n\nexport default InvestPage","import React from 'react'\nimport { Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography, message } from \"antd\"\nimport { DataUtil, TimeUtil } from '../../utils/utils';\nimport { App, DB_INIT } from '../..';\nimport InputWidget from './widget/input_widget';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass InitPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    async refreshDB(files) {\n        await App.initDb(files[0])\n        this.props.onDbReady()\n    }\n\n    async create() {\n        await App.createDb()\n        this.props.onDbReady()\n    }\n\n    export() {\n        if (!DB_INIT) {\n            message.error(\"请先加载DB文件\")\n            return\n        }\n        App.db?.export()\n    }\n\n    click1() {\n    }\n\n    click2() {\n    }\n\n    render() {\n        return (\n            <Content className='Content'>\n                <Divider orientation=\"center\">版本：{App.getVersion()}</Divider>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\" }}>\n                    <Col span={8} align='center'>\n                        <Divider orientation=\"center\">新建DB文件</Divider>\n                        <Button onClick={() => this.create()}>新建</Button>\n                    </Col>\n                    <Col span={8} align='center'>\n                        <Divider orientation=\"center\">加载DB文件</Divider>\n                        <Text>{this.state.fileName}</Text>\n                        <input type='file' id='dbfile' accept=\".db\" onChange={(e) => this.refreshDB(e.target.files)} />\n                    </Col>\n                    <Col span={8} align='center'>\n                        <Divider orientation=\"center\">导出DB文件</Divider>\n                        <Button onClick={() => this.export()}>保存</Button>\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\", margin: \"10px 0\"}}>\n                    <Divider orientation=\"center\">测试按钮</Divider>\n                    <Button onClick={() => this.click1()}>click1</Button>\n                    <Button onClick={() => this.click2()}>click2</Button>\n                </Row>\n            </Content>\n        )\n    }\n}\n\nexport default InitPage","import React from 'react'\nimport { Table, Tag, Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography, message, List, Menu, Breadcrumb } from \"antd\"\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport InputWidget from './widget/input_widget';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { InvestmentRecordType, InvestmentType } from '../../domain/entity/investment';\nimport { SummaryService } from '../../domain/service/summary_service';\nimport { IncomeExpenditureVMService, InvestmentVMService } from '../../domain/service/view_model_service';\nimport { UIUtils } from '../ui_utils';\nimport { CusDialog } from './widget/cus_dialog';\nimport { Pie, Column, measureTextWidth} from '@ant-design/plots';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass YearPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            \"startMonth\": \"01\"\n        }\n\n        this.incomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.title === '主动收入' || entity.title === '被动收入') {\n                    color = 'red'\n                } else if (entity.title === '主动支出' || entity.title === '被动支出') {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.title}>\n                    {entity.title}\n                </Tag>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            }\n        }]\n        this.subIncomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.title}</Text>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.money, b.entity.money)\n        }, {\n            title: '描述',\n            key: 'desc',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.desc}</Text>\n            },\n        },]\n\n        this.assetDebtColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '总额',\n            key: 'currentPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n        }]\n        this.subAssetDebtColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        },]\n\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return UIUtils.getProductTag(entity.info.productType)\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.filterSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.filterSellMoney, b.entity.buySells?.filterSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = InvestmentVMService.getSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = InvestmentVMService.getSellProfitPercent(a.entity)\n                let bsellProfitPercent = InvestmentVMService.getSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.filterTotalMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.filterTotalMoney, b.entity.profits?.filterTotalMoney)\n            }\n        }, {\n            title: '当期投资',\n            key: 'timeInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.filterMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.filterMoney, b.entity.buySells?.filterMoney)\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = InvestmentVMService.getPaperProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = InvestmentVMService.getPaperProfitPercent(a.entity)\n                let bpaperProfitPercent = InvestmentVMService.getPaperProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(InvestmentVMService.getPaperProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(InvestmentVMService.getPaperProfit(a.entity), InvestmentVMService.getPaperProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        },]\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.money) + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        },]\n    }\n\n    getByYearSideDatas(monthStr = \"01\") {\n        var months = SummaryService.queryMonths()\n        this.months = months\n        var items = []\n        months.forEach(element => {\n            let year = element.substring(0, 4)\n            let startMonth = year + \"-\" + monthStr\n            if (!items.includes(startMonth)) {\n                items.push(startMonth)\n            }\n        })\n        return items.sort((a, b) => b > a ? 1 : -1)\n    }\n\n    showDialog(type) {\n        this.setState({\n            showDialog: type,\n        })\n    }\n\n    modifyMonth(d) {\n        if (isNaN(d)) {\n            message.error(\"请输入有效月份，如 2022-5\")\n        } else {\n            this.state.startMonth = TimeUtil.monthStr(d).substring(5, 7)\n            this.state.sideKey = null\n            this.hideDialog()\n        }\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n        })\n    }\n\n    getAggregateGroupDataArr(details) {\n        let dataMap = {}\n        let total = 0\n        for(let detail of details) {\n            let type = IncomeExpenditureType.getByCode(detail.type.code)\n            type = type.getGroup()\n            if(!(type.code in dataMap)) {\n                dataMap[type.code] = {\n                    \"name\": type.name,\n                    \"code\": type.code,\n                    \"value\": 0\n                }\n            }\n            let money = Math.abs(detail.money/100)\n            dataMap[type.code]['value'] += money\n            total += money\n        }\n        let dataArr = Object.keys(dataMap).map(code => {\n            dataMap[code]['valuePercent'] = dataMap[code]['value']/total\n            return dataMap[code]\n        }).sort((a, b) => DataUtil.compare(a.code, b.code))\n        return dataArr\n    }\n\n    getAggregateTimeDataArr(details, groupCode) {\n        let dataMap = {}\n        let total = 0\n        for(let detail of details) {\n            let type = IncomeExpenditureType.getByCode(detail.type.code)\n            let groupType = type.getGroup()\n            if(groupCode === groupType.code) {\n                let key = TimeUtil.monthStr(detail.happenTime) + \"_\" + type.code\n                if(!(key in dataMap)) {\n                    dataMap[key] = {\n                        \"name\": type.name,\n                        \"code\": type.code,\n                        \"groupCode\": groupType.code,\n                        \"groupName\": groupType.name,\n                        \"month\": TimeUtil.monthStr(detail.happenTime),\n                        \"value\": 0\n                    }\n                }\n                let money = Math.abs(detail.money/100)\n                dataMap[key]['value'] += money\n                total += money\n            }\n        }\n        let dataArr = Object.keys(dataMap).map(key => {\n            dataMap[key]['valuePercent'] = dataMap[key]['value']/total\n            return dataMap[key]\n        }).sort((a, b) => {\n            if(a.month == b.month) {\n                return DataUtil.compare(a.code, b.code)\n            } else {\n                return a.month > b.month ? 1 : -1\n            }\n        })\n        return dataArr\n    }\n\n    render() {\n        let sideDatas = this.getByYearSideDatas(this.state.startMonth)\n        let siderItems = sideDatas.map((yearStartMonth, i) => {\n            return {\n                key: yearStartMonth,\n                label: yearStartMonth\n            }\n        })\n        if (DataUtil.isNull(this.state.sideKey)) {\n            this.state.sideKey = sideDatas[0]\n        }\n        let yearStartMonthDate = new Date(this.state.sideKey)\n\n        let yearData = IncomeExpenditureVMService.queryYearData(yearStartMonthDate)\n        let allInvestData = InvestmentVMService.queryYearData(yearStartMonthDate)\n        console.log(\"===== yearData     =====\", yearData)\n        console.log(\"===== allInvestData =====\", allInvestData)\n\n        let passiveIncomeSummary = this._getPassiveIncomeSummary(allInvestData)\n        let passiveExpendSummary = this._getPassiveExpendSummary(allInvestData)\n\n        let incomeExpendData = []\n        incomeExpendData.push({\n            key: \"主动收入\", entity: this.newEntity(null, \"主动收入\",\n                yearData['income']['total'], null, yearData['income']['sumByMonth'].map(it => {\n                    return this.newEntity(null, it['month'], it['total'], null)\n                }))\n        })\n        incomeExpendData.push({\n            key: \"被动收入\", entity: this.newEntity(null, \"被动收入\",\n                passiveIncomeSummary['total'], null, passiveIncomeSummary['details'])\n        })\n        incomeExpendData.push({\n            key: \"主动支出\", entity: this.newEntity(null, \"主动支出\",\n                yearData['expend']['total'], null, yearData['expend']['sumByMonth'].map(it => {\n                    return this.newEntity(null, it['month'], it['total'], null)\n                }))\n        })\n        incomeExpendData.push({\n            key: \"被动支出\", entity: this.newEntity(null, \"被动支出\",\n                passiveExpendSummary['total'], null, passiveExpendSummary['details'])\n        })\n        incomeExpendData.push({\n            key: \"新增现金\", entity: this.newEntity(null, \"新增现金\",\n                yearData['income']['total'] + passiveIncomeSummary['total'] +\n                yearData['expend']['total'] + passiveExpendSummary['total'], null)\n        })\n\n        let subIncomeExpendRowRender = (record, index) => {\n            const data = [];\n            record.entity.child.forEach(ele => {\n                data.push({\n                    key: DataUtil.isNull(ele.id) ? ele.title : ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subIncomeExpendColumns} dataSource={data} pagination={false} sortDirections={['descend']} />;\n        }\n        let subIncomeExpendRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.child) &&\n                record.entity.child.length > 0\n        }\n        let fundData = this._mapToList(allInvestData['fund']['products'], true)\n        let stockData = this._mapToList(allInvestData['stock']['products'], true)\n        let assetDebtDatas = []\n        assetDebtDatas.push(...this._mapToList(allInvestData['asset']['products']),\n            ...this._mapToList(allInvestData['debt']['products']))\n\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.filterDatas.forEach(ele => {\n                for (let profit of record.entity.profits?.filterDatas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.filterDatas) &&\n                record.entity.buySells?.filterDatas.length > 0\n        }\n        let subAssetDebtRowRender = (record, index) => {\n            const data = [];\n            record.entity.profits.filterDatas.forEach(ele => {\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subAssetDebtColumns} dataSource={data} pagination={false} />;\n        }\n        let subAssetDebtRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.profits?.filterDatas) &&\n                record.entity.profits?.filterDatas.length > 0\n        }\n\n        let incomeGroupDataArr = this.getAggregateGroupDataArr(yearData.income.details)\n        let expendGroupDataArr = this.getAggregateGroupDataArr(yearData.expend.details)\n        \n        let barData = []\n        if(!DataUtil.isNull(this.state.selectedGroupCode)) {\n            let groupType = IncomeExpenditureType.getByCode(this.state.selectedGroupCode)\n            if(groupType.isIncome()) {\n                barData = this.getAggregateTimeDataArr(yearData.income.details, groupType.code)\n            } else {\n                barData = this.getAggregateTimeDataArr(yearData.expend.details, groupType.code)\n            }\n        }\n\n        let contentView = <Content>\n            <Table columns={this.incomeExpendColumns} dataSource={incomeExpendData}\n                expandable={{\n                    expandedRowRender: subIncomeExpendRowRender,\n                    rowExpandable: subIncomeExpendRowExpandable\n                }} pagination={{ pageSize: 20 }} sortDirections={['descend']} />\n            <Row>\n                <Col span={12}>\n                    <Pie {...this._getPieConfig(incomeGroupDataArr)} />\n                </Col>\n                <Col span={12}>\n                    <Pie {...this._getPieConfig(expendGroupDataArr)} />\n                </Col>\n            </Row>\n            <Row style={{ padding: '10px'}}>\n                <Col span={24}>\n                    {barData.length > 0 ? <Column {...this._getBarConfig(barData)} /> : <div/>}\n                </Col>\n            </Row>\n            <Divider orientation=\"center\">指标</Divider>\n            {UIUtils.createShowTextRow(\"被动收入/支出（财富自有率）\", DataUtil.getPercent(passiveIncomeSummary['total'] /\n                Math.abs(yearData['expend']['total'] + passiveExpendSummary['total'])))}\n            {UIUtils.createShowTextRow(\"被动收入/主动收入\", DataUtil.getPercent(passiveIncomeSummary['total'] / yearData['income']['total']))}\n            <Divider orientation=\"center\">资产/负债</Divider>\n            <Table columns={this.assetDebtColumns} dataSource={assetDebtDatas}\n                expandable={{\n                    expandedRowRender: subAssetDebtRowRender,\n                    rowExpandable: subAssetDebtRowExpandable\n                }} pagination={{ pageSize: 20 }} scroll={{ x: 800 }} sortDirections={['descend']} />\n            <Divider orientation=\"center\">投资</Divider>\n            <Table columns={this.investColumns} dataSource={stockData} expandable={{\n                expandedRowRender: subInvestRowRender,\n                rowExpandable: subInvestRowExpandable\n            }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n            <Table columns={this.investColumns} dataSource={fundData} expandable={{\n                expandedRowRender: subInvestRowRender,\n                rowExpandable: subInvestRowExpandable\n            }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n        </Content>\n\n        return <Layout>\n            <Sider width={200}>\n                <Menu\n                    className='Menu'\n                    mode=\"inline\"\n                    selectedKeys={[this.state.sideKey]}\n                    items={siderItems}\n                    onSelect={(item) => {\n                        this.setState(() => this.state.sideKey = item.key)\n                    }}\n                />\n            </Sider>\n            <Layout className='Layout-inner'>\n                <Row align='middle'>\n                    <Col flex=\"auto\">\n                        <Breadcrumb>\n                            <Breadcrumb.Item>{this.state.sideKey}</Breadcrumb.Item>\n                        </Breadcrumb>\n                    </Col>\n                    <Col span={12} align='right'>\n                        <Button onClick={() => this.showDialog(\"modifyStartMonth\")}>调整开始月份</Button>\n                    </Col>\n                </Row>\n                {contentView}\n            </Layout>\n            <CusDialog title=\"调整开始月份\" visible={this.state.showDialog === \"modifyStartMonth\"}\n                cfgs={[{\n                    name: \"date\",\n                    hint: \"月份\",\n                    picker: \"month\",\n                    defaultValue: new Date('2022-01')\n                }]}\n                onOk={(state) => this.modifyMonth(state.date)}\n                onCancel={() => this.hideDialog()} />\n        </Layout>\n    }\n\n    _getBarConfig(barData) {\n        const config = {\n            data: barData,\n            xField: 'month',\n            yField: 'value',\n            isGroup: true,\n            isStack: true,\n            seriesField: 'name',\n            groupField: 'groupName',\n            label: {\n                position: 'middle',\n                style: {\n                  fill: 'black',\n                  textAlign: 'center',\n                },\n                formatter: (item) => {\n                  return item.name + \": \" + MoneyUtil.getPercentStr(item.valuePercent)\n                },\n            },\n            tooltip: {\n                formatter: (datum) => ({\n                  name: `${datum.name}`,\n                  value: `${MoneyUtil.getStr(datum.value, true)}`,\n                }),\n            },\n        };\n        return config\n    }\n\n    _getPieConfig(dataArr) {\n        function renderStatistic(containerWidth, text, style) {\n            const { width: textWidth, height: textHeight } = measureTextWidth(text, style);\n            const R = containerWidth / 2; // r^2 = (w / 2)^2 + (h - offsetY)^2\n            let scale = 1;\n            if (containerWidth < textWidth) {\n              scale = Math.min(Math.sqrt(Math.abs(Math.pow(R, 2) / (Math.pow(textWidth / 2, 2) + Math.pow(textHeight, 2)))), 1);\n            }\n            const textStyleStr = `width:${containerWidth}px;`;\n            return `<div style=\"${textStyleStr};font-size:${scale}em;line-height:${scale < 1 ? 1 : 'inherit'};\">${text}</div>`;\n        }\n    \n        const config = {\n            appendPadding: 10,\n            data: dataArr,\n            angleField: 'valuePercent',\n            colorField: 'name',\n            radius: 1,\n            innerRadius: 0.618,\n            label: {\n              type: 'inner',\n              offset: '-50%',\n              style: {\n                fill: 'black',\n                textAlign: 'center',\n              },\n              formatter: (item) => {\n                return item.name + \": \" + MoneyUtil.getPercentStr(item.valuePercent)\n              },\n              autoRotate: false,\n            },\n            statistic: {\n              title: {\n                offsetY: -4,\n                customHtml: (container, view, datum) => {\n                  const { width, height } = container.getBoundingClientRect();\n                  const d = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2));\n                  const text = datum ? datum.name : '总计';\n                  return renderStatistic(d, text, {\n                    fontSize: 28,\n                  });\n                },\n              },\n              content: {\n                offsetY: 4,\n                customHtml: (container, view, datum, data) => {\n                  const { width } = container.getBoundingClientRect();\n                  const text = datum ? `${MoneyUtil.getStr(datum.value, true)}` \n                    : `${MoneyUtil.getStr(data.reduce((r, d) => r + d.value, 0), true)}`;\n                  return renderStatistic(width, text, {\n                    fontSize: 32,\n                  });\n                },\n              },\n            },\n            // 添加 中心统计文本 交互\n            interactions: [{\n                type: 'element-selected',\n              },{\n                type: 'element-active',\n              },{\n                type: 'pie-statistic-active',\n              },],\n            onReady:(plot) => {\n                plot.on('element:click', (event) => {\n                    this.setState({\n                        selectedGroupCode: event.data.data.code\n                    })\n                })\n            }\n        };\n        return config\n    }\n\n    newEntity(happenTime, title, money, desc, child = []) {\n        return {\n            happenTime: happenTime,\n            title: title,\n            money: money,\n            desc: desc,\n            child: child\n        }\n    }\n\n    _mapToList(productMap, filter = false) {\n        let arr = []\n        for (let productId of Object.keys(productMap)) {\n            let detail = productMap[productId]\n            if (filter && MoneyUtil.noValue(detail.currentPrice?.money) && MoneyUtil.noValue(detail.profits?.filterTotalMoney) &&\n                MoneyUtil.noValue(detail.buySells?.filterMoney) && MoneyUtil.noValue(detail.buySells?.totalMoney)) {\n                //四个值全没有，不展示\n            } else {\n                arr.push({ key: productId, entity: detail })\n            }\n        }\n        return arr\n    }\n\n    _getPassiveIncomeSummary(yearInvestData) {\n        let assetData = yearInvestData['asset']\n        let fundData = yearInvestData['fund']\n        let stockData = yearInvestData['stock']\n        return {\n            'total': assetData['totalProfitMoneys'][1] + fundData['totalProfitMoneys'][1]\n                + stockData['totalProfitMoneys'][1],\n            'details': [\n                this.newEntity(null, '资产收入', assetData['totalProfitMoneys'][1]),\n                this.newEntity(null, '投资收入', fundData['totalProfitMoneys'][1]),\n                this.newEntity(null, '股票收入', stockData['totalProfitMoneys'][1]),\n            ]\n        }\n    }\n\n    _getPassiveExpendSummary(yearInvestData) {\n        let debtData = yearInvestData['debt']\n        return {\n            'total': debtData['totalProfitMoneys'][1],\n            'details': [\n                this.newEntity(null, '负债支出', debtData['totalProfitMoneys'][1]),\n            ]\n        }\n    }\n}\n\nexport default YearPage","import React, { useState } from 'react'\nimport { Modal, message, Button, Layout, Breadcrumb, Menu, Row, Col, Input } from \"antd\"\nimport MonthPage from '../detail/month_page';\nimport TodoPage from '../detail/todo_page'\nimport InvestPage from '../detail/invest_page'\nimport { DataUtil, TimeUtil } from '../../utils/utils'\nimport InitPage from '../detail/init_page'\nimport { SummaryService } from '../../domain/service/summary_service';\nimport InputWidget from '../detail/widget/input_widget';\nimport { CusDialog } from '../detail/widget/cus_dialog';\nimport YearPage from '../detail/year_page';\nimport { App, DB_INIT } from '../..';\nimport TestPage from './test_page';\n\nconst { Header, Content, Sider } = Layout;\n\nclass MainPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        let items = {\n            'init': \"数据初始化\",\n            'by_month': \"按月展示\",\n            'by_year': \"按年展示\",\n            'invest_detail': \"投资详情\",\n        }\n        if(!App.isProduction()) {\n            items['test'] = '测试页面'\n        }\n        this.navItems = Object.keys(items).map((key) => {\n            return { key, label: items[key] }\n        });\n        this.state = {\n            navKey: \"init\",\n        }\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    render() {\n        let navKey = this.state.navKey\n        let subPage = null\n        if (navKey === 'init' || DB_INIT !== true) {\n            if(navKey !== 'init') {\n                this.state.navKey = \"init\"\n                message.error('请先加载DB文件')\n            }\n            subPage = <InitPage onDbReady={() => {\n                if(App.isProduction()) {\n                    this.state.navKey = \"by_month\"\n                } else {\n                    this.state.navKey = \"test\"\n                }\n                this.refreshPage()\n            }} />\n        } else {\n            if (navKey === 'test') {\n                subPage = <TestPage />\n            } else if (navKey === 'by_month') {\n                subPage = <MonthPage />\n            } else if (navKey === 'by_year') {\n                subPage = <YearPage />\n            } else if (navKey === 'invest_detail') {\n                subPage = <InvestPage />\n            } else {\n                subPage = <TodoPage />\n            }\n        }\n        return (\n            <Layout>\n                <Header className=\"header\">\n                    <Menu theme=\"dark\" mode=\"horizontal\" items={this.navItems} selectedKeys={[navKey]}\n                        onSelect={(item) => {\n                            this.setState(() => this.state.navKey = item.key)\n                        }} />\n                </Header>\n                {subPage}\n            </Layout>\n        )\n    }\n}\n\nexport default MainPage","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TestPage from './pages/main/test_page';\nimport MainPage from './pages/main/main_page';\nimport DBHelper from './utils/db';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport { ConfigProvider } from 'antd';\n\nmoment.locale('zh-cn');\n\nvar DB_INIT = false\n\nclass App {\n    /**\n     * @type {DBHelper}\n     */\n    static db = null\n\n    static _env = process.env.NODE_ENV\n\n    static _version = \"1.1.20230129\"\n\n    static isProduction() {\n        return this._env === 'production'\n    }\n\n    static getVersion() {\n        if(this.isProduction()) {\n            return this._version\n        } else {\n            return this._version + \"-dev\"\n        }\n    }\n\n    static async initDb(file) {\n        this.db = new DBHelper()\n        await this.db.init(file)\n        DB_INIT = true\n    }\n\n    static async createDb() {\n        this.db = new DBHelper()\n        await this.db.createDb()\n        DB_INIT = true\n    }\n}\n\nReactDOM.render(<ConfigProvider locale={zhCN}>\n    <MainPage key={\"mainpage\"}/>\n</ConfigProvider>, document.getElementById('root'));\n\n// window.onerror = function(message, source, lineNumber, colno, error) {\n//     alert(\"Console 查看错误信息：\" + message);\n// };\n\nexport { App, DB_INIT }"],"sourceRoot":""}
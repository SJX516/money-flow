{"version":3,"sources":["utils/db.js","utils/utils.js","domain/repo/base_repo.js","domain/entity/base_entity.js","domain/repo/income_expenditure_repo.js","domain/entity/income_expenditure.js","domain/service/income_expenditure_service.js","pages/test_page.js","pages/detail/widget/input_widget.js","domain/repo/investment_repo.js","domain/entity/investment.js","domain/service/investment_service.js","pages/detail/month_page.js","pages/detail/todo_page.js","pages/detail/widget/cus_dialog.js","pages/detail/invest_page.js","pages/detail/init_page.js","domain/repo/summary_repo.js","domain/entity/summary.js","domain/service/summary_service.js","pages/main/main_page.js","index.js"],"names":["DBHelper","this","db","file","a","initSqlJs","locateFile","sqlWasm","SQL","Promise","resolve","reject","fr","FileReader","readAsArrayBuffer","onload","result","fileResult","Uints","Uint8Array","Database","data","export","buffer","Buffer","from","blob","Blob","url","window","URL","createObjectURL","downloadFile","console","log","document","createElement","body","appendChild","href","download","onclick","setTimeout","revokeObjectURL","click","tablename","select","cols","values","ops","selectAndOrder","orders","sql","genWhereSql","valueDict","length","join","JSON","stringify","exec","i","id","genSubSql","run","delete","content","isWhere","op","undefined","MoneyUtil","money","DataUtil","isEmpty","notNumber","noValue","temp","toFixed","getFixedMoney","negMoney","str","substr","l","strArr","count","push","money1","money2","Math","abs","b","percent","getPercent","o","isNull","isNaN","TimeUtil","time1","month","getMonth","year","getFullYear","Date","nextMonthStart","monthStart","monthTime","currentMonthStart","monthEnd","timeStr","substring","getDay","BaseRepo","prototype","format","fmt","getDate","getHours","getMinutes","getSeconds","floor","getMilliseconds","k","test","replace","RegExp","$1","DB_INIT","convert","App","Error","selectAll","deleteAll","date","allowNull","BaseEntity","gmtCreate","gmtModified","IncomeExpenditureRepo","detail","getDateStr","happenTime","insert","type","code","desc","update","startTime","endTime","IncomeExpenditureDetail","IncomeExpenditureType","getByCode","repo","upsert","get","name","Object","keys","key","concat","toList","Incomme","Expenditure","salary","self","num13","bonus","luckmoney","work","home","other","rent","utility","daily","taxi","phone","shopping","elc","life","happy","online","offline","food","canteen","out","family","traval","gift","study","health","car","etc","oil","girlfriend","eat","IncomeExpenditureService","save","monthDate","startDate","queryTimeBetwen","Typography","Title","Paragraph","Text","Link","React","Component","Option","Select","Layout","Header","Content","Sider","ItemNames","InputWidget","props","state","getInitialState","forEach","element","code2Name","opts","value","item","stateCode","nameAppend","required","hint","defaultValue","typeName","parentCode","parentName","getOpts","align","span","flex","style","width","onChange","setState","margin","placeholder","event","target","pon","moneyPon","ponKey","addonBefore","inMonth","picker","moment","m","dateString","toDate","isNum","e","warn","alert","rows","cfgs","itemToWidget","title","bodyStyle","padding","justify","onClick","checkData","onSubmit","s","NaN","InvestmentProductRepo","entity","fixVote","InvestmentProduct","InvestmentType","InvestmentDetailRepo","productId","productName","productType","buySellId","recordType","InvestmentDetail","InvestmentRecordType","BuySell","deleteBySellId","CurrentPrice","Profit","AssetDebtCurrentPrice","AssetDebtProfit","Product","saving","debt","stock","stock_fund","etf","bond","InvestmentService","typeCode","queryAll","product","details","investMap","invest","asset","dealDetail","currentProductMap","isAsset","isDebt","isStock","info","currentPrice","profits","totalMoney","datas","buySells","totalSellMoney","totalCount","productTypeCode","_upsertInvest","sellGetMoney","currentProfit","totalInvestMoney","getProductTotalBuySellBefore","getTime","buySell","principal","sellProfit","addSellInvestOfProfit","MonthPage","incomeExpendColumns","dataIndex","render","color","getStr","subIncomeExpendColumns","dayStr","sorter","compareAbs","_","record","size","deleteIncomeExpendDetail","investColumns","currentMonthDate","currentMonthSellMoney","sellProfitPercent","getCurrentMonthSellProfitPercent","getPercentColorType","getPercentStr","asellProfitPercent","bsellProfitPercent","compare","currentMonthMoney","getCurrentMonthPagerProfit","paperProfitPercent","getCurrentMonthPagerProfitPercent","apaperProfitPercent","bpaperProfitPercent","getPagerProfitPercent","getPagerProfit","getDetailStr","safeDivision","subInvestColumns","profitMoney","profitPercent","deleteInvestDetail","assetDebtColumns","subAssetDebtColumns","lastMonthPaperProfit","lastMonthProductToDetail","queryMonth","inputValues","getMoney","refreshPage","map","getAllInvestDetailBefore","_processInvestData","queryAllInvestDataBefore","lastMonthEnd","inveseData","getArrFromInvestMap","stockData","productToDetail","totalAssetMoneys","dealInvestDetailList","totalDebtMoneys","totalInvestMoneys","totalStockMoneys","lastMonthTotalMoney","currentMonthDatas","ele","currentMonthTotalCount","productCode","typeParentCode","addBuyInvest","message","error","addSellInvest","addAssetDebtProfit","updateTime","valueRange","textType","pMoney","createShowTextRow","text","strong","child","entitys","totalCurrentPrice","totalBuySellMoney","totalProfit","newEntity","arr","expendCode2Name","incomeCode2Name","getExpenditureTypes","getIncomeTypes","investProductCode2Name","assetProductCode2Name","debtProductCode2Name","queryProducts","incomeExpendData","totalIncome","totalExpend","incomeEntitys","expendEntitys","queryData","sort","newEntityFromDetail","passiveIncomeEntitys","passiveExpendEntitys","inflateLastMonthData","currentMonthTotalMoney","currentMonthAddMoney","totalPassiveMoney","totalMoneyEntitys","assetDebtDatas","subInvestRowRender","index","profit","columns","dataSource","pagination","subInvestRowExpandable","className","orientation","direction","backgroundColor","insertData","expandable","expandedRowRender","sortDirections","rowExpandable","pageSize","createShowMoneyRowIfBiggerThan","scroll","x","TodoPage","fontSize","CusDialog","visible","footer","onCancel","onOk","InvestPage","getPagerProfitProcent","getSellProfitPercent","productColumns","showEditProductDialog","deleteProduct","productFixVoteColumns","productTypeName","productFixVote","showDialog","currentProduct","editProduct","hideDialog","upsertProduct","getProductTypes","productAssetDatas","productStockDatas","productInvestDatas","productIdToProduct","queryAllInvestData","investDatas","stockDatas","investFixVoteDatas","totalFixVote","paperProfit","fixVoteEntity","addProduct","InitPage","files","initDb","onDbReady","fileName","accept","refreshDB","click1","click2","SummaryDataRepo","time","SummaryType","BY_MONTH_KEY","SummaryData","selectAllMonthKey","SummaryService","monthDatas","queryAllMonthKey","d","monthStr","MainPage","navItems","label","navKey","months","queryMonths","includes","addMonth","sideKey","siderItems","topRightBtns","subPage","openKeys","dbReady","sideDatas","getByMonthSideDatas","lastMonth","children","j","showAddNewMonthDialog","theme","mode","items","selectedKeys","onSelect","Item","addNewMoth","locale","ReactDOM","zhCN","getElementById","init"],"mappings":"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","file":"static/js/main.70584a42.chunk.js","sourcesContent":["import initSqlJs from \"sql.js\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport sqlWasm from \"!!file-loader?name=sql-wasm-[contenthash].wasm!sql.js/dist/sql-wasm.wasm\";\n\nclass DBHelper {\n    constructor() {\n        this.db = null;\n    }\n\n    async init(file) {\n        let SQL = await initSqlJs({ locateFile: () => sqlWasm });\n        let fileResult = await new Promise((resolve, reject) => {\n            let fr = new FileReader();\n            fr.readAsArrayBuffer(file);\n            fr.onload = () => resolve(fr.result)\n        })\n        const Uints = new Uint8Array(fileResult);\n        this.db = new SQL.Database(Uints);\n    }\n\n    export() {\n        const data = this.db.export();\n        const buffer = Buffer.from(data);\n        var blob = new Blob([buffer]);\n        var url = window.URL.createObjectURL(blob);\n        this.downloadFile(url)\n    }\n\n    downloadFile(url) {\n        console.log(\"下载文件：\" + url);\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.href = url;\n        a.download = \"data.db\";\n        a.onclick = () => {\n            setTimeout(() => { window.URL.revokeObjectURL(a.href) }, 1500);\n        };\n        a.click();\n    }\n\n    selectAll(tablename) {\n        return this.select(tablename, [], [], [])\n    }\n\n    select(tablename, cols, values, ops) {\n        return this.selectAndOrder(tablename, cols, values, ops, [])\n    }\n\n    selectAndOrder(tablename, cols, values, ops, orders) {\n        let sql = `SELECT * FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        if (orders.length > 0) {\n            sql += ` order by ${orders.join(',')}`\n        }\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        return content\n    }\n\n    insert(tablename, cols, values) {\n        let sql = `INSERT INTO ${tablename} (${cols.join(',')}) VALUES (`\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            sql += \"$\" + cols[i] + i\n            if (i < cols.length - 1) {\n                sql += \", \"\n            }\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        sql += \") returning id\"\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        var content = this.db.exec(sql, valueDict);\n        return content[0].values[0][0]\n    }\n\n    update(tablename, id, cols, values) {\n        let sql = `UPDATE ${tablename} SET`\n        let data = this.genSubSql(cols, values, [], false)\n        let valueDict = data[1]\n        sql += data[0]\n        sql += \" where id=$id\"\n        valueDict['$id'] = id\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        this.db.run(sql, valueDict);\n    }\n\n    deleteAll(tablename) {\n        this.delete(tablename, [], [], [])\n    }\n\n    delete(tablename, cols, values, ops) {\n        let sql = `DELETE FROM ${tablename}`\n        let data = this.genWhereSql(cols, values, ops)\n        let valueDict = data[1]\n        sql += data[0]\n        console.log(sql + \" \" + JSON.stringify(valueDict))\n        let content = this.db.exec(sql, valueDict)\n        console.log(JSON.stringify(content))\n    }\n\n    genWhereSql(cols, values, ops) {\n        return this.genSubSql(cols, values, ops, true)\n    }\n\n    genSubSql(cols, values, ops, isWhere) {\n        let sql = \"\"\n        let valueDict = {}\n        for (var i = 0; i < cols.length; i++) {\n            if (i !== 0) {\n                sql += (isWhere ? \" and \" : \" , \")\n            } else {\n                sql += (isWhere ? \" where \" : \" \")\n            }\n            let op = ops[i]\n            if (op === undefined) {\n                op = \"=\"\n            }\n            sql += \" \" + cols[i] + \" \" + op + \" $\" + cols[i] + i\n            valueDict['$' + cols[i] + i] = values[i]\n        }\n        return [sql, valueDict]\n    }\n}\n\nexport default DBHelper","class MoneyUtil {\n    static noValue(money) {\n        return DataUtil.isEmpty(money) || DataUtil.notNumber(money) || money == 0\n    }\n\n    static getDetailStr(money) {\n        if(this.noValue(money)) {\n            return \"-\"\n        }\n        let temp = money / 100\n        if(temp % 1 === 0) {\n            return `￥${temp}`\n        } else {\n            return `￥${temp.toFixed(2)}`\n        }\n    }\n\n    static getStr(money) {\n        if(this.noValue(money)) {\n            return \"-\"\n        }\n        let temp = money / 100\n        return `￥${this.getFixedMoney(temp)}`\n    }\n\n    static getMoneyColorType(money) {\n        if(this.noValue(money)) {\n            return \"\"\n        }\n        if(money > 0) {\n            return \"danger\"\n        } else if(money < 0) {\n            return \"success\"\n        } else {\n            return \"\"\n        }\n    }\n\n    // 1234567 -> 1,234,567\n    static getFixedMoney(money) {\n        var negMoney = money < 0\n        var str = money.toFixed()\n        if(negMoney) {\n            str = str.substr(1)\n        }\n        var l = str.length\n        var strArr = []\n        for(var i = 0; i < l; ) {\n            var count = i == 0 ? l % 3 : 3\n            if(count == 0) {\n                count = 3\n            }\n            strArr.push(str.substr(i, count))\n            i += count\n        }\n        if(negMoney) {\n            return \"-\" + strArr.join(\",\")\n        } else {\n            return strArr.join(\",\")\n        }\n    }\n\n    static compare(money1, money2) {\n        if(DataUtil.notNumber(money1)) {\n            return -1\n        } else if (DataUtil.notNumber(money2)) {\n            return 1\n        }\n        return money1 - money2\n    }\n\n    static compareAbs(money1, money2) {\n        if(DataUtil.notNumber(money1)) {\n            return -1\n        } else if (DataUtil.notNumber(money2)) {\n            return 1\n        }\n        return Math.abs(money1) - Math.abs(money2)\n    }\n\n    // a / b\n    static safeDivision(a, b) {\n        if(DataUtil.notNumber(a) || DataUtil.notNumber(b) || b == 0) {\n            return null\n        } else {\n            return a / b\n        }\n    }\n\n    static getPercentStr(percent) {\n        if(DataUtil.notNumber(percent) || Math.abs(percent) <= 0.0001) {\n            return \"-\"\n        } else {\n            return DataUtil.getPercent(percent)\n        }\n    }\n\n    static getPercentColorType(percent) {\n        if(DataUtil.notNumber(percent) || Math.abs(percent) <= 0.0001) {\n            return \"\"\n        }\n        if(percent > 0) {\n            return \"danger\"\n        } else if(percent < 0) {\n            return \"success\"\n        } else {\n            return \"\"\n        }\n    }\n}\n\nclass DataUtil {\n    static isEmpty(str) {\n        return str === undefined || str === null || str === \"\"\n    }\n\n    static isNull(o) {\n        return o === undefined || o === null\n    }\n\n    static notNumber(o) {\n        return this.isNull(o) || isNaN(o)\n    }\n\n    static getPercent(a) {\n        let temp = a * 100\n        if(temp % 1 === 0) {\n            return `${temp}%`\n        } else {\n            return `${temp.toFixed(2)}%`\n        }\n    }\n\n    static compare(a, b) {\n        if(DataUtil.notNumber(a)) {\n            return -1\n        } else if (DataUtil.notNumber(b)) {\n            return 1\n        }\n        return a - b\n    }\n\n    static compareAbs(a, b) {\n        if(DataUtil.notNumber(a)) {\n            return -1\n        } else if (DataUtil.notNumber(b)) {\n            return 1\n        }\n        return Math.abs(a) - Math.abs(b)\n    }\n}\n\nclass TimeUtil {\n    static nextMonthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        if (month === 12) {\n            year += 1;\n            month = '01';\n        } else {\n            month += 1;\n            month = (month < 10) ? '0' + month : month;\n        }\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static monthEnd(time1) {\n        return new Date(this.nextMonthStart(time1) - 1)\n    }\n\n    static monthStart(time1) {\n        let month = time1.getMonth() + 1;\n        let year = time1.getFullYear();\n        return new Date(`${year}-${month}-01 00:00:00`)\n    }\n\n    static lastMonthEnd(time1) {\n        return new Date(this.monthStart(time1) - 1)\n    }\n\n    static inMonth(time1, monthTime) {\n        let currentMonthStart = TimeUtil.monthStart(monthTime)\n        let currentMonthEnd = TimeUtil.monthEnd(monthTime)\n        if (time1 > currentMonthEnd || time1 < currentMonthStart) {\n            return false\n        } else {\n            return true\n        }\n    }\n\n    static dayStr(time1) {\n        if(DataUtil.isNull(time1)) {\n            return \"\"\n        }\n        return time1.timeStr().substring(0, 10)\n    }\n\n    static monthStr(time1) {\n        return time1.timeStr().substring(0, 7)\n    }\n\n    static weekDayStr(time1) {\n        let i = time1.getDay()\n        switch (i) {\n            case 0:\n                return \"周日\"\n            case 1:\n                return \"周一\"\n            case 2:\n                return \"周二\"\n            case 3:\n                return \"周三\"\n            case 4:\n                return \"周四\"\n            case 5:\n                return \"周五\"\n            case 6:\n                return \"周六\"\n        }\n    }\n}\n\nexport { DataUtil, TimeUtil, MoneyUtil }","import { App, DB_INIT } from '../..';\n\nclass BaseRepo {\n\n    constructor() {\n        this.tablename = null\n        Date.prototype.format = function(fmt) { \n            var o = { \n               \"M+\" : this.getMonth()+1,                 //月份 \n               \"d+\" : this.getDate(),                    //日 \n               \"h+\" : this.getHours(),                   //小时 \n               \"m+\" : this.getMinutes(),                 //分 \n               \"s+\" : this.getSeconds(),                 //秒 \n               \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \n               \"S\"  : this.getMilliseconds()             //毫秒 \n           }; \n           if(/(y+)/.test(fmt)) {\n                   fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n           }\n            for(var k in o) {\n               if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length===1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n                }\n            }\n           return fmt; \n        }\n        Date.prototype.timeStr = function() {\n            return this.format(\"yyyy-MM-dd hh:mm:ss\")\n        }\n    }\n\n    static getDateStr(date, allowNull=false) {\n        if(date == null) {\n            if(allowNull) {\n                return new Date().timeStr()\n            } else {\n                throw new Error(\"日期不能为 null\")\n            }\n        } else if(date instanceof Date) {\n            return date.timeStr()\n        } else {\n            throw new Error(\"日期格式不为 Date\")\n        }\n    }\n\n    get(id) {\n        if(!DB_INIT) {\n            return null\n        }\n        if (id != null) {\n            return this.convert(App.db.select(this.tablename, [\"id\"], [id], []))\n        } else {\n            throw new Error(\"id 不能为空\")\n        }\n    }\n\n    selectAll() {\n        if(!DB_INIT) {\n            return []\n        }\n        return this.convert(App.db.selectAll(this.tablename))\n    }\n\n    delete(id) {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.delete(this.tablename, [\"id\"], [id], [])\n    }\n\n    deleteAll() {\n        if(!DB_INIT) {\n            return\n        }\n        App.db.deleteAll(this.tablename)\n    }\n\n    convert(content) {}\n}\n\nexport {BaseRepo}","class BaseEntity {\n    id = null;\n    gmtCreate = null;\n    gmtModified = null;\n}\n\nexport {BaseEntity}","import { BaseRepo } from './base_repo';\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../entity/income_expenditure';\nimport { App } from '../..';\n\nclass IncomeExpenditureRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"income_expenditure_detail\"\n    }\n\n    /**\n      * @param {IncomeExpenditureDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                 detail.type.code, detail.desc, detail.money, happenTime])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'type', 'desc', 'money', 'happen_time'], [gmtCreate, gmtModified,\n                detail.type.code, detail.desc, detail.money, happenTime])\n        }\n    }\n\n    select(startTime, endTime) {\n        if(endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        return this.convert(App.db?.select(this.tablename, [\"happen_time\", \"happen_time\"],\n         [startTime.timeStr(), endTime.timeStr()], ['>', '<']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new IncomeExpenditureDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = IncomeExpenditureType.getByCode(data[3])\n            detail.desc = data[4]\n            detail.money = data[5]\n            detail.happenTime = new Date(data[6])\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport {IncomeExpenditureRepo}","import { BaseRepo } from '../repo/base_repo';\nimport { BaseEntity } from './base_entity';\nimport {IncomeExpenditureRepo} from '../repo/income_expenditure_repo';\n\n//'收入/支出' 表\nclass IncomeExpenditureDetail extends BaseEntity {\n    /**\n     * @type {IncomeExpenditureType}\n     */\n    type = null;\n    //额外描述，备注\n    desc = null;\n    //分为单位，流入为正，流出为负\n    money = null;\n    //实际发生时间，不确定可以填月初\n    happenTime = null;\n\n    static repo = new IncomeExpenditureRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(startTime, endTime) {\n        return this.repo.select(startTime, endTime)\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(this.money*this.type.code < 0) {\n            this.money = -1 * this.money\n        }\n        IncomeExpenditureDetail.repo.upsert(this)\n    }\n}\n\n\nclass IncomeExpenditureType {\n    static Incomme = {\n        salary: {\n            self: new IncomeExpenditureType(10000, \"薪水\"),\n            num13: new IncomeExpenditureType(10001, \"薪水-十三薪\"),\n            bonus: new IncomeExpenditureType(10002, \"薪水-年终奖\"),\n        },\n        luckmoney: {\n            self: new IncomeExpenditureType(20000, \"红包\"),\n            work: new IncomeExpenditureType(20001, \"红包-工作\"),\n            home: new IncomeExpenditureType(20002, \"红包-家人\"),\n        },\n        other: {\n            self: new IncomeExpenditureType(30000, \"其他\"),\n        }\n    };\n\n    static Expenditure = {\n        home: {\n            self: new IncomeExpenditureType(-10000, \"住房\"),\n            rent: new IncomeExpenditureType(-10001, \"住房-房租\"),\n            utility: new IncomeExpenditureType(-10002, \"住房-水电\"),\n        },\n        daily: {\n            self: new IncomeExpenditureType(-20000, \"日常\"),\n            taxi: new IncomeExpenditureType(-20001, \"日常-交通\"),\n            phone: new IncomeExpenditureType(-20002, \"日常-话费\"),\n        },\n        shopping: {\n            self: new IncomeExpenditureType(-30000, \"购物\"),\n            elc: new IncomeExpenditureType(-30001, \"购物-电子\"),\n            life: new IncomeExpenditureType(-30002, \"购物-生活\"),\n        },\n        happy: {\n            self: new IncomeExpenditureType(-40000, \"娱乐\"),\n            online: new IncomeExpenditureType(-40001, \"娱乐-线上\"),\n            offline: new IncomeExpenditureType(-40002, \"娱乐-线下\"),\n        },\n        food: {\n            self: new IncomeExpenditureType(-50000, \"餐饮\"),\n            canteen: new IncomeExpenditureType(-50001, \"餐饮-食堂\"),\n            out: new IncomeExpenditureType(-50002, \"餐饮-外出\"),\n        },\n        family: {\n            self: new IncomeExpenditureType(-60000, \"家人\"),\n            traval: new IncomeExpenditureType(-60001, \"家人-交通\"),\n            gift: new IncomeExpenditureType(-60002, \"家人-礼物\"),\n        },\n        study: {\n            self: new IncomeExpenditureType(-70000, \"学习\"),\n            online: new IncomeExpenditureType(-70001, \"学习-线上\"),\n            offline: new IncomeExpenditureType(-70002, \"学习-线下\"),\n        },\n        health: {\n            self: new IncomeExpenditureType(-80000, \"健康\"),\n        },\n        car: {\n            self: new IncomeExpenditureType(-90000, \"车\"),\n            etc: new IncomeExpenditureType(-90001, \"车-停车/ETC\"),\n            oil: new IncomeExpenditureType(-90002, \"车-加油\"),\n        },\n        girlfriend: {\n            self: new IncomeExpenditureType(-100000, \"女朋友\"),\n            traval: new IncomeExpenditureType(-100001, \"女朋友-旅游\"),\n            eat: new IncomeExpenditureType(-100002, \"女朋友-吃喝\"),\n            gift: new IncomeExpenditureType(-100003, \"女朋友-礼物\"),\n        },\n        other: {\n            self: new IncomeExpenditureType(-110000, \"其他\"),\n        },\n    }\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof IncomeExpenditureType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    static values() {\n        return this.toList(this.Incomme).concat(this.toList(this.Expenditure))\n    }\n}\n\nexport {IncomeExpenditureDetail, IncomeExpenditureType}\n","import { TimeUtil } from \"../../utils/utils\"\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from \"../entity/income_expenditure\"\n\nclass IncomeExpenditureService {\n\n    static getIncomeTypes() {\n        return IncomeExpenditureType.Incomme\n    }\n\n    static getExpenditureTypes() {\n        return IncomeExpenditureType.Expenditure\n    }\n\n    /**\n     * \n     * @param {IncomeExpenditureType} type\n     * @param {Date} happenTime \n     */\n    static upsert(money, type, happenTime, desc=null, id=null) {\n        var detail = new IncomeExpenditureDetail()\n        detail.id = id\n        detail.type = type\n        detail.desc = desc\n        detail.money = money\n        detail.happenTime = happenTime\n        detail.save()\n    }\n\n    /**\n     * \n     * @returns {Array[IncomeExpenditureDetail]}\n     */\n    static queryMonth(monthDate) {\n        let startDate = TimeUtil.monthStart(monthDate)\n        return IncomeExpenditureDetail.queryTimeBetwen(startDate, TimeUtil.monthEnd(startDate))\n    }\n\n    static delete(id) {\n        IncomeExpenditureDetail.delete(id)\n    }\n\n\n}\n\nexport {IncomeExpenditureService}","import React from 'react'\nimport { Upload, Button, DatePicker, version } from \"antd\"\nimport { Typography, Divider } from 'antd'\nimport { IncomeExpenditureService } from '../domain/service/income_expenditure_service'\nimport { App } from '..'\nimport { IncomeExpenditureType } from '../domain/entity/income_expenditure'\n\nconst { Title, Paragraph, Text, Link } = Typography\n\nclass TestPage extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.count = 1\n  }\n\n  initdb(files) {\n    console.log(files)\n    App.initDb(files[0])\n  }\n\n  quickclick() {\n    IncomeExpenditureService.upsert(1234, IncomeExpenditureType.Incomme.salary, new Date(), \"测试薪水\")\n  }\n\n  quickclick2() {\n    console.log(IncomeExpenditureService.queryAll())\n  }\n\n  quickclick3() {\n  }\n\n  quickclick4() {\n    App.db.export()\n  }\n\n  render() {\n    const props = {\n      name: 'file',\n      action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n      headers: {\n        authorization: 'authorization-text',\n      },\n      onChange(info) {\n        if (info.file.status !== 'uploading') {\n          console.log(info.file, info.fileList)\n        }\n        if (info.file.status === 'done') {\n          console.log(`${info.file.name} file uploaded successfully`)\n        } else if (info.file.status === 'error') {\n          console.log(`${info.file.name} file upload failed.`)\n        }\n      },\n    }\n\n    return (\n      <div className=\"test-page1\">\n        <h1>antd version: {version}</h1>\n        <div className='btns' >\n          <input type='file' id='dbfile' onChange={(e) => this.initdb(e.target.files)} />\n          <Button type=\"primary\" onClick={() => this.quickclick()}>\n            Click 1\n          </Button>\n          <Button onClick={() => this.quickclick2()}>Click 2</Button>\n          <Button type=\"dashed\" onClick={() => this.quickclick3()}>Click 3</Button>\n          <Button type=\"text\" onClick={() => this.quickclick4()}>保存</Button>\n          <Button type=\"link\">Link Button</Button>\n          <Upload {...props}>\n            <Button>Click to Upload</Button>\n          </Upload>\n        </div>\n        <div className=\"pickers\">\n          <DatePicker />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TestPage","import React from 'react'\nimport { Button, message, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, TimeUtil } from '../../../utils/utils';\nimport moment from 'moment';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nconst ItemNames = [\"type\", \"name\", \"desc\", \"money\", \"currentPrice\", \"currentProfit\", \"sellProfit\", \"count\", \"date\"]\n\nclass InputWidget extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = this.getInitialState()\n    }\n\n    static getMoney(s, key) {\n        let ponKey = key + \"Pon\"\n        let pon = s[ponKey] ? 1 : -1\n        if(DataUtil.notNumber(s[key])) {\n            return NaN\n        } else {\n            return s[key] * pon * 100\n        }\n    }\n\n    getInitialState() {\n        let result = {}\n        ItemNames.forEach(element => {\n            result[element] = null\n        })\n        return result\n    }\n\n    getOpts(code2Name) {\n        let opts = []\n        for (let code of Object.keys(code2Name)) {\n            opts.push(<Option key={code} value={code}>{code2Name[code][0]}</Option>)\n        }\n        return opts\n    }\n\n    itemToWidget(item) {\n        let stateCode = item.name\n        let nameAppend = (item.required ?? false) ? \"(必填)\" : \"\"\n        let hint = \"\"\n        let defaultValue = item.defaultValue\n        if(DataUtil.isNull(this.state[stateCode]) && !DataUtil.isNull(defaultValue)) {\n            this.state[stateCode] = defaultValue\n        }\n        switch (item.name) {\n            case \"type\":\n                let typeName = stateCode + \"Name\"\n                let parentCode = stateCode + \"ParentCode\"\n                let parentName = stateCode + \"ParentName\"\n                let opts = this.getOpts(item.code2Name)\n                return <Row align='middle'>\n                    <Col span={8}>\n                        <Text >类型{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Select style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value,\n                                    [typeName]: item.code2Name[value][0],\n                                    [parentCode]: item.code2Name[value][1],\n                                    [parentName]: item.code2Name[value][2]\n                                })\n                            }}>\n                            {opts}\n                        </Select>\n                    </Col>\n                </Row>\n            case \"name\":\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8} >\n                        <Text >名称{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Input placeholder='名称' style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(event) => {\n                                this.setState({\n                                    [stateCode]: event.target.value\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"money\":\n            case \"currentPrice\":\n            case \"currentProfit\":\n            case \"sellProfit\":\n            case \"count\":\n                let pon = item.moneyPon\n                hint = item.hint ?? \"金额\"\n                let ponKey = stateCode + \"Pon\"\n                this.state[ponKey] = pon\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <InputNumber style={{ width: \"150px\" }} addonBefore={pon ? \"+\" : \"-\"}\n                            value={this.state[stateCode]}\n                            onChange={(value) => {\n                                this.setState({\n                                    [stateCode]: value\n                                })\n                            }} />\n                    </Col>\n                </Row>\n            case \"date\":\n                if(!DataUtil.isNull(item.inMonth)) {\n                    if(DataUtil.isNull(this.state[stateCode]) || !TimeUtil.inMonth(this.state[stateCode], new Date(item.inMonth))) {\n                        this.state[stateCode] = new Date(item.inMonth)\n                    }\n                }\n                hint = item.hint ?? \"发生日期\"\n                let picker = item.picker ?? \"\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <DatePicker style={{ width: \"150px\" }}\n                            picker={picker}\n                            value={moment(this.state[stateCode])}\n                            onChange={(m, dateString) => {\n                                this.setState({ \n                                    [stateCode]: m.toDate(),\n                                 })\n                            }} />\n                    </Col>\n                </Row>\n            case \"desc\":\n                hint = item.hint ?? \"描述\"\n                return <Row align='middle' style={{ margin: \"10px 0\" }}>\n                    <Col span={8}>\n                        <Text >{hint}{nameAppend}:</Text>\n                    </Col>\n                    <Col flex=\"auto\" align=\"center\">\n                        <Input placeholder='描述' style={{ width: \"150px\" }}\n                            value={this.state[stateCode]}\n                            onChange={(event) => {\n                                this.setState({ [stateCode]: event.target.value })\n                            }} />\n                    </Col>\n                </Row>\n            default:\n                return <Row>\n                    <Text>未支持输入配置 {item.name}</Text>\n                </Row>\n        }\n    }\n\n    checkData(state, item) {\n        try {\n            let value = state[item.name]\n            if(item.required === true && DataUtil.isNull(value)) {\n                throw new Error(item.name + \" 必须输入\")\n            }\n            if(item.isNum === true && isNaN(value)) {\n                throw new Error(item.name + \" 必须为数字\")\n            }\n            if(!DataUtil.isNull(item.inMonth)) {\n                if(!TimeUtil.inMonth(value, new Date(item.inMonth))) {\n                    throw new Error(\"发生日期仅可选在当前月份：\" + item.inMonth)\n                }\n            }\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    render() {\n        const handleSubmit = () => {\n            for (let item of this.props.cfgs) {\n                if (!this.checkData(this.state, item)) {\n                    return\n                }\n            }\n            if (this.props.onSubmit(this.state)) {\n                this.setState(this.getInitialState())\n            }\n        };\n        let rows = []\n        for (let item of this.props.cfgs) {\n            rows.push(this.itemToWidget(item))\n        }\n\n        return (<Card title={this.props.title ?? \"新增\"} style={{ margin: \"0px 5px\"}} bodyStyle={{padding: \"25px\"}}>\n            {rows}\n            <Row justify='center' style={{ margin: \"15px 0 0 0\" }}>\n                <Col>\n                    <Button type=\"primary\" onClick={handleSubmit}> 提交 </Button>\n                </Col>\n            </Row>\n        </Card>)\n    }\n}\n\nexport default InputWidget","import { BaseRepo } from './base_repo';\nimport { App, DB_INIT } from '../..';\nimport { InvestmentDetail, InvestmentProduct, InvestmentProductReal, InvestmentRecordType, InvestmentType} from '../entity/investment';\n\nclass InvestmentProductRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_product\"\n    }\n\n    /**\n      * @param {InvestmentProduct} entity\n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'name', 'type', 'desc', 'fix_vote'], [gmtCreate, gmtModified,\n                entity.name, entity.type.code, entity.desc, entity.fixVote])\n        }\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new InvestmentProduct()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.name = data[3]\n            detail.type = InvestmentType.getByCode(data[4])\n            detail.desc = data[5]\n            detail.fixVote = data[6]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nclass InvestmentDetailRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"investment_detail\"\n    }\n\n    /**\n      * @param {InvestmentDetail} detail \n      */\n    upsert(detail) {\n        let gmtCreate = BaseRepo.getDateStr(detail.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(detail.gmtModified)\n        let happenTime = BaseRepo.getDateStr(detail.happenTime)\n        if (detail.id == null) {\n            return App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                 detail.productId, detail.productName, detail.productType.code, detail.money, \n                 happenTime, detail.buySellId, detail.recordType.code, detail.count])\n        } else {\n            App.db?.update(this.tablename, detail.id, ['gmt_create', 'gmt_modified', \n            'product_id', 'product_name', 'product_type', 'money', 'happen_time', 'buy_sell_id', 'record_type', 'count'], [gmtCreate, gmtModified,\n                detail.productId, detail.productName, detail.productType.code, detail.money,\n                happenTime, detail.buySellId, detail.recordType.code, detail.count])\n            return detail.id\n        }\n    }\n\n    select(productId, recordType, startTime, endTime) {\n        if(!DB_INIT) {\n            return []\n        }\n        if(startTime != null && endTime < startTime) {\n            throw new Error(\"结束时间不能小于开始时间\")\n        }\n        let cols = [], values = [], ops = []\n        if(productId != null) {\n            cols.push('product_id')\n            values.push(productId)\n            ops.push('=')\n        }\n        if(recordType != null) {\n            cols.push('record_type')\n            values.push(recordType.code)\n            ops.push('=')\n        }\n        if(startTime != null) {\n            cols.push('happen_time')\n            values.push(startTime.timeStr())\n            ops.push('>')\n        }\n        if(endTime != null) {\n            cols.push('happen_time')\n            values.push(endTime.timeStr())\n            ops.push('<')\n        }\n        return this.convert(App.db?.selectAndOrder(this.tablename, cols, values, ops, ['happen_time desc', 'gmt_modified desc']))\n    }\n\n    selectBySellId(buySellId) {\n        return this.convert(App.db?.select(this.tablename, [\"buy_sell_id\"],\n         [buySellId], ['=']))\n    }\n\n    deleteBySellId(buySellId) {\n        App.db?.delete(this.tablename, [\"buy_sell_id\"], [buySellId], ['='])\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for(const data of content[0].values) {\n            let detail = new InvestmentDetail()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.productId = data[3]\n            detail.productName = data[4]\n            detail.productType = InvestmentType.getByCode(data[5])\n            detail.money = data[6]\n            detail.happenTime = new Date(data[7])\n            detail.buySellId = data[8]\n            detail.recordType = InvestmentRecordType.getByCode(data[9])\n            detail.count = data[10]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport { InvestmentProductRepo, InvestmentDetailRepo}","import { DataUtil } from '../../utils/utils';\nimport { InvestmentDetailRepo, InvestmentProductRepo } from '../repo/investment_repo';\nimport { BaseEntity } from './base_entity';\n\n//投资产品\nclass InvestmentProduct extends BaseEntity {\n    //产品名称\n    name = null\n    /**\n     * @type {InvestmentType}\n     */\n    type = null\n    desc = null\n    fixVote = null\n\n    static repo = new InvestmentProductRepo()\n\n    static queryAll() {\n        return this.repo.selectAll()\n    }\n\n    static delete(id) {\n        InvestmentProduct.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        if(DataUtil.isNull(this.fixVote)) {\n            this.fixVote = 0\n        }\n        InvestmentProduct.repo.upsert(this)\n    }\n}\n\n//投资明细\n class InvestmentDetail extends BaseEntity {\n    productId = null\n    productName = null\n    /**\n     * @type {InvestmentType}\n     */\n    productType = null\n    //分为单位，买入为正，卖出为负\n    money = null\n    //份数，只在表示股票时候可能存在，用于计算成本价\n    count = null\n    //实际发生时间，不确定可以填月初\n    happenTime = null\n    /**\n     * 相关联的 买入/卖出 事件ID\n     */\n    buySellId = null\n    /**\n     * @type {InvestmentRecordType}\n     */\n    recordType = null\n\n    static repo = new InvestmentDetailRepo()\n\n    static query(id) {\n        return this.repo.get(id)\n    }\n\n    static queryTimeBetwen(productId, recordType, startTime, endTime) {\n        return this.repo.select(productId, recordType, startTime, endTime)\n    }\n    \n    save() {\n        this.gmtModified = new Date()\n        return InvestmentDetail.repo.upsert(this)\n    }\n\n    delete() {\n        if(this.recordType.code === InvestmentRecordType.BuySell.code) {\n            InvestmentDetail.repo.deleteBySellId(this.id)\n        }\n        InvestmentDetail.repo.delete(this.id)\n    }\n}\n\nclass InvestmentRecordType {\n    static BuySell = new InvestmentRecordType(1, \"买入或卖出\")\n    static CurrentPrice = new InvestmentRecordType(2, \"投资类现价\")\n    static Profit = new InvestmentRecordType(3, \"投资类收益\")\n    static AssetDebtCurrentPrice = new InvestmentRecordType(4, \"资产/负债类现价\")\n    static AssetDebtProfit = new InvestmentRecordType(5, \"资产/负债类收益\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BuySell, this.CurrentPrice, this.Profit, this.AssetDebtCurrentPrice, this.AssetDebtProfit]\n    }\n}\n\nclass InvestmentType {\n    static Product = {\n        saving: new InvestmentType(1000000, \"现金类资产\"),\n        stock_fund: new InvestmentType(2000000, \"股票类基金\"),\n        etf: new InvestmentType(3000000, \"指数类基金\"),\n        bond: new InvestmentType(4000000, \"债券类基金\"),\n        stock: new InvestmentType(5000000, \"股票\"),\n        debt: new InvestmentType(6000000, \"负债\"),\n    };\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static toList(data) {\n        if(data instanceof InvestmentType) {\n            return [data]\n        } else {\n            let keys = Object.keys(data)\n            let result = []\n            for(const key of keys) {\n                result = result.concat(this.toList(data[key]))\n            }\n            return result\n        }\n    }\n\n    static values() {\n        return this.toList(this.Product)\n    }\n\n    isAsset() {\n        return this === InvestmentType.Product.saving\n    }\n\n    isDebt() {\n        return this === InvestmentType.Product.debt\n    }\n\n    isStock() {\n        return this === InvestmentType.Product.stock\n    }\n}\n\nexport {InvestmentProduct, InvestmentType, InvestmentRecordType, InvestmentDetail}\n","import { DataUtil } from \"../../utils/utils\";\nimport { InvestmentDetail, InvestmentProduct, InvestmentRecordType, InvestmentType } from \"../entity/investment\";\n\nclass InvestmentService {\n\n    static getProductTypes() {\n        return InvestmentType.toList(InvestmentType.Product)\n    }\n\n    static upsertProduct(typeCode, name, desc = null, id = null) {\n        var entity = new InvestmentProduct()\n        entity.id = id\n        entity.type = InvestmentType.getByCode(typeCode)\n        entity.desc = desc\n        entity.name = name\n        entity.save()\n    }\n\n    static queryProducts() {\n        return InvestmentProduct.queryAll()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} detail \n     * @param {String} desc \n     * @param {Number} fixVote \n     */\n    static editProduct(detail, desc, fixVote) {\n        detail.fixVote = fixVote\n        detail.desc = desc\n        detail.save()\n    }\n\n    /**\n     * \n     * @param {InvestmentProduct} product \n     */\n    static deleteProduct(product) {\n        InvestmentProduct.delete(product.id)\n    }\n\n    static getAllInvestDetailBefore(endTime) {\n        var details = InvestmentDetail.queryTimeBetwen(null, null, null, endTime)\n        let investMap = {\n            invest: {},\n            stock: {},\n            asset: {},\n            debt: {}\n        }\n        details.forEach(detail => {\n            this.dealDetail(detail, investMap)\n        })\n        return investMap\n    }\n\n    /**\n     * \n     * @param {InvestmentDetail} detail \n     * @param {{}} investMap \n     * \n     *  investMap = {\n            invest: {\n                \"1\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"buySells\": {\n                        \"totalMoney\": 100000\n                        \"datas\": [InvestmentDetail]\n                    },\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            },\n            stock: {\n                \"11\": {\n\n                }\n            }\n            asset: {                \n                \"2\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n\n            },\n            debt: {                \n                \"3\": {\n                    \"currentPrice\": InvestmentDetail,\n                    \"profits\": {\n                        \"totalMoney\": 2000\n                        \"datas\": [InvestmentDetail]\n                    }\n                }\n            }\n        }\n     */\n    static dealDetail(detail, investMap) {\n        var currentProductMap = null\n        if (detail.productType.isAsset()) {\n            currentProductMap = investMap.asset\n        } else if (detail.productType.isDebt()) {\n            currentProductMap = investMap.debt\n        } else if (detail.productType.isStock()) {\n            currentProductMap = investMap.stock\n        } else {\n            currentProductMap = investMap.invest\n        }\n        if (DataUtil.isNull(currentProductMap[detail.productId])) {\n            currentProductMap[detail.productId] = {}\n        }\n        currentProductMap = currentProductMap[detail.productId]\n        currentProductMap.info = detail\n\n        // 保存现价\n        if (detail.recordType == InvestmentRecordType.CurrentPrice || detail.recordType == InvestmentRecordType.AssetDebtCurrentPrice) {\n            if(currentProductMap.currentPrice === undefined) {\n                currentProductMap.currentPrice = detail\n            }\n        } else if (detail.recordType == InvestmentRecordType.Profit || detail.recordType == InvestmentRecordType.AssetDebtProfit) {\n            if (DataUtil.isNull(currentProductMap.profits)) {\n                currentProductMap.profits = {\n                    totalMoney: 0,\n                    datas: [],\n                }\n            }\n            currentProductMap.profits.totalMoney += detail.money\n            currentProductMap.profits.datas.push(detail)\n        } else if (detail.recordType == InvestmentRecordType.BuySell) {\n            if (DataUtil.isNull(currentProductMap.buySells)) {\n                currentProductMap.buySells = {\n                    totalMoney: 0,\n                    totalSellMoney: 0,\n                    totalCount: 0,\n                    datas: [],\n                }\n            }\n            if(!DataUtil.notNumber(detail.count)) {\n                currentProductMap.buySells.totalCount += detail.count\n            }\n            currentProductMap.buySells.totalMoney += detail.money\n            if(detail.money < 0) {\n                currentProductMap.buySells.totalSellMoney += detail.money\n            }\n            currentProductMap.buySells.datas.push(detail)\n        }\n        return investMap\n    }\n\n    static getProductTotalBuySellBefore(productId, endTime) {\n        return InvestmentDetail.queryTimeBetwen(productId, InvestmentRecordType.BuySell, null, endTime)\n    }\n\n    static addAssetDebtProfit(productId, productName, productTypeCode, money, currentPrice, happenTime) {\n        if (!DataUtil.notNumber(money) && money != 0) {\n            this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n                InvestmentRecordType.AssetDebtProfit)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.AssetDebtCurrentPrice)\n    }\n\n    static addBuyInvest(productId, productName, productTypeCode, count, money, currentPrice, happenTime) {\n        var id = this._upsertInvest(productId, productName, productTypeCode, money, happenTime,\n            InvestmentRecordType.BuySell, count)\n        this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n            InvestmentRecordType.CurrentPrice, null, id)\n    }\n\n    static addSellInvest(productId, productName, productTypeCode, count, sellGetMoney, currentPrice, currentProfit, happenTime) {\n        let totalInvestMoney = 0\n        // 添加1秒，避免同一天添加的买入查不出来\n        this.getProductTotalBuySellBefore(productId, new Date(happenTime.getTime() + 1000)).forEach(buySell => {\n            totalInvestMoney += buySell.money\n        })\n        // 所得为正数，卖出的本金 = 总投资金额 - 当前投资金额\n        let principal = totalInvestMoney - (currentPrice - currentProfit)\n        let sellProfit = sellGetMoney - principal\n        console.log(`totalInvestMoney: ${totalInvestMoney} currentProfit: ${currentProfit} currentPrice: ${currentPrice} principal: ${principal} sellGetMoney: ${sellGetMoney} sellProfit: ${sellProfit}`)\n        this.addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime)\n    }\n\n    static addSellInvestOfProfit(productId, productName, productTypeCode, count, sellGetMoney, sellProfit, currentPrice, happenTime) {\n        // 所得为正数，表示花费的本金\n        let principal = sellGetMoney - sellProfit\n        if(!DataUtil.notNumber(count)) {\n            count = -1 * count\n        }\n        // 卖出本金，需要转为负数\n        var id = this._upsertInvest(productId, productName, productTypeCode, -1 * principal, happenTime,\n            InvestmentRecordType.BuySell, count)\n        if(currentPrice >= 0) {\n            this._upsertInvest(productId, productName, productTypeCode, currentPrice, happenTime,\n                InvestmentRecordType.CurrentPrice, null, id)\n        }\n        this._upsertInvest(productId, productName, productTypeCode, sellProfit, happenTime, InvestmentRecordType.Profit, null, id)\n    }\n\n    /**\n     * @param {InvestmentDetail} detail \n     */\n    static deleteInvestDetail(detail) {\n        detail.delete()\n    }\n\n    static _upsertInvest(productId, productName, productTypeCode, money, happenTime, recordType,\n        count = null, buySellId = null, id = null) {\n        var detail = new InvestmentDetail()\n        detail.id = id\n        detail.productId = productId\n        detail.productName = productName\n        detail.productType = InvestmentType.getByCode(productTypeCode)\n        detail.money = money\n        detail.count = count\n        detail.happenTime = happenTime\n        detail.buySellId = buySellId\n        detail.recordType = recordType\n        return detail.save()\n    }\n}\n\nexport default InvestmentService","import React from 'react'\nimport { Table, Tag, Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography, message, List } from \"antd\"\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport InputWidget from './widget/input_widget';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { InvestmentRecordType, InvestmentType } from '../../domain/entity/investment';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass MonthPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.incomeExpendColumns = [{\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.title === '主动收入' || entity.title === '被动收入') {\n                    color = 'red'\n                } else if (entity.title === '主动支出' || entity.title === '被动支出') {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.title}>\n                    {entity.title}\n                </Tag>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            }\n        }]\n        this.subIncomeExpendColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '名称',\n            key: 'title',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.title}</Text>\n            },\n        }, {\n            title: '金额',\n            key: 'money',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.money, b.entity.money)\n        }, {\n            title: '描述',\n            key: 'desc',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.desc}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => {\n                if(!DataUtil.isNull(record.entity.id)) {\n                    return <Space size=\"middle\">\n                        <a onClick={() => {\n                            this.deleteIncomeExpendDetail(record.entity.id)\n                        }}>删除</a>\n                    </Space>\n                }\n            }   \n        },]\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'gold'\n                if (entity.info.productType.isStock()) {\n                    color = 'red'\n                }\n                return <Tag color={color} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let type = \"\"\n                if (!TimeUtil.inMonth(entity.currentPrice?.happenTime, entity.currentMonthDate)) {\n                    type = \"secondary\"\n                }\n                return <Text type={type}>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.currentMonthSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.currentMonthSellMoney, b.entity.buySells?.currentMonthSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = this.getCurrentMonthSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = this.getCurrentMonthSellProfitPercent(a.entity)\n                let bsellProfitPercent = this.getCurrentMonthSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.currentMonthMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.currentMonthMoney, b.entity.profits?.currentMonthMoney)\n            }\n        }, {\n            title: '当月投资',\n            key: 'currentMonthInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.currentMonthMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.currentMonthMoney, b.entity.buySells?.currentMonthMoney)\n        }, {\n            title: '当月账面利润',\n            key: 'currentMonthPaperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(this.getCurrentMonthPagerProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(this.getCurrentMonthPagerProfit(a.entity), this.getCurrentMonthPagerProfit(a.entity))\n            }\n        }, {\n            title: '当月账面利润率',\n            key: 'currentMonthPaperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = this.getCurrentMonthPagerProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = this.getCurrentMonthPagerProfitPercent(a.entity)\n                let bpaperProfitPercent = this.getCurrentMonthPagerProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = this.getPagerProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = this.getPagerProfitPercent(a.entity)\n                let bpaperProfitPercent = this.getPagerProfitPercent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(this.getPagerProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(this.getPagerProfit(a.entity), this.getPagerProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        },]\n\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.money) + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.assetDebtColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'geekblue'\n                if (entity.info.productType.isDebt()) {\n                    color = 'green'\n                }\n                return <Tag color={color} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        },  {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let type = \"\"\n                if (!TimeUtil.inMonth(entity.currentPrice?.happenTime, entity.currentMonthDate)) {\n                    type = \"secondary\"\n                }\n                return <Text type={type}>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '总额',\n            key: 'currentPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.currentMonthMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.profits?.currentMonthMoney, b.entity.profits?.currentMonthMoney)\n        }]\n\n        this.subAssetDebtColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '到账利润',\n            key: 'currentMonthProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n    }\n\n    getCurrentMonthPagerProfit(entity) {\n        let lastMonthPaperProfit = this.getPagerProfit(this.lastMonthProductToDetail[entity.info.productId])\n        let paperProfit = this.getPagerProfit(entity)\n        return paperProfit - lastMonthPaperProfit\n    }\n\n    //用这个月新增的账面利润 / 总投资额 得到这个月的收益率\n    getCurrentMonthPagerProfitPercent(entity) {\n        let lastMonthEntity = this.lastMonthProductToDetail[entity.info.productId]\n        return MoneyUtil.safeDivision(this.getCurrentMonthPagerProfit(entity), entity?.buySells?.totalMoney)\n    }\n\n    getPagerProfit(entity) {\n        if(DataUtil.isNull(entity)) {\n            return 0\n        }\n        return entity.currentPrice?.money - entity.buySells?.totalMoney\n    }\n\n    getPagerProfitPercent(entity) {\n        return MoneyUtil.safeDivision(this.getPagerProfit(entity), entity.buySells?.totalMoney)\n    }\n\n    getCurrentMonthSellProfitPercent(entity) {\n        return MoneyUtil.safeDivision(entity.profits?.currentMonthMoney, Math.abs(entity.buySells?.currentMonthSellMoney))\n    }\n    \n    queryData(monthDate) {\n        return IncomeExpenditureService.queryMonth(monthDate)\n    }\n\n    insertData(inputValues) {\n        try {\n            let money = InputWidget.getMoney(inputValues, \"money\")\n            let date = inputValues.date\n            IncomeExpenditureService.upsert(money,\n                IncomeExpenditureType.getByCode(inputValues.type), date, inputValues.desc ?? \"\")\n            this.refreshPage()\n            return true\n        } catch (e) {\n            console.warn(e)\n            alert(e)\n            return false\n        }\n    }\n\n    queryAllInvestDataBefore(monthDate) {\n        let map = InvestmentService.getAllInvestDetailBefore(TimeUtil.monthEnd(monthDate))\n        this._processInvestData(map.asset, monthDate)\n        this._processInvestData(map.debt, monthDate)\n        this._processInvestData(map.stock, monthDate)\n        this._processInvestData(map.invest, monthDate)\n        return map\n    }\n\n    inflateLastMonthData(currentMonthDate) {\n        let investMap = this.queryAllInvestDataBefore(TimeUtil.lastMonthEnd(currentMonthDate))\n\n        let inveseData = this.getArrFromInvestMap(investMap.invest)\n        let stockData = this.getArrFromInvestMap(investMap.stock)\n        let productToDetail = {}\n        for(let data of inveseData) {\n            productToDetail[data.key] = data.entity\n        }\n        for(let data of stockData) {\n            productToDetail[data.key] = data.entity\n        }\n        this.lastMonthProductToDetail = productToDetail\n    \n        let totalAssetMoneys = this.dealInvestDetailList(investMap.asset, [])\n        let totalDebtMoneys = this.dealInvestDetailList(investMap.debt, [])\n        let totalInvestMoneys = this.dealInvestDetailList(investMap.invest, [])\n        let totalStockMoneys = this.dealInvestDetailList(investMap.stock, [])\n\n        this.lastMonthTotalMoney = totalAssetMoneys[0] + totalDebtMoneys[0] + totalInvestMoneys[2] + totalStockMoneys[2]\n        return this.lastMonthTotalMoney\n    }\n\n    _processInvestData(details, currentMonthDate) {\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            detail.currentMonthDate = currentMonthDate\n            if (!DataUtil.isNull(detail.profits)) {\n                let currentMonthMoney = 0\n                let currentMonthDatas = []\n                detail.profits.datas.forEach(ele => {\n                    if (TimeUtil.inMonth(ele.happenTime, currentMonthDate)) {\n                        currentMonthMoney += ele.money\n                        currentMonthDatas.push(ele)\n                    }\n                })\n                detail.profits.currentMonthMoney = currentMonthMoney\n                detail.profits.currentMonthDatas = currentMonthDatas\n            }\n            if (!DataUtil.isNull(detail.buySells)) {\n                let currentMonthMoney = 0\n                let currentMonthSellMoney = 0\n                let currentMonthTotalCount = 0\n                let currentMonthDatas = []\n                detail.buySells.datas.forEach(ele => {\n                    if (TimeUtil.inMonth(ele.happenTime, currentMonthDate)) {\n                        currentMonthMoney += ele.money\n                        if(ele.money < 0) {\n                            currentMonthSellMoney += ele.money\n                        }\n                        if(!DataUtil.notNumber(ele.count)) {\n                            currentMonthTotalCount += ele.count\n                        }\n                        currentMonthDatas.push(ele)\n                    }\n                })\n                detail.buySells.currentMonthMoney = currentMonthMoney\n                detail.buySells.currentMonthSellMoney = currentMonthSellMoney\n                detail.buySells.currentMonthTotalCount = currentMonthTotalCount\n                detail.buySells.currentMonthDatas = currentMonthDatas\n            }\n        }\n    }\n\n    addBuyInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let count = s.count\n        let happenTime = s.date\n        InvestmentService.addBuyInvest(productCode, productName, productTypeCode, count, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    addSellInvest(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let count = s.count\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let currentProfit = InputWidget.getMoney(s, \"currentProfit\")\n        let sellProfit = InputWidget.getMoney(s, \"sellProfit\")\n        let happenTime = s.date\n        if (!DataUtil.notNumber(sellProfit)) {\n            InvestmentService.addSellInvestOfProfit(productCode, productName, productTypeCode, count, money, sellProfit, currentPrice, happenTime)\n        } else if (!DataUtil.notNumber(currentProfit)) {\n            InvestmentService.addSellInvest(productCode, productName, productTypeCode, count, money, currentPrice, currentProfit, happenTime)\n        } else {\n            message.error(\"卖出利润 或 账面利润 必须填写一个！\")\n            return false\n        }\n        this.refreshPage()\n        return true\n    }\n\n    addAssetDebtProfit(s) {\n        let productCode = s.type\n        let productName = s.typeName\n        let productTypeCode = s.typeParentCode\n        let money = InputWidget.getMoney(s, \"money\")\n        let currentPrice = InputWidget.getMoney(s, \"currentPrice\")\n        let happenTime = s.date\n        InvestmentService.addAssetDebtProfit(productCode, productName, productTypeCode, money, currentPrice, happenTime)\n        this.refreshPage()\n        return true\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    deleteIncomeExpendDetail(id) {\n        IncomeExpenditureService.delete(id)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    createShowMoneyRowIfBiggerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney > valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney > valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return this.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRowIfSmallerThan(title, money, valueRange = []) {\n        let textType = \"\"\n        let pMoney = Math.abs(money)\n        if (valueRange[0] !== undefined) {\n            if (pMoney < valueRange[1] * 100) {\n                textType = \"danger\"\n            } else if (pMoney < valueRange[0] * 100) {\n                textType = \"warning\"\n            } else {\n                textType = \"success\"\n            }\n        }\n        return this.createShowTextRow(title, MoneyUtil.getStr(money), textType)\n    }\n\n    createShowMoneyRow(title, money) {\n        return this.createShowTextRow(title, MoneyUtil.getStr(money), \"\")\n    }\n\n    createShowTextRow(title, text, textType = \"\") {\n        return (<Row align='middle' style={{ margin: '0 10px', padding: '4px 0', }} >\n            <Col span={12}>\n                <Text type={textType} strong>{title}</Text>\n            </Col>\n            <Col span={12} align='right'>\n                <Text type={textType} strong>{text}</Text>\n            </Col>\n        </Row>\n        )\n    }\n\n    /**\n     * @param {IncomeExpenditureDetail} detail \n     */\n    newEntityFromDetail(detail) {\n        return {\n            id: detail.id,\n            happenTime: detail.happenTime,\n            title: detail.type.name,\n            money: detail.money,\n            desc: detail.desc,\n        }\n    }\n\n    newEntity(happenTime, title, money, desc, child=[]) {\n        return {\n            happenTime: happenTime,\n            title: title,\n            money: money,\n            desc: desc,\n            child: child\n        }\n    }\n\n    dealInvestDetailList(details, entitys) {\n        let totalCurrentPrice = 0, totalBuySellMoney = 0, totalProfit = 0\n        for (let productId of Object.keys(details)) {\n            let detail = details[productId]\n            if (!DataUtil.isNull(detail.currentPrice)) {\n                totalCurrentPrice += detail.currentPrice.money\n            }\n            if (!DataUtil.isNull(detail.profits)) {\n                if(detail.profits.currentMonthMoney !== 0) {\n                    entitys.push(this.newEntity(detail.info.happenTime, detail.info.productName, detail.profits.currentMonthMoney, null))\n                    totalProfit += detail.profits.currentMonthMoney\n                }\n            }\n            if (!DataUtil.isNull(detail.buySells)) {\n                totalBuySellMoney += detail.buySells.totalMoney\n            }\n        }\n        return [totalCurrentPrice, totalProfit, totalBuySellMoney]\n    }\n\n    getArrFromInvestMap(map) {\n        let arr = []\n        for (let productId of Object.keys(map)) {\n            let detail = map[productId]\n            if(MoneyUtil.noValue(detail.currentPrice?.money) && MoneyUtil.noValue(detail.profits?.currentMonthMoney) && \n                MoneyUtil.noValue(detail.buySells?.currentMonthMoney) && MoneyUtil.noValue(detail.buySells?.totalMoney)) {\n                //四个值全没有，当前月不展示\n            } else {\n                arr.push({ key: productId, entity: detail })\n            }\n        }\n        return arr\n    }\n\n    render() {\n        let currentMonthDate = new Date(this.props.month)\n        if (DataUtil.notNumber(currentMonthDate)) {\n            return <Content />\n        }\n        console.log(\"month page render \" + this.props.month)\n        //处理一些类型数据\n        let expendCode2Name = {}, incomeCode2Name = {}\n        IncomeExpenditureType.toList(IncomeExpenditureService.getExpenditureTypes()).forEach(type => {\n            expendCode2Name[type.code] = [type.name]\n        })\n        IncomeExpenditureType.toList(IncomeExpenditureService.getIncomeTypes()).forEach(type => {\n            incomeCode2Name[type.code] = [type.name]\n        })\n        let investProductCode2Name = {}, assetProductCode2Name = {}, debtProductCode2Name = {}\n        InvestmentService.queryProducts().forEach(entity => {\n            if (entity.type.isAsset()) {\n                assetProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else if (entity.type.isDebt()) {\n                debtProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            } else {\n                investProductCode2Name[entity.id] = [entity.name, entity.type.code, entity.type.name]\n            }\n        })\n        //处理收支数据\n        let incomeExpendData = []\n        let totalIncome = 0, totalExpend = 0\n        let incomeEntitys = [], expendEntitys = []\n        this.queryData(currentMonthDate).sort((a, b) => Math.abs(a.type.code) > Math.abs(b.type.code) ? 1 : -1).forEach(detail => {\n            if (detail.type.code > 0) {\n                incomeEntitys.push(this.newEntityFromDetail(detail))\n                totalIncome += detail.money\n            } else {\n                expendEntitys.push(this.newEntityFromDetail(detail))\n                totalExpend += detail.money\n            }\n        })\n\n        //处理资产、负债、投资的一些总数据\n        let investMap = this.queryAllInvestDataBefore(currentMonthDate)\n        \n        let passiveIncomeEntitys = [], passiveExpendEntitys = []\n        let totalAssetMoneys = this.dealInvestDetailList(investMap.asset, passiveIncomeEntitys)\n        let totalDebtMoneys = this.dealInvestDetailList(investMap.debt, passiveExpendEntitys)\n        let totalInvestMoneys = this.dealInvestDetailList(investMap.invest, passiveIncomeEntitys)\n        let totalStockMoneys = this.dealInvestDetailList(investMap.stock, passiveIncomeEntitys)\n\n        let lastMonthTotalMoney = this.inflateLastMonthData(currentMonthDate)\n        let currentMonthTotalMoney = totalAssetMoneys[0] + totalDebtMoneys[0] + totalInvestMoneys[2] + totalStockMoneys[2]\n        let currentMonthAddMoney = totalIncome + totalExpend + totalAssetMoneys[1]\n            + totalInvestMoneys[1] + totalStockMoneys[1] + totalDebtMoneys[1]\n        let totalPassiveMoney = totalAssetMoneys[1] + totalInvestMoneys[1] + totalStockMoneys[1]\n\n        incomeExpendData.push({key: \"主动收入\", entity: this.newEntity(null, \"主动收入\", totalIncome, null, incomeEntitys)})    \n        incomeExpendData.push({key: \"被动收入\", entity: this.newEntity(null, \"被动收入\", totalPassiveMoney, \n            null, passiveIncomeEntitys)})\n        incomeExpendData.push({key: \"主动支出\", entity: this.newEntity(null, \"主动支出\", totalExpend, null, expendEntitys)})\n        incomeExpendData.push({key: \"被动支出\", entity: this.newEntity(null, \"被动支出\", totalDebtMoneys[1], \n            null, passiveExpendEntitys)})\n        incomeExpendData.push({key: \"新增现金\", entity: this.newEntity(null, \"新增现金\", currentMonthAddMoney, \n            null)})\n        incomeExpendData.push({key: \"上期总资产\", entity: this.newEntity(null, \"上期总资产\", lastMonthTotalMoney, \n            null)})\n\n        let totalMoneyEntitys = []\n        totalMoneyEntitys.push(this.newEntity(null, \"资产总额\", totalAssetMoneys[0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"负债总额\", totalDebtMoneys[0], null))\n        totalMoneyEntitys.push(this.newEntity(null, \"投资总额\", totalInvestMoneys[2], `账面价值：${MoneyUtil.getStr(totalInvestMoneys[0])}`))\n        totalMoneyEntitys.push(this.newEntity(null, \"股票总额\", totalStockMoneys[2], `账面价值：${MoneyUtil.getStr(totalStockMoneys[0])}`))\n        incomeExpendData.push({key: \"当前总资产\", entity: this.newEntity(null, \"当前总资产\", currentMonthTotalMoney, \n            null, totalMoneyEntitys)})\n\n        let subIncomeExpendRowRender = (record, index) => {\n            const data = [];\n            record.entity.child.forEach(ele => {\n                data.push({\n                    key: DataUtil.isNull(ele.id) ? ele.title : ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subIncomeExpendColumns} dataSource={data} pagination={false} sortDirections={['descend']}/>;\n        }\n        let subIncomeExpendRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.child) &&\n                record.entity.child.length > 0\n        }\n\n        //处理资产、负债、投资的表格数据\n        let inveseData = this.getArrFromInvestMap(investMap.invest)\n        let stockData = this.getArrFromInvestMap(investMap.stock)\n\n        let assetDebtDatas = []\n        for (let productId of Object.keys(investMap.asset)) {\n            let detail = investMap.asset[productId]\n            assetDebtDatas.push({ key: productId, entity: detail })\n        }\n        for (let productId of Object.keys(investMap.debt)) {\n            let detail = investMap.debt[productId]\n            assetDebtDatas.push({ key: productId, entity: detail })\n        }\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.currentMonthDatas.forEach(ele => {\n                for (let profit of record.entity.profits?.currentMonthDatas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.currentMonthDatas) &&\n                record.entity.buySells?.currentMonthDatas.length > 0\n        }\n        let subAssetDebtRowRender = (record, index) => {\n            const data = [];\n            record.entity.profits.currentMonthDatas.forEach(ele => {\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subAssetDebtColumns} dataSource={data} pagination={false} />;\n        }\n        let subAssetDebtRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.profits?.currentMonthDatas) &&\n                record.entity.profits?.currentMonthDatas.length > 0\n        }\n\n        return (\n            <Content className='Content'>\n                <Row>\n                    <Divider orientation=\"center\">使用步骤</Divider>\n                    <Space direction='vertical'>\n                        <Text>1. 还清各资产账户的借款（信用卡），记录资产现额</Text>\n                        <Text>2. 记录 支付宝/微信 当月的 收入/支出</Text>\n                        <Text>3. 记录 基金/股票 的 当月 买入/卖出 操作和当前现额等信息</Text>\n                        <Text>4. 检查 总资产环比误差 信息（大于0表示：新增现金少了/当前总资产多了），尽量保持500以下</Text>\n                    </Space>\n                </Row>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">新增收入/支出</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"收入\" cfgs={[{\n                            name: \"type\",\n                            code2Name: incomeCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                        <InputWidget title=\"支出\" cfgs={[{\n                            name: \"type\",\n                            code2Name: expendCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.insertData(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.incomeExpendColumns} dataSource={incomeExpendData}\n                            expandable={{\n                                expandedRowRender: subIncomeExpendRowRender,\n                                rowExpandable: subIncomeExpendRowExpandable\n                            }} pagination={{ pageSize: 20 }} sortDirections={['descend']} />\n                        <Divider orientation=\"center\">指标</Divider>\n                        {this.createShowTextRow(\"被动收入/主动支出（财富自有率）\", DataUtil.getPercent(totalPassiveMoney / Math.abs(totalExpend)))}\n                        {this.createShowTextRow(\"被动收入/主动收入\", DataUtil.getPercent(totalPassiveMoney / totalIncome))}\n                        {this.createShowMoneyRowIfBiggerThan(\"总资产环比误差\", currentMonthTotalMoney - lastMonthTotalMoney - currentMonthAddMoney, [500, 1000])}\n                    </Col>\n                </Row>\n                <Row justify=\"space-between\" style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">资产/负债</Divider>\n                    <Col span={8}>\n                        <InputWidget title=\"资产\" cfgs={[{\n                            name: \"type\",\n                            code2Name: assetProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"收益\",\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n\n                        <InputWidget title=\"负债\" cfgs={[{\n                            name: \"type\",\n                            code2Name: debtProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: false\n                        }, {\n                            name: \"money\",\n                            hint: \"亏损\",\n                            moneyPon: false\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addAssetDebtProfit(s)\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.assetDebtColumns} dataSource={assetDebtDatas}\n                            expandable={{\n                                expandedRowRender: subAssetDebtRowRender,\n                                rowExpandable: subAssetDebtRowExpandable\n                            }} pagination={{ pageSize: 20 }} scroll={{ x: 800 }} sortDirections={['descend']} />\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Divider orientation=\"center\">投资</Divider>\n                    <Col span={10}>\n                        <InputWidget title=\"买入投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"money\",\n                            hint: \"花费金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"count\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addBuyInvest(s)\n                        }} />\n                    </Col>\n                    <Col span={14}>\n                    <InputWidget title=\"卖出投资\" cfgs={[{\n                            name: \"type\",\n                            code2Name: investProductCode2Name,\n                            required: true\n                        }, {\n                            name: \"count\",\n                            hint: \"份数\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"money\",\n                            hint: \"卖出所得金额\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"sellProfit\",\n                            hint: \"卖出利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"currentPrice\",\n                            hint: \"账面价值\",\n                            required: true,\n                            moneyPon: true\n                        }, {\n                            name: \"currentProfit\",\n                            hint: \"账面利润-可负（二选一）\",\n                            required: false,\n                            moneyPon: true\n                        }, {\n                            name: \"date\",\n                            required: true,\n                            inMonth: this.props.month\n                        }\n                        ]} onSubmit={(s) => {\n                            return this.addSellInvest(s)\n                        }} />\n                    </Col>\n                </Row>\n                <Table columns={this.investColumns} dataSource={stockData} expandable={{\n                            expandedRowRender: subInvestRowRender,\n                            rowExpandable: subInvestRowExpandable\n                        }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n                <Table columns={this.investColumns} dataSource={inveseData} expandable={{\n                            expandedRowRender: subInvestRowRender,\n                            rowExpandable: subInvestRowExpandable\n                        }} pagination={{ pageSize: 20 }} scroll={{ x: 1500 }} sortDirections={['descend']} />\n            </Content>\n        )\n    }\n}\n\nexport default MonthPage","import React from 'react'\nimport { Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { IncomeExpenditureService } from '../../domain/service/income_expenditure_service'\nimport { IncomeExpenditureDetail, IncomeExpenditureType } from '../../domain/entity/income_expenditure'\nimport { DataUtil, TimeUtil } from '../../utils/utils';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass TodoPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    //TODO 导入导出自动化 or 在线化 \n    //年度总结，月度、年度投资利润分析\n    //利率计算器\n    render() {\n        return (\n            <Content className='Content'>\n                <Text style={{fontSize: '50px'}}> TODO </Text>\n            </Content>\n        )\n    }\n}\n\nexport default TodoPage","import React from 'react'\nimport { Modal, Form, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport InputWidget from './input_widget'\n\nclass CusDialog extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n\n    render() {\n        let title = this.props.title\n        let visible = this.props.visible\n        let cfgs = this.props.cfgs\n        return <Modal title={title} visible={visible}\n            footer={null}\n            onCancel={() => this.props.onCancel()}>\n            <InputWidget key={this.props.key} title=\"\" cfgs={cfgs} onSubmit={(s) => {\n                return this.props.onOk(s)\n            }} />\n        </Modal>\n    }\n}\n\nexport { CusDialog }","import React from 'react'\nimport { Table, Tag, Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, MoneyUtil, TimeUtil } from '../../utils/utils';\nimport InputWidget from './widget/input_widget';\nimport InvestmentService from '../../domain/service/investment_service';\nimport { CusDialog } from './widget/cus_dialog';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass InvestPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n\n        this.investColumns = [{\n            title: '类型',\n            key: 'type',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let color = 'gold'\n                if (entity.info.productType.isStock()) {\n                    color = 'red'\n                }\n                return <Tag color={color} key={entity.info.productType.code}>\n                    {entity.info.productType.name}\n                </Tag>\n            },\n        }, {\n            title: '名称',\n            key: 'name',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{entity.info.productName}</Text>\n            },\n        }, {\n            title: '最新时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.currentPrice?.happenTime)}</Text>\n            },\n        }, {\n            title: '投资总额',\n            key: 'totalInvest',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.buySells?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.buySells?.totalMoney, b.entity.buySells?.totalMoney)\n        }, {\n            title: '账面利润率',\n            key: 'paperProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let paperProfitPercent = this.getPagerProfitProcent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                    {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let apaperProfitPercent = this.getPagerProfitProcent(a.entity)\n                let bpaperProfitPercent = this.getPagerProfitProcent(b.entity)\n                return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n            }\n        }, {\n            title: '账面利润',\n            key: 'paperProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(this.getPagerProfit(entity))}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(this.getPagerProfit(a.entity), this.getPagerProfit(b.entity))\n            }\n        }, {\n            title: '最新价值',\n            key: 'lastPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.currentPrice?.money)}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compare(a.entity.currentPrice?.money, b.entity.currentPrice?.money)\n        }, {\n            title: '卖出总额',\n            key: 'sellPrice',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(Math.abs(entity.buySells?.totalSellMoney))}</Text>\n            },\n            sorter: (a, b) => MoneyUtil.compareAbs(a.entity.buySells?.totalSellMoney, b.entity.buySells?.totalSellMoney)\n        }, {\n            title: '卖出利润率',\n            key: 'sellProfitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let sellProfitPercent = this.getSellProfitPercent(entity)\n                return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                    {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n            },\n            sorter: (a, b) => {\n                let asellProfitPercent = this.getSellProfitPercent(a.entity)\n                let bsellProfitPercent = this.getSellProfitPercent(b.entity)\n                return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n            }\n        }, {\n            title: '卖出利润',\n            key: 'sellProfit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profits?.totalMoney)}</Text>\n            },\n            sorter: (a, b) => {\n                return MoneyUtil.compare(a.entity.profits?.totalMoney, b.entity.profits?.totalMoney)\n            }\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.buySells?.totalMoney, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '现价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(entity.currentPrice?.money, entity.buySells.totalCount))}</Text>\n            },\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                var count = entity.buySells?.totalCount\n                return <Text>{Math.abs(count) == 0 ? \"-\" : Math.abs(count)}</Text>\n            },\n        },];\n\n        this.subInvestColumns = [{\n            title: '发生时间',\n            key: 'happenTime',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{TimeUtil.dayStr(entity.happenTime)}</Text>\n            },\n        }, {\n            title: '买入/卖出本金',\n            key: 'principal',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.money)}</Text>\n            },\n        }, {\n            title: '到账总额',\n            key: 'sellGetMoney',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(-1 * entity.money + entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润',\n            key: 'profit',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getStr(entity.profitMoney)}</Text>\n            },\n        }, {\n            title: '利润率',\n            key: 'profitPercent',\n            dataIndex: 'entity',\n            render: (entity) => {\n                let profitPercent = MoneyUtil.safeDivision(entity.profitMoney, Math.abs(entity.money))\n                return <Text type={MoneyUtil.getPercentColorType(profitPercent)}>\n                    {MoneyUtil.getPercentStr(profitPercent)}</Text>\n            },\n        }, {\n            title: '份数',\n            key: 'totalCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{Math.abs(entity.count) == 0 ? \"-\" : Math.abs(entity.count)}</Text>\n            },\n        }, {\n            title: '成本价',\n            key: 'costPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(MoneyUtil.safeDivision(Math.abs(entity.money), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '卖出价',\n            key: 'currentPricePerCount',\n            dataIndex: 'entity',\n            render: (entity) => {\n                return <Text>{MoneyUtil.getDetailStr(\n                    MoneyUtil.safeDivision(Math.abs(-1 * entity.money + entity.profitMoney), Math.abs(entity.count)))}</Text>\n            },\n        }, {\n            title: '操作',\n            key: 'action',\n            render: (_, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => {\n                        this.deleteInvestDetail(record.entity)\n                    }}>删除</a>\n                </Space>\n            ),\n        },]\n\n        this.productColumns = [\n            {\n                title: '类型',\n                key: 'type',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let color = 'gold'\n                    if (entity.type?.isAsset()) {\n                        color = 'geekblue'\n                    } else if (entity.type?.isDebt()) {\n                        color = 'green'\n                    } else if (entity.type?.isStock()) {\n                        color = 'red'\n                    }\n                    return <Tag color={color} key={entity.type?.code}>\n                        {entity.type?.name}\n                    </Tag>\n                },\n            }, {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.name}</Text>\n                },\n            }, {\n                title: '描述',\n                key: 'desc',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.desc}</Text>\n                },\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => (\n                    <Space size=\"middle\">\n                        <a onClick={() => { this.showEditProductDialog(record.entity) }}>编辑</a>\n                        <a onClick={() => { this.deleteProduct(record.entity) }}>删除</a>\n                    </Space>\n                ),\n            },\n        ];\n\n        this.productFixVoteColumns = [\n            {\n                title: '类型',\n                key: 'type',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let color = 'gold'\n                    return <Tag color={color} key={entity.productTypeCode}>\n                        {entity.productTypeName}\n                    </Tag>\n                },\n            }, {\n                title: '名称',\n                key: 'name',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.productName}</Text>\n                },\n            }, {\n                title: '定投额',\n                key: 'fixVote',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{MoneyUtil.getStr(entity.productFixVote)}</Text>\n                },\n            }, {\n                title: '账面利润率',\n                key: 'paperProfitPercent',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let paperProfitPercent = entity.paperProfitPercent\n                    return <Text type={MoneyUtil.getPercentColorType(paperProfitPercent)}>\n                        {MoneyUtil.getPercentStr(paperProfitPercent)}</Text>\n                },\n                sorter: (a, b) => {\n                    let apaperProfitPercent = a.entity.paperProfitPercent\n                    let bpaperProfitPercent = b.entity.paperProfitPercent\n                    return DataUtil.compare(apaperProfitPercent, bpaperProfitPercent)\n                }\n            }, {\n                title: '卖出利润率',\n                key: 'sellProfitPercent',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    let sellProfitPercent = entity.sellProfitPercent\n                    return <Text type={MoneyUtil.getPercentColorType(sellProfitPercent)}>\n                        {MoneyUtil.getPercentStr(sellProfitPercent)}</Text>\n                },\n                sorter: (a, b) => {\n                    let asellProfitPercent = a.entity.sellProfitPercent\n                    let bsellProfitPercent = b.entity.sellProfitPercent\n                    return DataUtil.compare(asellProfitPercent, bsellProfitPercent)\n                }\n            }, {\n                title: '描述',\n                key: 'desc',\n                dataIndex: 'entity',\n                render: (entity) => {\n                    return <Text>{entity.product?.desc}</Text>\n                },\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (_, record) => {\n                    if(!DataUtil.isNull(record.entity.product)) {\n                        return <Space size=\"middle\">\n                            <a onClick={() => { this.showEditProductDialog(record.entity.product) }}>编辑</a>\n                            <a onClick={() => { this.deleteProduct(record.entity.product) }}>删除</a>\n                        </Space>\n                    }\n                },\n            }];\n    }\n\n    getPagerProfit(entity) {\n        return entity.currentPrice?.money - entity.buySells?.totalMoney\n    }\n\n    getPagerProfitProcent(entity) {\n        return MoneyUtil.safeDivision(this.getPagerProfit(entity), entity.buySells?.totalMoney)\n    }\n\n    getSellProfitPercent(entity) {\n        return MoneyUtil.safeDivision(entity.profits?.totalMoney, Math.abs(entity.buySells?.totalSellMoney))\n    }\n\n    showEditProductDialog(detail) {\n        this.setState({\n            showDialog: \"editProduct\",\n            currentProduct: detail\n        })\n    }\n\n    editProduct(detail, state) {\n        InvestmentService.editProduct(detail, state.desc, InputWidget.getMoney(state, \"money\"))\n        this.hideDialog()\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n            currentProduct: null\n        })\n    }\n\n    deleteInvestDetail(detail) {\n        InvestmentService.deleteInvestDetail(detail)\n        this.refreshPage()\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    addProduct(s) {\n        InvestmentService.upsertProduct(s.type, s.name, s.desc)\n        this.refreshPage()\n    }\n\n    queryProducts() {\n        return InvestmentService.queryProducts()\n    }\n\n    deleteProduct(entity) {\n        InvestmentService.deleteProduct(entity)\n        this.refreshPage()\n    }\n\n    queryAllInvestData() {\n        let map = InvestmentService.getAllInvestDetailBefore(null)\n        return map\n    }\n\n    render() {\n        console.log('invest page render')\n        let code2Name = {}\n        InvestmentService.getProductTypes().forEach(type => {\n            code2Name[type.code] = [type.name]\n        })\n        let productAssetDatas = []\n        let productStockDatas = []\n        let productInvestDatas = []\n        let productIdToProduct = {}\n        InvestmentService.queryProducts().sort((a, b) => Math.abs(a.type.code) < Math.abs(b.type.code) ? 1 : -1).forEach(entity => {\n            if(entity.type.isAsset() || entity.type.isDebt()) {\n                productAssetDatas.push({ key: entity.id, entity: entity })\n            } else if (entity.type.isStock()) {\n                productStockDatas.push({ key: entity.id, entity: entity })\n            } else {\n                productInvestDatas.push({ key: entity.id, entity: entity })\n            }\n            productIdToProduct[entity.id] = entity\n        })\n\n        let investMap = this.queryAllInvestData()\n\n        let investDatas = []\n        let stockDatas = []\n        let investFixVoteDatas = []\n        var totalFixVote = {\n            productTypeCode: 99999999,\n            productTypeName: \"汇总\",\n            productName: \"汇总\",\n            productFixVote: 0,\n            paperProfit: 0,\n            sellProfit: 0,\n            paperProfitPercent: 0,\n            sellProfitPercent: 0,\n        }\n        for (let productId of Object.keys(investMap.invest)) {\n            let detail = investMap.invest[productId]\n            investDatas.push({ key: productId, entity: detail })\n\n            var product = productIdToProduct[productId]\n            var paperProfitPercent = this.getPagerProfitProcent(detail)\n            var sellProfitPercent = this.getSellProfitPercent(detail)\n            var fixVoteEntity = {\n                product: product,\n                productTypeCode: product.type.code,\n                productTypeName: product.type.name,\n                productName: product.name,\n                productFixVote: product.fixVote,\n                paperProfit: product.fixVote * paperProfitPercent,\n                sellProfit: product.fixVote * sellProfitPercent,\n                paperProfitPercent: paperProfitPercent,\n                sellProfitPercent: sellProfitPercent,\n            }\n            totalFixVote.productFixVote += fixVoteEntity.productFixVote\n            totalFixVote.paperProfit += fixVoteEntity.paperProfit\n            totalFixVote.sellProfit += fixVoteEntity.sellProfit\n            investFixVoteDatas.push({key: productId, entity: fixVoteEntity})\n        }\n        totalFixVote.paperProfitPercent = totalFixVote.paperProfit / totalFixVote.productFixVote\n        totalFixVote.sellProfitPercent = totalFixVote.sellProfit / totalFixVote.productFixVote\n        investFixVoteDatas.push({key: 9999999, entity: totalFixVote})\n\n        for (let productId of Object.keys(investMap.stock)) {\n            let detail = investMap.stock[productId]\n            stockDatas.push({ key: productId, entity: detail })\n        }\n        let subInvestRowRender = (record, index) => {\n            const data = [];\n            record.entity.buySells.datas.forEach(ele => {\n                for (let profit of record.entity.profits?.datas ?? []) {\n                    if (profit.buySellId === ele.id) {\n                        ele.profitMoney = profit.money\n                        break\n                    }\n                }\n                data.push({\n                    key: ele.id,\n                    entity: ele\n                });\n            })\n            return <Table columns={this.subInvestColumns} dataSource={data} pagination={false} />;\n        }\n        let subInvestRowExpandable = (record) => {\n            return !DataUtil.isNull(record.entity.buySells?.datas)\n        }\n        return (\n            <Content className='Content'>\n                <Divider orientation=\"center\">投资详情</Divider>\n                <Table columns={this.investColumns} dataSource={stockDatas} expandable={{\n                    expandedRowRender: subInvestRowRender,\n                    rowExpandable: subInvestRowExpandable\n                }} pagination={{pageSize: 20}} scroll={{ x: 1500 }} sortDirections={['descend']}/>\n                <Table columns={this.investColumns} dataSource={investDatas} expandable={{\n                    expandedRowRender: subInvestRowRender,\n                    rowExpandable: subInvestRowExpandable\n                }} pagination={{pageSize: 20}} scroll={{ x: 1500 }} sortDirections={['descend']}/>\n                <Divider orientation=\"center\">投资产品</Divider>\n                <Row style={{ padding: '10px 5px', backgroundColor: \"#eee\" }}>\n                    <Col span={8}>\n                        <InputWidget title={\"新增投资产品\"} cfgs={[{\n                            name: \"type\",\n                            code2Name: code2Name,\n                            required: true\n                        }, {\n                            name: \"name\",\n                            required: true\n                        }, {\n                            name: \"desc\",\n                        }\n                        ]} onSubmit={(s) => {\n                            this.addProduct(s)\n                            return true\n                        }} />\n                    </Col>\n                    <Col span={16}>\n                        <Table columns={this.productColumns} dataSource={productStockDatas} pagination={{pageSize: 10}}/>\n                        <Table columns={this.productFixVoteColumns} dataSource={investFixVoteDatas} \n                            pagination={{pageSize: 15}} scroll={{ x: 1000 }} sortDirections={['descend']}/>\n                        <Table columns={this.productColumns} dataSource={productAssetDatas} pagination={{pageSize: 10}}/>\n                    </Col>\n                </Row>\n                <CusDialog title=\"修改产品\" visible={this.state.showDialog === \"editProduct\"}\n                        key={this.state.currentProduct?.id}\n                        cfgs={[{\n                            name: \"money\",\n                            hint: \"定投额\",\n                            defaultValue: this.state.currentProduct?.fixVote / 100,\n                            moneyPon: true\n                        }, {\n                            name: \"desc\",\n                            defaultValue: this.state.currentProduct?.desc,\n                        }]}\n                        onOk={(state) => this.editProduct(this.state.currentProduct, state)}\n                        onCancel={() => this.hideDialog()} />\n            </Content>\n        )\n    }\n}\n\nexport default InvestPage","import React from 'react'\nimport { Button, Layout, Input, Select, Space, Card, InputNumber, Row, Col, Divider, DatePicker, Popover, Typography } from \"antd\"\nimport { DataUtil, TimeUtil } from '../../utils/utils';\nimport { App } from '../..';\nimport InputWidget from './widget/input_widget';\n\nconst { Option } = Select;\nconst { Header, Content, Sider } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nclass InitPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    async refreshDB(files) {\n        await App.initDb(files[0])\n        console.log(files[0])\n        this.props.onDbReady()\n    }\n\n    export() {\n        App.db?.export()\n    }\n\n    click1() {\n    }\n\n    click2() {\n    }\n\n    render() {\n        return (\n            <Content className='Content'>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\" }}>\n                    <Col span={12} align='center'>\n                        <Divider orientation=\"center\">加载DB文件</Divider>\n                        <Text>{this.state.fileName}</Text>\n                        <input type='file' id='dbfile' accept=\".db\" onChange={(e) => this.refreshDB(e.target.files)} />\n                    </Col>\n                    <Col span={12} align='center'>\n                        <Divider orientation=\"center\">导出DB文件</Divider>\n                        <Button onClick={() => this.export()}>保存DB</Button>\n                    </Col>\n                </Row>\n                <Row style={{ padding: '10px 50px 50px', backgroundColor: \"#eee\", margin: \"10px 0\" }}>\n                    <Divider orientation=\"center\">测试按钮</Divider>\n                    <Button onClick={() => this.click1()}>click1</Button>\n                    <Button onClick={() => this.click2()}>click2</Button>\n                    <InputWidget title=\"测试\" cfgs={[{\n                        name: \"date\",\n                        hint: \"月份\",\n                        picker: \"month\",\n                        defaultValue: new Date()\n                    }]} onSubmit={(s) => {\n                        console.log(s)\n                        return true\n                    }} />\n                </Row>\n            </Content>\n        )\n    }\n}\n\nexport default InitPage","import { BaseRepo } from './base_repo';\nimport { App, DB_INIT } from '../..';\nimport { SummaryData, SummaryType } from '../entity/summary';\n\nclass SummaryDataRepo extends BaseRepo {\n\n    constructor() {\n        super()\n        this.tablename = \"data_summary\"\n    }\n\n    /**\n      * @param {SummaryData} entity \n      */\n    upsert(entity) {\n        let gmtCreate = BaseRepo.getDateStr(entity.gmtCreate, true)\n        let gmtModified = BaseRepo.getDateStr(entity.gmtModified)\n        if (entity.id == null) {\n            App.db?.insert(this.tablename, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        } else {\n            App.db?.update(this.tablename, entity.id, ['gmt_create', 'gmt_modified', 'type', 'time', 'money'], [gmtCreate, gmtModified,\n                entity.type.code, entity.time.timeStr(), entity.money])\n        }\n    }\n\n    selectAllMonthKey() {\n        return this.convert(App.db?.select(this.tablename, ['type'], [SummaryType.BY_MONTH_KEY.code], ['=']))\n    }\n\n    convert(content) {\n        let result = []\n        if(content === undefined || content[0] === undefined) {\n            return result\n        }\n        for (const data of content[0].values) {\n            let detail = new SummaryData()\n            detail.id = data[0]\n            detail.gmtCreate = new Date(data[1])\n            detail.gmtModified = new Date(data[2])\n            detail.type = SummaryType.getByCode(data[3])\n            detail.time = new Date(data[4])\n            detail.money = data[5]\n            result.push(detail)\n        }\n        return result\n    }\n}\n\nexport {SummaryDataRepo}","import { SummaryDataRepo } from '../repo/summary_repo';\nimport { BaseEntity } from './base_entity';\n\n//数据总结\nclass SummaryData extends BaseEntity {\n    /**\n     * @type {SummaryType}\n     */\n    type = null\n    time = null\n    money = null\n\n    static repo = new SummaryDataRepo()\n\n    static queryAllMonthKey() {\n        return this.repo.selectAllMonthKey()\n    }\n\n    static delete(id) {\n        this.repo.delete(id)\n    }\n\n    save() {\n        this.gmtModified = new Date()\n        SummaryData.repo.upsert(this)\n    }\n}\n\nclass SummaryType {\n    static BY_MONTH_KEY = new SummaryType(1, \"按月展示的可用月份\")\n\n    constructor(code, name) {\n        this.code = code\n        this.name = name\n    }\n\n    static getByCode(code) {\n        for(const type of this.values()) {\n            if(type.code == code) {\n                return type\n            }\n        }\n        return null\n    }\n\n    static values() {\n        return [this.BY_MONTH_KEY]\n    }\n}\n\nexport {SummaryData, SummaryType}","import { TimeUtil } from \"../../utils/utils\"\nimport { SummaryData, SummaryType } from \"../entity/summary\"\n\nclass SummaryService {\n\n    static addMonth(monthDate) {\n        var data = new SummaryData()\n        data.type = SummaryType.BY_MONTH_KEY\n        data.time = TimeUtil.monthStart(monthDate)\n        data.save()\n    }\n\n    static queryMonths() {\n        var monthDatas = SummaryData.queryAllMonthKey()\n        console.log(monthDatas)\n        return monthDatas.map(d => {\n            return TimeUtil.monthStr(d.time)\n        })\n    }\n}\n\nexport {SummaryService}","import React, { useState } from 'react'\nimport { Modal, message, Button, Layout, Breadcrumb, Menu, Row, Col, Input } from \"antd\"\nimport MonthPage from '../detail/month_page';\nimport TodoPage from '../detail/todo_page'\nimport InvestPage from '../detail/invest_page'\nimport { DataUtil, TimeUtil } from '../../utils/utils'\nimport InitPage from '../detail/init_page'\nimport { SummaryService } from '../../domain/service/summary_service';\nimport InputWidget from '../detail/widget/input_widget';\nimport { CusDialog } from '../detail/widget/cus_dialog';\n\nconst { Header, Content, Sider } = Layout;\n\nclass MainPage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.navItems = ['init', 'by_month', 'invest_detail', 'todo'].map((key) => {\n            switch (key) {\n                case 'init':\n                    return { key, label: \"数据初始化\" }\n                case 'by_month':\n                    return { key, label: \"按月展示\" }\n                case 'invest_detail':\n                    return { key, label: \"投资详情\" }\n                default:\n                    return { key, label: \"TODO\" }\n            }\n        });\n        this.state = {\n            navKey: \"init\",\n        }\n\n    }\n\n    refreshPage() {\n        this.setState({\n            updateTime: new Date().getTime()\n        })\n    }\n\n    getByMonthSideDatas() {\n        var months = SummaryService.queryMonths()\n        this.months = months\n        var map = {}\n        months.forEach(element => {\n            let year = element.substring(0, 4)\n            if (DataUtil.isNull(map[year])) {\n                map[year] = []\n            }\n            map[year].push(element)\n        })\n        console.log(map)\n        return map\n    }\n\n    showAddNewMonthDialog() {\n        this.setState({\n            showDialog: \"addNewMonth\",\n        })\n    }\n\n    addNewMoth(d) {\n        if (isNaN(d)) {\n            message.error(\"请输入有效月份，如 2022-5\")\n        } else {\n            if (this.months.includes(TimeUtil.monthStr(d))) {\n                message.error(\"已有当前月份\")\n                this.hideDialog()\n            } else {\n                SummaryService.addMonth(d)\n                this.state.sideKey = TimeUtil.monthStr(d)\n                this.hideDialog()\n            }\n        }\n    }\n\n    hideDialog() {\n        this.setState({\n            showDialog: \"\",\n        })\n    }\n\n    render() {\n        let navKey = this.state.navKey\n        let siderItems = []\n        let topRightBtns = []\n        let subPage = null\n        let openKeys = []\n        if (navKey === 'init' || this.state.dbReady !== true) {\n            if(navKey !== 'init') {\n                this.state.navKey = \"init\"\n                message.error('请先加载DB')\n            }\n            subPage = <InitPage onDbReady={() => {\n                this.state.dbReady = true\n                this.state.navKey = \"by_month\"\n                this.refreshPage()\n            }} />\n        } else {\n            if (navKey === 'by_month') {\n                let sideDatas = this.getByMonthSideDatas()\n                let lastMonth = null\n                siderItems = Object.keys(sideDatas).sort((a, b) => b > a ? 1 : -1).map((year, i) => {\n                    openKeys.push(year)\n                    return {\n                        key: year,\n                        label: year,\n                        children: sideDatas[year].sort((a, b) => b > a ? 1 : -1).map((month, j) => {\n                            if (lastMonth == null) { lastMonth = month }\n                            return {\n                                key: month,\n                                label: month,\n                            };\n                        }),\n                    };\n                })\n                if (DataUtil.isNull(this.state.sideKey)) {\n                    this.state.sideKey = lastMonth\n                }\n                topRightBtns.push(<Button onClick={() => this.showAddNewMonthDialog()}>新加月份</Button>)\n                subPage = <MonthPage month={this.state.sideKey} />\n            } else if (navKey === 'invest_detail') {\n                subPage = <InvestPage />\n            } else {\n                subPage = <TodoPage />\n            }\n        }\n        return (\n            <Layout>\n                <Header className=\"header\">\n                    <Menu theme=\"dark\" mode=\"horizontal\" items={this.navItems} selectedKeys={[navKey]}\n                        onSelect={(item) => {\n                            this.setState(() => this.state.navKey = item.key)\n                        }} />\n                </Header>\n                <Layout>\n                    <Sider width={200} className=\"site-layout-background\">\n                        <Menu\n                            className='Menu'\n                            mode=\"inline\"\n                            openKeys={openKeys}\n                            selectedKeys={[this.state.sideKey]}\n                            items={siderItems}\n                            onSelect={(item) => {\n                                this.setState(() => this.state.sideKey = item.key)\n                            }}\n                        />\n                    </Sider>\n                    <Layout className='Layout-inner'>\n                        <Row align='middle'>\n                            <Col flex=\"auto\">\n                                <Breadcrumb>\n                                    <Breadcrumb.Item>{this.state.navKey}</Breadcrumb.Item>\n                                    <Breadcrumb.Item>{this.state.sideKey}</Breadcrumb.Item>\n                                </Breadcrumb>\n                            </Col>\n                            <Col span={12} align='right'>\n                                {topRightBtns}\n                            </Col>\n                        </Row>\n                        {subPage}\n                    </Layout>\n                    <CusDialog title=\"新加月份\" visible={this.state.showDialog === \"addNewMonth\"}\n                        cfgs={[{\n                            name: \"date\",\n                            hint: \"月份\",\n                            picker: \"month\",\n                            defaultValue: new Date()\n                        }]}\n                        onOk={(state) => this.addNewMoth(state.date)}\n                        onCancel={() => this.hideDialog()} />\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nexport default MainPage","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TestPage from './pages/test_page';\nimport MainPage from './pages/main/main_page';\nimport DBHelper from './utils/db';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport { ConfigProvider } from 'antd';\n\nmoment.locale('zh-cn');\n\nReactDOM.render(<ConfigProvider locale={zhCN}>\n    <MainPage key={\"mainpage\"}/>\n</ConfigProvider>, document.getElementById('root'));\n\n// window.onerror = function(message, source, lineNumber, colno, error) {\n//     alert(\"Console 查看错误信息：\" + message);\n// };\n\nvar DB_INIT = false\n\nclass App {\n    /**\n     * @type {DBHelper}\n     */\n    static db = null\n\n    static async initDb(file) {\n        this.db = new DBHelper()\n        await this.db.init(file)\n        DB_INIT = true\n    }\n}\n\nexport { App, DB_INIT }"],"sourceRoot":""}